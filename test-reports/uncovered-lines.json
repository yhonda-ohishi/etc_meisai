{
  "summary": {
    "total_lines": 2126,
    "covered_lines": 0,
    "uncovered_lines": 2126,
    "coverage": 0,
    "package_count": 1,
    "file_count": 8
  },
  "packages": {
    "github.com\\yhonda-ohishi\\etc_meisai\\src\\models": {
      "name": "github.com\\yhonda-ohishi\\etc_meisai\\src\\models",
      "coverage": 0,
      "files": {
        "github.com/yhonda-ohishi/etc_meisai/src/models/etc_import_batch.go": {
          "name": "github.com/yhonda-ohishi/etc_meisai/src/models/etc_import_batch.go",
          "coverage": 0,
          "total_lines": 157,
          "covered_lines": 0,
          "uncovered_lines": [
            {
              "number": 4,
              "content": "\"fmt\"",
              "type": "code"
            },
            {
              "number": 5,
              "content": "\"time\"",
              "type": "code"
            },
            {
              "number": 6,
              "content": ")",
              "type": "code"
            },
            {
              "number": 9,
              "content": "type ETCImportBatch struct {",
              "type": "code"
            },
            {
              "number": 10,
              "content": "ID              int64      `json:\"id\"`",
              "type": "code"
            },
            {
              "number": 11,
              "content": "BatchHash       string     `json:\"batch_hash\"`",
              "type": "code"
            },
            {
              "number": 12,
              "content": "FileName        string     `json:\"file_name\"`",
              "type": "code"
            },
            {
              "number": 13,
              "content": "FileSize        int64      `json:\"file_size\"`",
              "type": "code"
            },
            {
              "number": 14,
              "content": "AccountID       string     `json:\"account_id,omitempty\"`",
              "type": "code"
            },
            {
              "number": 15,
              "content": "ImportType      string     `json:\"import_type,omitempty\"`",
              "type": "code"
            },
            {
              "number": 16,
              "content": "TotalRows       int64      `json:\"total_rows\"`",
              "type": "code"
            },
            {
              "number": 17,
              "content": "ProcessedRows   int64      `json:\"processed_rows\"`",
              "type": "code"
            },
            {
              "number": 18,
              "content": "SuccessCount    int64      `json:\"success_count\"`",
              "type": "code"
            },
            {
              "number": 19,
              "content": "TotalRecords    int32      `json:\"total_records\"`",
              "type": "code"
            },
            {
              "number": 20,
              "content": "ProcessedCount  int32      `json:\"processed_count\"`",
              "type": "code"
            },
            {
              "number": 21,
              "content": "CreatedCount    int32      `json:\"created_count\"`",
              "type": "code"
            },
            {
              "number": 22,
              "content": "DuplicateCount  int32      `json:\"duplicate_count\"`",
              "type": "code"
            },
            {
              "number": 23,
              "content": "ErrorCount      int64      `json:\"error_count\"`",
              "type": "code"
            },
            {
              "number": 24,
              "content": "Status          string     `json:\"status\"` // pending, processing, completed, failed",
              "type": "code"
            },
            {
              "number": 25,
              "content": "StartTime       *time.Time `json:\"start_time,omitempty\"`",
              "type": "code"
            },
            {
              "number": 26,
              "content": "CompleteTime    *time.Time `json:\"complete_time,omitempty\"`",
              "type": "code"
            },
            {
              "number": 27,
              "content": "CompletedAt     *time.Time `json:\"completed_at,omitempty\"`",
              "type": "code"
            },
            {
              "number": 28,
              "content": "ErrorMessage    string     `json:\"error_message,omitempty\"`",
              "type": "code"
            },
            {
              "number": 29,
              "content": "CreatedAt       time.Time  `json:\"created_at\"`",
              "type": "code"
            },
            {
              "number": 30,
              "content": "UpdatedAt       time.Time  `json:\"updated_at\"`",
              "type": "code"
            },
            {
              "number": 31,
              "content": "CreatedBy       string     `json:\"created_by,omitempty\"`",
              "type": "code"
            },
            {
              "number": 34,
              "content": "ImportRecords []ETCImportRecord `json:\"import_records,omitempty\"`",
              "type": "code"
            },
            {
              "number": 35,
              "content": "ImportErrors  []ETCImportError  `json:\"import_errors,omitempty\"`",
              "type": "code"
            },
            {
              "number": 36,
              "content": "}",
              "type": "code"
            },
            {
              "number": 39,
              "content": "func (b *ETCImportBatch) BeforeCreate() error {",
              "type": "code",
              "context": "in function: (b"
            },
            {
              "number": 40,
              "content": "if err := b.Validate(); err != nil {",
              "type": "error-handling",
              "context": "in function: (b"
            },
            {
              "number": 41,
              "content": "return err",
              "type": "error-handling",
              "context": "in function: (b"
            },
            {
              "number": 42,
              "content": "}",
              "type": "code",
              "context": "in function: (b"
            },
            {
              "number": 43,
              "content": "return nil",
              "type": "code",
              "context": "in function: (b"
            },
            {
              "number": 44,
              "content": "}",
              "type": "code",
              "context": "in function: (b"
            },
            {
              "number": 47,
              "content": "func (b *ETCImportBatch) BeforeUpdate() error {",
              "type": "code",
              "context": "in function: (b"
            },
            {
              "number": 48,
              "content": "if err := b.Validate(); err != nil {",
              "type": "error-handling",
              "context": "in function: (b"
            },
            {
              "number": 49,
              "content": "return err",
              "type": "error-handling",
              "context": "in function: (b"
            },
            {
              "number": 50,
              "content": "}",
              "type": "code",
              "context": "in function: (b"
            },
            {
              "number": 51,
              "content": "return nil",
              "type": "code",
              "context": "in function: (b"
            },
            {
              "number": 52,
              "content": "}",
              "type": "code",
              "context": "in function: (b"
            },
            {
              "number": 55,
              "content": "func (b *ETCImportBatch) Validate() error {",
              "type": "code",
              "context": "in function: (b"
            },
            {
              "number": 56,
              "content": "if b.FileName == \"\" {",
              "type": "branch",
              "context": "in function: (b"
            },
            {
              "number": 57,
              "content": "return fmt.Errorf(\"FileName is required\")",
              "type": "code",
              "context": "in function: (b"
            },
            {
              "number": 58,
              "content": "}",
              "type": "code",
              "context": "in function: (b"
            },
            {
              "number": 60,
              "content": "if b.TotalRecords \u003c 0 {",
              "type": "branch",
              "context": "in function: (b"
            },
            {
              "number": 61,
              "content": "return fmt.Errorf(\"TotalRecords cannot be negative\")",
              "type": "code",
              "context": "in function: (b"
            },
            {
              "number": 62,
              "content": "}",
              "type": "code",
              "context": "in function: (b"
            },
            {
              "number": 64,
              "content": "validStatuses := map[string]bool{",
              "type": "code",
              "context": "in function: (b"
            },
            {
              "number": 65,
              "content": "\"pending\":    true,",
              "type": "code",
              "context": "in function: (b"
            },
            {
              "number": 66,
              "content": "\"processing\": true,",
              "type": "code",
              "context": "in function: (b"
            },
            {
              "number": 67,
              "content": "\"completed\":  true,",
              "type": "code",
              "context": "in function: (b"
            },
            {
              "number": 68,
              "content": "\"failed\":     true,",
              "type": "code",
              "context": "in function: (b"
            },
            {
              "number": 69,
              "content": "\"cancelled\":  true,",
              "type": "code",
              "context": "in function: (b"
            },
            {
              "number": 70,
              "content": "}",
              "type": "code",
              "context": "in function: (b"
            },
            {
              "number": 72,
              "content": "if !validStatuses[b.Status] {",
              "type": "branch",
              "context": "in function: (b"
            },
            {
              "number": 73,
              "content": "return fmt.Errorf(\"invalid Status: %s\", b.Status)",
              "type": "code",
              "context": "in function: (b"
            },
            {
              "number": 74,
              "content": "}",
              "type": "code",
              "context": "in function: (b"
            },
            {
              "number": 76,
              "content": "return nil",
              "type": "code",
              "context": "in function: (b"
            },
            {
              "number": 77,
              "content": "}",
              "type": "code",
              "context": "in function: (b"
            },
            {
              "number": 80,
              "content": "func (b *ETCImportBatch) GetProgress() float32 {",
              "type": "code",
              "context": "in function: (b"
            },
            {
              "number": 81,
              "content": "if b.TotalRecords == 0 {",
              "type": "branch",
              "context": "in function: (b"
            },
            {
              "number": 82,
              "content": "return 0",
              "type": "code",
              "context": "in function: (b"
            },
            {
              "number": 83,
              "content": "}",
              "type": "code",
              "context": "in function: (b"
            },
            {
              "number": 84,
              "content": "return float32(b.ProcessedCount) / float32(b.TotalRecords) * 100",
              "type": "code",
              "context": "in function: (b"
            },
            {
              "number": 85,
              "content": "}",
              "type": "code",
              "context": "in function: (b"
            },
            {
              "number": 88,
              "content": "func (b *ETCImportBatch) IsCompleted() bool {",
              "type": "code",
              "context": "in function: (b"
            },
            {
              "number": 89,
              "content": "return b.Status == \"completed\" || b.Status == \"failed\" || b.Status == \"cancelled\"",
              "type": "code",
              "context": "in function: (b"
            },
            {
              "number": 90,
              "content": "}",
              "type": "code",
              "context": "in function: (b"
            },
            {
              "number": 93,
              "content": "func (b *ETCImportBatch) GetDuration() *time.Duration {",
              "type": "code",
              "context": "in function: (b"
            },
            {
              "number": 94,
              "content": "if b.StartTime == nil {",
              "type": "branch",
              "context": "in function: (b"
            },
            {
              "number": 95,
              "content": "return nil",
              "type": "code",
              "context": "in function: (b"
            },
            {
              "number": 96,
              "content": "}",
              "type": "code",
              "context": "in function: (b"
            },
            {
              "number": 98,
              "content": "endTime := time.Now()",
              "type": "code",
              "context": "in function: (b"
            },
            {
              "number": 99,
              "content": "if b.CompleteTime != nil {",
              "type": "branch",
              "context": "in function: (b"
            },
            {
              "number": 100,
              "content": "endTime = *b.CompleteTime",
              "type": "code",
              "context": "in function: (b"
            },
            {
              "number": 101,
              "content": "}",
              "type": "code",
              "context": "in function: (b"
            },
            {
              "number": 103,
              "content": "duration := endTime.Sub(*b.StartTime)",
              "type": "code",
              "context": "in function: (b"
            },
            {
              "number": 104,
              "content": "return \u0026duration",
              "type": "code",
              "context": "in function: (b"
            },
            {
              "number": 105,
              "content": "}",
              "type": "code",
              "context": "in function: (b"
            },
            {
              "number": 108,
              "content": "type ETCImportRecord struct {",
              "type": "code",
              "context": "in function: (b"
            },
            {
              "number": 109,
              "content": "ID          int64     `json:\"id\"`",
              "type": "code",
              "context": "in function: (b"
            },
            {
              "number": 110,
              "content": "BatchID     int64     `json:\"batch_id\"`",
              "type": "code",
              "context": "in function: (b"
            },
            {
              "number": 111,
              "content": "ETCMeisaiID *int64    `json:\"etc_meisai_id,omitempty\"`",
              "type": "code",
              "context": "in function: (b"
            },
            {
              "number": 112,
              "content": "RecordHash  string    `json:\"record_hash\"`",
              "type": "code",
              "context": "in function: (b"
            },
            {
              "number": 113,
              "content": "Status      string    `json:\"status\"` // created, duplicate, error",
              "type": "code",
              "context": "in function: (b"
            },
            {
              "number": 114,
              "content": "ErrorMessage string   `json:\"error_message,omitempty\"`",
              "type": "code",
              "context": "in function: (b"
            },
            {
              "number": 115,
              "content": "CreatedAt   time.Time `json:\"created_at\"`",
              "type": "code",
              "context": "in function: (b"
            },
            {
              "number": 118,
              "content": "Batch     *ETCImportBatch `json:\"batch,omitempty\"`",
              "type": "code",
              "context": "in function: (b"
            },
            {
              "number": 119,
              "content": "ETCMeisai *ETCMeisai      `json:\"etc_meisai,omitempty\"`",
              "type": "code",
              "context": "in function: (b"
            },
            {
              "number": 120,
              "content": "}",
              "type": "code",
              "context": "in function: (b"
            },
            {
              "number": 123,
              "content": "type ETCImportError struct {",
              "type": "code",
              "context": "in function: (b"
            },
            {
              "number": 124,
              "content": "ID           int64     `json:\"id\"`",
              "type": "code",
              "context": "in function: (b"
            },
            {
              "number": 125,
              "content": "BatchID      int64     `json:\"batch_id\"`",
              "type": "code",
              "context": "in function: (b"
            },
            {
              "number": 126,
              "content": "RowNumber    int32     `json:\"row_number\"`",
              "type": "code",
              "context": "in function: (b"
            },
            {
              "number": 127,
              "content": "ErrorType    string    `json:\"error_type\"`",
              "type": "code",
              "context": "in function: (b"
            },
            {
              "number": 128,
              "content": "ErrorMessage string    `json:\"error_message\"`",
              "type": "code",
              "context": "in function: (b"
            },
            {
              "number": 129,
              "content": "RawData      string    `json:\"raw_data,omitempty\"`",
              "type": "code",
              "context": "in function: (b"
            },
            {
              "number": 130,
              "content": "CreatedAt    time.Time `json:\"created_at\"`",
              "type": "code",
              "context": "in function: (b"
            },
            {
              "number": 133,
              "content": "Batch *ETCImportBatch `json:\"batch,omitempty\"`",
              "type": "code",
              "context": "in function: (b"
            },
            {
              "number": 134,
              "content": "}",
              "type": "code",
              "context": "in function: (b"
            },
            {
              "number": 137,
              "content": "type ImportProgressResponse struct {",
              "type": "code",
              "context": "in function: (b"
            },
            {
              "number": 138,
              "content": "Batch             *ETCImportBatch `json:\"batch\"`",
              "type": "code",
              "context": "in function: (b"
            },
            {
              "number": 139,
              "content": "ProgressPercentage float32         `json:\"progress_percentage\"`",
              "type": "code",
              "context": "in function: (b"
            },
            {
              "number": 140,
              "content": "CurrentStatus     string          `json:\"current_status\"`",
              "type": "code",
              "context": "in function: (b"
            },
            {
              "number": 141,
              "content": "RecentErrors      []string        `json:\"recent_errors,omitempty\"`",
              "type": "code",
              "context": "in function: (b"
            },
            {
              "number": 142,
              "content": "EstimatedTimeLeft *time.Duration  `json:\"estimated_time_left,omitempty\"`",
              "type": "code",
              "context": "in function: (b"
            },
            {
              "number": 143,
              "content": "}",
              "type": "code",
              "context": "in function: (b"
            },
            {
              "number": 146,
              "content": "type ImportSummary struct {",
              "type": "code",
              "context": "in function: (b"
            },
            {
              "number": 147,
              "content": "BatchID         int64         `json:\"batch_id\"`",
              "type": "code",
              "context": "in function: (b"
            },
            {
              "number": 148,
              "content": "FileName        string        `json:\"file_name\"`",
              "type": "code",
              "context": "in function: (b"
            },
            {
              "number": 149,
              "content": "TotalRecords    int32         `json:\"total_records\"`",
              "type": "code",
              "context": "in function: (b"
            },
            {
              "number": 150,
              "content": "ProcessedCount  int32         `json:\"processed_count\"`",
              "type": "code",
              "context": "in function: (b"
            },
            {
              "number": 151,
              "content": "CreatedCount    int32         `json:\"created_count\"`",
              "type": "code",
              "context": "in function: (b"
            },
            {
              "number": 152,
              "content": "DuplicateCount  int32         `json:\"duplicate_count\"`",
              "type": "code",
              "context": "in function: (b"
            },
            {
              "number": 153,
              "content": "ErrorCount      int32         `json:\"error_count\"`",
              "type": "code",
              "context": "in function: (b"
            },
            {
              "number": 154,
              "content": "Status          string        `json:\"status\"`",
              "type": "code",
              "context": "in function: (b"
            },
            {
              "number": 155,
              "content": "Duration        *time.Duration `json:\"duration,omitempty\"`",
              "type": "code",
              "context": "in function: (b"
            },
            {
              "number": 156,
              "content": "ThroughputRPS   float32       `json:\"throughput_rps,omitempty\"` // Records per second",
              "type": "code",
              "context": "in function: (b"
            },
            {
              "number": 157,
              "content": "}",
              "type": "code",
              "context": "in function: (b"
            }
          ],
          "functions": [
            {
              "name": "BeforeCreate",
              "start_line": 39,
              "end_line": 44,
              "coverage": 0,
              "uncovered_lines": [
                39,
                40,
                41,
                42,
                43,
                44
              ]
            },
            {
              "name": "BeforeUpdate",
              "start_line": 47,
              "end_line": 52,
              "coverage": 0,
              "uncovered_lines": [
                47,
                48,
                49,
                50,
                51,
                52
              ]
            },
            {
              "name": "Validate",
              "start_line": 55,
              "end_line": 77,
              "coverage": 0,
              "uncovered_lines": [
                55,
                56,
                57,
                58,
                60,
                61,
                62,
                64,
                65,
                66,
                67,
                68,
                69,
                70,
                72,
                73,
                74,
                76,
                77
              ]
            },
            {
              "name": "GetProgress",
              "start_line": 80,
              "end_line": 85,
              "coverage": 0,
              "uncovered_lines": [
                80,
                81,
                82,
                83,
                84,
                85
              ]
            },
            {
              "name": "IsCompleted",
              "start_line": 88,
              "end_line": 90,
              "coverage": 0,
              "uncovered_lines": [
                88,
                89,
                90
              ]
            },
            {
              "name": "GetDuration",
              "start_line": 93,
              "end_line": 105,
              "coverage": 0,
              "uncovered_lines": [
                93,
                94,
                95,
                96,
                98,
                99,
                100,
                101,
                103,
                104,
                105
              ]
            }
          ]
        },
        "github.com/yhonda-ohishi/etc_meisai/src/models/etc_mapping.go": {
          "name": "github.com/yhonda-ohishi/etc_meisai/src/models/etc_mapping.go",
          "coverage": 0,
          "total_lines": 392,
          "covered_lines": 0,
          "uncovered_lines": [
            {
              "number": 4,
              "content": "\"encoding/json\"",
              "type": "code"
            },
            {
              "number": 5,
              "content": "\"fmt\"",
              "type": "code"
            },
            {
              "number": 6,
              "content": "\"strings\"",
              "type": "code"
            },
            {
              "number": 7,
              "content": "\"time\"",
              "type": "code"
            },
            {
              "number": 9,
              "content": "\"gorm.io/datatypes\"",
              "type": "code"
            },
            {
              "number": 10,
              "content": "\"gorm.io/gorm\"",
              "type": "code"
            },
            {
              "number": 11,
              "content": ")",
              "type": "code"
            },
            {
              "number": 14,
              "content": "type MappingStatus string",
              "type": "code"
            },
            {
              "number": 16,
              "content": "const (",
              "type": "code"
            },
            {
              "number": 17,
              "content": "MappingStatusActive   MappingStatus = \"active\"",
              "type": "code"
            },
            {
              "number": 18,
              "content": "MappingStatusInactive MappingStatus = \"inactive\"",
              "type": "code"
            },
            {
              "number": 19,
              "content": "MappingStatusPending  MappingStatus = \"pending\"",
              "type": "code"
            },
            {
              "number": 20,
              "content": "MappingStatusRejected MappingStatus = \"rejected\"",
              "type": "code"
            },
            {
              "number": 21,
              "content": ")",
              "type": "code"
            },
            {
              "number": 24,
              "content": "type MappingType string",
              "type": "code"
            },
            {
              "number": 26,
              "content": "const (",
              "type": "code"
            },
            {
              "number": 27,
              "content": "MappingTypeDtako   MappingType = \"dtako\"",
              "type": "code"
            },
            {
              "number": 28,
              "content": "MappingTypeExpense MappingType = \"expense\"",
              "type": "code"
            },
            {
              "number": 29,
              "content": "MappingTypeInvoice MappingType = \"invoice\"",
              "type": "code"
            },
            {
              "number": 30,
              "content": ")",
              "type": "code"
            },
            {
              "number": 33,
              "content": "type MappedEntityType string",
              "type": "code"
            },
            {
              "number": 35,
              "content": "const (",
              "type": "code"
            },
            {
              "number": 36,
              "content": "EntityTypeDtakoRecord   MappedEntityType = \"dtako_record\"",
              "type": "code"
            },
            {
              "number": 37,
              "content": "EntityTypeExpenseRecord MappedEntityType = \"expense_record\"",
              "type": "code"
            },
            {
              "number": 38,
              "content": "EntityTypeInvoiceRecord MappedEntityType = \"invoice_record\"",
              "type": "code"
            },
            {
              "number": 39,
              "content": ")",
              "type": "code"
            },
            {
              "number": 42,
              "content": "type ETCMapping struct {",
              "type": "code"
            },
            {
              "number": 43,
              "content": "ID               int64            `gorm:\"primaryKey;autoIncrement\" json:\"id\"`",
              "type": "code"
            },
            {
              "number": 44,
              "content": "ETCRecordID      int64            `gorm:\"not null;index\" json:\"etc_record_id\"`",
              "type": "code"
            },
            {
              "number": 45,
              "content": "ETCRecord        ETCMeisaiRecord  `gorm:\"foreignKey:ETCRecordID\" json:\"etc_record,omitempty\"`",
              "type": "code"
            },
            {
              "number": 46,
              "content": "MappingType      string           `gorm:\"size:50;not null;index\" json:\"mapping_type\"`",
              "type": "code"
            },
            {
              "number": 47,
              "content": "MappedEntityID   int64            `gorm:\"not null;index\" json:\"mapped_entity_id\"`",
              "type": "code"
            },
            {
              "number": 48,
              "content": "MappedEntityType string           `gorm:\"size:50;not null;index\" json:\"mapped_entity_type\"`",
              "type": "code"
            },
            {
              "number": 49,
              "content": "Confidence       float32          `gorm:\"default:1.0\" json:\"confidence\"`",
              "type": "code"
            },
            {
              "number": 50,
              "content": "Status           string           `gorm:\"size:20;default:'active';index\" json:\"status\"`",
              "type": "code"
            },
            {
              "number": 51,
              "content": "Metadata         datatypes.JSON   `gorm:\"type:json\" json:\"metadata,omitempty\"`",
              "type": "code"
            },
            {
              "number": 52,
              "content": "CreatedBy        string           `gorm:\"size:100\" json:\"created_by,omitempty\"`",
              "type": "code"
            },
            {
              "number": 53,
              "content": "CreatedAt        time.Time        `gorm:\"autoCreateTime\" json:\"created_at\"`",
              "type": "code"
            },
            {
              "number": 54,
              "content": "UpdatedAt        time.Time        `gorm:\"autoUpdateTime\" json:\"updated_at\"`",
              "type": "code"
            },
            {
              "number": 55,
              "content": "}",
              "type": "code"
            },
            {
              "number": 58,
              "content": "func (ETCMapping) TableName() string {",
              "type": "code",
              "context": "in function: (ETCMapping)"
            },
            {
              "number": 59,
              "content": "return \"etc_mappings\"",
              "type": "code",
              "context": "in function: (ETCMapping)"
            },
            {
              "number": 60,
              "content": "}",
              "type": "code",
              "context": "in function: (ETCMapping)"
            },
            {
              "number": 63,
              "content": "func (m *ETCMapping) BeforeCreate(tx *gorm.DB) error {",
              "type": "code",
              "context": "in function: (m"
            },
            {
              "number": 65,
              "content": "now := time.Now()",
              "type": "code",
              "context": "in function: (m"
            },
            {
              "number": 66,
              "content": "if m.CreatedAt.IsZero() {",
              "type": "branch",
              "context": "in function: (m"
            },
            {
              "number": 67,
              "content": "m.CreatedAt = now",
              "type": "code",
              "context": "in function: (m"
            },
            {
              "number": 68,
              "content": "}",
              "type": "code",
              "context": "in function: (m"
            },
            {
              "number": 69,
              "content": "if m.UpdatedAt.IsZero() {",
              "type": "branch",
              "context": "in function: (m"
            },
            {
              "number": 70,
              "content": "m.UpdatedAt = now",
              "type": "code",
              "context": "in function: (m"
            },
            {
              "number": 71,
              "content": "}",
              "type": "code",
              "context": "in function: (m"
            },
            {
              "number": 74,
              "content": "if m.Status == \"\" {",
              "type": "branch",
              "context": "in function: (m"
            },
            {
              "number": 75,
              "content": "m.Status = string(MappingStatusActive)",
              "type": "code",
              "context": "in function: (m"
            },
            {
              "number": 76,
              "content": "}",
              "type": "code",
              "context": "in function: (m"
            },
            {
              "number": 78,
              "content": "return m.validate()",
              "type": "code",
              "context": "in function: (m"
            },
            {
              "number": 79,
              "content": "}",
              "type": "code",
              "context": "in function: (m"
            },
            {
              "number": 82,
              "content": "func (m *ETCMapping) BeforeSave(tx *gorm.DB) error {",
              "type": "code",
              "context": "in function: (m"
            },
            {
              "number": 84,
              "content": "m.UpdatedAt = time.Now()",
              "type": "code",
              "context": "in function: (m"
            },
            {
              "number": 86,
              "content": "return m.validate()",
              "type": "code",
              "context": "in function: (m"
            },
            {
              "number": 87,
              "content": "}",
              "type": "code",
              "context": "in function: (m"
            },
            {
              "number": 90,
              "content": "func (m *ETCMapping) validate() error {",
              "type": "code",
              "context": "in function: (m"
            },
            {
              "number": 92,
              "content": "if m.ETCRecordID \u003c= 0 {",
              "type": "branch",
              "context": "in function: (m"
            },
            {
              "number": 93,
              "content": "return fmt.Errorf(\"ETC record ID must be positive\")",
              "type": "code",
              "context": "in function: (m"
            },
            {
              "number": 94,
              "content": "}",
              "type": "code",
              "context": "in function: (m"
            },
            {
              "number": 97,
              "content": "if err := m.validateMappingType(); err != nil {",
              "type": "error-handling",
              "context": "in function: (m"
            },
            {
              "number": 98,
              "content": "return err",
              "type": "error-handling",
              "context": "in function: (m"
            },
            {
              "number": 99,
              "content": "}",
              "type": "code",
              "context": "in function: (m"
            },
            {
              "number": 102,
              "content": "if m.MappedEntityID \u003c= 0 {",
              "type": "branch",
              "context": "in function: (m"
            },
            {
              "number": 103,
              "content": "return fmt.Errorf(\"mapped entity ID must be positive\")",
              "type": "code",
              "context": "in function: (m"
            },
            {
              "number": 104,
              "content": "}",
              "type": "code",
              "context": "in function: (m"
            },
            {
              "number": 107,
              "content": "if err := m.validateMappedEntityType(); err != nil {",
              "type": "error-handling",
              "context": "in function: (m"
            },
            {
              "number": 108,
              "content": "return err",
              "type": "error-handling",
              "context": "in function: (m"
            },
            {
              "number": 109,
              "content": "}",
              "type": "code",
              "context": "in function: (m"
            },
            {
              "number": 112,
              "content": "if m.Confidence \u003c 0.0 || m.Confidence \u003e 1.0 {",
              "type": "branch",
              "context": "in function: (m"
            },
            {
              "number": 113,
              "content": "return fmt.Errorf(\"confidence must be between 0.0 and 1.0\")",
              "type": "code",
              "context": "in function: (m"
            },
            {
              "number": 114,
              "content": "}",
              "type": "code",
              "context": "in function: (m"
            },
            {
              "number": 117,
              "content": "if err := m.validateStatus(); err != nil {",
              "type": "error-handling",
              "context": "in function: (m"
            },
            {
              "number": 118,
              "content": "return err",
              "type": "error-handling",
              "context": "in function: (m"
            },
            {
              "number": 119,
              "content": "}",
              "type": "code",
              "context": "in function: (m"
            },
            {
              "number": 122,
              "content": "if m.CreatedBy != \"\" \u0026\u0026 len(m.CreatedBy) \u003e 100 {",
              "type": "branch",
              "context": "in function: (m"
            },
            {
              "number": 123,
              "content": "return fmt.Errorf(\"created_by field too long (max 100 characters)\")",
              "type": "code",
              "context": "in function: (m"
            },
            {
              "number": 124,
              "content": "}",
              "type": "code",
              "context": "in function: (m"
            },
            {
              "number": 126,
              "content": "return nil",
              "type": "code",
              "context": "in function: (m"
            },
            {
              "number": 127,
              "content": "}",
              "type": "code",
              "context": "in function: (m"
            },
            {
              "number": 130,
              "content": "func (m *ETCMapping) validateMappingType() error {",
              "type": "code",
              "context": "in function: (m"
            },
            {
              "number": 131,
              "content": "validTypes := []string{",
              "type": "code",
              "context": "in function: (m"
            },
            {
              "number": 132,
              "content": "string(MappingTypeDtako),",
              "type": "code",
              "context": "in function: (m"
            },
            {
              "number": 133,
              "content": "string(MappingTypeExpense),",
              "type": "code",
              "context": "in function: (m"
            },
            {
              "number": 134,
              "content": "string(MappingTypeInvoice),",
              "type": "code",
              "context": "in function: (m"
            },
            {
              "number": 135,
              "content": "}",
              "type": "code",
              "context": "in function: (m"
            },
            {
              "number": 137,
              "content": "mappingType := strings.ToLower(strings.TrimSpace(m.MappingType))",
              "type": "code",
              "context": "in function: (m"
            },
            {
              "number": 138,
              "content": "if mappingType == \"\" {",
              "type": "branch",
              "context": "in function: (m"
            },
            {
              "number": 139,
              "content": "return fmt.Errorf(\"mapping type cannot be empty\")",
              "type": "code",
              "context": "in function: (m"
            },
            {
              "number": 140,
              "content": "}",
              "type": "code",
              "context": "in function: (m"
            },
            {
              "number": 142,
              "content": "for _, validType := range validTypes {",
              "type": "branch",
              "context": "in function: (m"
            },
            {
              "number": 143,
              "content": "if mappingType == validType {",
              "type": "branch",
              "context": "in function: (m"
            },
            {
              "number": 144,
              "content": "m.MappingType = mappingType // Normalize to lowercase",
              "type": "code",
              "context": "in function: (m"
            },
            {
              "number": 145,
              "content": "return nil",
              "type": "code",
              "context": "in function: (m"
            },
            {
              "number": 146,
              "content": "}",
              "type": "code",
              "context": "in function: (m"
            },
            {
              "number": 147,
              "content": "}",
              "type": "code",
              "context": "in function: (m"
            },
            {
              "number": 149,
              "content": "return fmt.Errorf(\"invalid mapping type: %s (must be one of: %s)\",",
              "type": "code",
              "context": "in function: (m"
            },
            {
              "number": 150,
              "content": "m.MappingType, strings.Join(validTypes, \", \"))",
              "type": "code",
              "context": "in function: (m"
            },
            {
              "number": 151,
              "content": "}",
              "type": "code",
              "context": "in function: (m"
            },
            {
              "number": 154,
              "content": "func (m *ETCMapping) validateMappedEntityType() error {",
              "type": "code",
              "context": "in function: (m"
            },
            {
              "number": 155,
              "content": "validTypes := []string{",
              "type": "code",
              "context": "in function: (m"
            },
            {
              "number": 156,
              "content": "string(EntityTypeDtakoRecord),",
              "type": "code",
              "context": "in function: (m"
            },
            {
              "number": 157,
              "content": "string(EntityTypeExpenseRecord),",
              "type": "code",
              "context": "in function: (m"
            },
            {
              "number": 158,
              "content": "string(EntityTypeInvoiceRecord),",
              "type": "code",
              "context": "in function: (m"
            },
            {
              "number": 159,
              "content": "}",
              "type": "code",
              "context": "in function: (m"
            },
            {
              "number": 161,
              "content": "entityType := strings.ToLower(strings.TrimSpace(m.MappedEntityType))",
              "type": "code",
              "context": "in function: (m"
            },
            {
              "number": 162,
              "content": "if entityType == \"\" {",
              "type": "branch",
              "context": "in function: (m"
            },
            {
              "number": 163,
              "content": "return fmt.Errorf(\"mapped entity type cannot be empty\")",
              "type": "code",
              "context": "in function: (m"
            },
            {
              "number": 164,
              "content": "}",
              "type": "code",
              "context": "in function: (m"
            },
            {
              "number": 166,
              "content": "for _, validType := range validTypes {",
              "type": "branch",
              "context": "in function: (m"
            },
            {
              "number": 167,
              "content": "if entityType == validType {",
              "type": "branch",
              "context": "in function: (m"
            },
            {
              "number": 168,
              "content": "m.MappedEntityType = entityType // Normalize to lowercase",
              "type": "code",
              "context": "in function: (m"
            },
            {
              "number": 169,
              "content": "return nil",
              "type": "code",
              "context": "in function: (m"
            },
            {
              "number": 170,
              "content": "}",
              "type": "code",
              "context": "in function: (m"
            },
            {
              "number": 171,
              "content": "}",
              "type": "code",
              "context": "in function: (m"
            },
            {
              "number": 173,
              "content": "return fmt.Errorf(\"invalid mapped entity type: %s (must be one of: %s)\",",
              "type": "code",
              "context": "in function: (m"
            },
            {
              "number": 174,
              "content": "m.MappedEntityType, strings.Join(validTypes, \", \"))",
              "type": "code",
              "context": "in function: (m"
            },
            {
              "number": 175,
              "content": "}",
              "type": "code",
              "context": "in function: (m"
            },
            {
              "number": 178,
              "content": "func (m *ETCMapping) validateStatus() error {",
              "type": "code",
              "context": "in function: (m"
            },
            {
              "number": 179,
              "content": "validStatuses := []string{",
              "type": "code",
              "context": "in function: (m"
            },
            {
              "number": 180,
              "content": "string(MappingStatusActive),",
              "type": "code",
              "context": "in function: (m"
            },
            {
              "number": 181,
              "content": "string(MappingStatusInactive),",
              "type": "code",
              "context": "in function: (m"
            },
            {
              "number": 182,
              "content": "string(MappingStatusPending),",
              "type": "code",
              "context": "in function: (m"
            },
            {
              "number": 183,
              "content": "string(MappingStatusRejected),",
              "type": "code",
              "context": "in function: (m"
            },
            {
              "number": 184,
              "content": "}",
              "type": "code",
              "context": "in function: (m"
            },
            {
              "number": 186,
              "content": "status := strings.ToLower(strings.TrimSpace(m.Status))",
              "type": "code",
              "context": "in function: (m"
            },
            {
              "number": 187,
              "content": "if status == \"\" {",
              "type": "branch",
              "context": "in function: (m"
            },
            {
              "number": 188,
              "content": "m.Status = string(MappingStatusActive) // Default to active",
              "type": "code",
              "context": "in function: (m"
            },
            {
              "number": 189,
              "content": "return nil",
              "type": "code",
              "context": "in function: (m"
            },
            {
              "number": 190,
              "content": "}",
              "type": "code",
              "context": "in function: (m"
            },
            {
              "number": 192,
              "content": "for _, validStatus := range validStatuses {",
              "type": "branch",
              "context": "in function: (m"
            },
            {
              "number": 193,
              "content": "if status == validStatus {",
              "type": "branch",
              "context": "in function: (m"
            },
            {
              "number": 194,
              "content": "m.Status = status // Normalize to lowercase",
              "type": "code",
              "context": "in function: (m"
            },
            {
              "number": 195,
              "content": "return nil",
              "type": "code",
              "context": "in function: (m"
            },
            {
              "number": 196,
              "content": "}",
              "type": "code",
              "context": "in function: (m"
            },
            {
              "number": 197,
              "content": "}",
              "type": "code",
              "context": "in function: (m"
            },
            {
              "number": 199,
              "content": "return fmt.Errorf(\"invalid status: %s (must be one of: %s)\",",
              "type": "code",
              "context": "in function: (m"
            },
            {
              "number": 200,
              "content": "m.Status, strings.Join(validStatuses, \", \"))",
              "type": "code",
              "context": "in function: (m"
            },
            {
              "number": 201,
              "content": "}",
              "type": "code",
              "context": "in function: (m"
            },
            {
              "number": 204,
              "content": "func (m *ETCMapping) IsActive() bool {",
              "type": "code",
              "context": "in function: (m"
            },
            {
              "number": 205,
              "content": "return m.Status == string(MappingStatusActive)",
              "type": "code",
              "context": "in function: (m"
            },
            {
              "number": 206,
              "content": "}",
              "type": "code",
              "context": "in function: (m"
            },
            {
              "number": 209,
              "content": "func (m *ETCMapping) IsPending() bool {",
              "type": "code",
              "context": "in function: (m"
            },
            {
              "number": 210,
              "content": "return m.Status == string(MappingStatusPending)",
              "type": "code",
              "context": "in function: (m"
            },
            {
              "number": 211,
              "content": "}",
              "type": "code",
              "context": "in function: (m"
            },
            {
              "number": 214,
              "content": "func (m *ETCMapping) CanTransitionTo(newStatus string) bool {",
              "type": "code",
              "context": "in function: (m"
            },
            {
              "number": 215,
              "content": "currentStatus := MappingStatus(m.Status)",
              "type": "code",
              "context": "in function: (m"
            },
            {
              "number": 216,
              "content": "targetStatus := MappingStatus(newStatus)",
              "type": "code",
              "context": "in function: (m"
            },
            {
              "number": 218,
              "content": "switch currentStatus {",
              "type": "branch",
              "context": "in function: (m"
            },
            {
              "number": 219,
              "content": "case MappingStatusPending:",
              "type": "branch",
              "context": "in function: (m"
            },
            {
              "number": 220,
              "content": "return targetStatus == MappingStatusActive || targetStatus == MappingStatusRejected",
              "type": "code",
              "context": "in function: (m"
            },
            {
              "number": 221,
              "content": "case MappingStatusActive:",
              "type": "branch",
              "context": "in function: (m"
            },
            {
              "number": 222,
              "content": "return targetStatus == MappingStatusInactive",
              "type": "code",
              "context": "in function: (m"
            },
            {
              "number": 223,
              "content": "case MappingStatusInactive:",
              "type": "branch",
              "context": "in function: (m"
            },
            {
              "number": 224,
              "content": "return targetStatus == MappingStatusActive",
              "type": "code",
              "context": "in function: (m"
            },
            {
              "number": 225,
              "content": "case MappingStatusRejected:",
              "type": "branch",
              "context": "in function: (m"
            },
            {
              "number": 226,
              "content": "return targetStatus == MappingStatusPending",
              "type": "code",
              "context": "in function: (m"
            },
            {
              "number": 227,
              "content": "default:",
              "type": "code",
              "context": "in function: (m"
            },
            {
              "number": 228,
              "content": "return false",
              "type": "code",
              "context": "in function: (m"
            },
            {
              "number": 229,
              "content": "}",
              "type": "code",
              "context": "in function: (m"
            },
            {
              "number": 230,
              "content": "}",
              "type": "code",
              "context": "in function: (m"
            },
            {
              "number": 233,
              "content": "func (m *ETCMapping) Activate() error {",
              "type": "code",
              "context": "in function: (m"
            },
            {
              "number": 234,
              "content": "if !m.CanTransitionTo(string(MappingStatusActive)) {",
              "type": "branch",
              "context": "in function: (m"
            },
            {
              "number": 235,
              "content": "return fmt.Errorf(\"cannot activate mapping from status: %s\", m.Status)",
              "type": "code",
              "context": "in function: (m"
            },
            {
              "number": 236,
              "content": "}",
              "type": "code",
              "context": "in function: (m"
            },
            {
              "number": 237,
              "content": "m.Status = string(MappingStatusActive)",
              "type": "code",
              "context": "in function: (m"
            },
            {
              "number": 238,
              "content": "return nil",
              "type": "code",
              "context": "in function: (m"
            },
            {
              "number": 239,
              "content": "}",
              "type": "code",
              "context": "in function: (m"
            },
            {
              "number": 242,
              "content": "func (m *ETCMapping) Deactivate() error {",
              "type": "code",
              "context": "in function: (m"
            },
            {
              "number": 243,
              "content": "if !m.CanTransitionTo(string(MappingStatusInactive)) {",
              "type": "branch",
              "context": "in function: (m"
            },
            {
              "number": 244,
              "content": "return fmt.Errorf(\"cannot deactivate mapping from status: %s\", m.Status)",
              "type": "code",
              "context": "in function: (m"
            },
            {
              "number": 245,
              "content": "}",
              "type": "code",
              "context": "in function: (m"
            },
            {
              "number": 246,
              "content": "m.Status = string(MappingStatusInactive)",
              "type": "code",
              "context": "in function: (m"
            },
            {
              "number": 247,
              "content": "return nil",
              "type": "code",
              "context": "in function: (m"
            },
            {
              "number": 248,
              "content": "}",
              "type": "code",
              "context": "in function: (m"
            },
            {
              "number": 251,
              "content": "func (m *ETCMapping) Approve() error {",
              "type": "code",
              "context": "in function: (m"
            },
            {
              "number": 252,
              "content": "if m.Status != string(MappingStatusPending) {",
              "type": "branch",
              "context": "in function: (m"
            },
            {
              "number": 253,
              "content": "return fmt.Errorf(\"can only approve pending mappings, current status: %s\", m.Status)",
              "type": "code",
              "context": "in function: (m"
            },
            {
              "number": 254,
              "content": "}",
              "type": "code",
              "context": "in function: (m"
            },
            {
              "number": 255,
              "content": "m.Status = string(MappingStatusActive)",
              "type": "code",
              "context": "in function: (m"
            },
            {
              "number": 256,
              "content": "return nil",
              "type": "code",
              "context": "in function: (m"
            },
            {
              "number": 257,
              "content": "}",
              "type": "code",
              "context": "in function: (m"
            },
            {
              "number": 260,
              "content": "func (m *ETCMapping) Reject() error {",
              "type": "code",
              "context": "in function: (m"
            },
            {
              "number": 261,
              "content": "if m.Status != string(MappingStatusPending) {",
              "type": "branch",
              "context": "in function: (m"
            },
            {
              "number": 262,
              "content": "return fmt.Errorf(\"can only reject pending mappings, current status: %s\", m.Status)",
              "type": "code",
              "context": "in function: (m"
            },
            {
              "number": 263,
              "content": "}",
              "type": "code",
              "context": "in function: (m"
            },
            {
              "number": 264,
              "content": "m.Status = string(MappingStatusRejected)",
              "type": "code",
              "context": "in function: (m"
            },
            {
              "number": 265,
              "content": "return nil",
              "type": "code",
              "context": "in function: (m"
            },
            {
              "number": 266,
              "content": "}",
              "type": "code",
              "context": "in function: (m"
            },
            {
              "number": 269,
              "content": "func (m *ETCMapping) SetMetadata(metadata map[string]interface{}) error {",
              "type": "code",
              "context": "in function: (m"
            },
            {
              "number": 270,
              "content": "if metadata == nil {",
              "type": "branch",
              "context": "in function: (m"
            },
            {
              "number": 271,
              "content": "m.Metadata = nil",
              "type": "code",
              "context": "in function: (m"
            },
            {
              "number": 272,
              "content": "return nil",
              "type": "code",
              "context": "in function: (m"
            },
            {
              "number": 273,
              "content": "}",
              "type": "code",
              "context": "in function: (m"
            },
            {
              "number": 276,
              "content": "jsonData, err := json.Marshal(metadata)",
              "type": "code",
              "context": "in function: (m"
            },
            {
              "number": 277,
              "content": "if err != nil {",
              "type": "error-handling",
              "context": "in function: (m"
            },
            {
              "number": 278,
              "content": "return fmt.Errorf(\"failed to marshal metadata: %w\", err)",
              "type": "code",
              "context": "in function: (m"
            },
            {
              "number": 279,
              "content": "}",
              "type": "code",
              "context": "in function: (m"
            },
            {
              "number": 282,
              "content": "if len(jsonData) \u003e 65535 { // 64KB limit",
              "type": "branch",
              "context": "in function: (m"
            },
            {
              "number": 283,
              "content": "return fmt.Errorf(\"metadata too large (max 64KB)\")",
              "type": "code",
              "context": "in function: (m"
            },
            {
              "number": 284,
              "content": "}",
              "type": "code",
              "context": "in function: (m"
            },
            {
              "number": 286,
              "content": "m.Metadata = datatypes.JSON(jsonData)",
              "type": "code",
              "context": "in function: (m"
            },
            {
              "number": 287,
              "content": "return nil",
              "type": "code",
              "context": "in function: (m"
            },
            {
              "number": 288,
              "content": "}",
              "type": "code",
              "context": "in function: (m"
            },
            {
              "number": 291,
              "content": "func (m *ETCMapping) GetMetadata() (map[string]interface{}, error) {",
              "type": "code",
              "context": "in function: (m"
            },
            {
              "number": 292,
              "content": "if m.Metadata == nil {",
              "type": "branch",
              "context": "in function: (m"
            },
            {
              "number": 293,
              "content": "return nil, nil",
              "type": "code",
              "context": "in function: (m"
            },
            {
              "number": 294,
              "content": "}",
              "type": "code",
              "context": "in function: (m"
            },
            {
              "number": 296,
              "content": "var metadata map[string]interface{}",
              "type": "code",
              "context": "in function: (m"
            },
            {
              "number": 297,
              "content": "if err := json.Unmarshal([]byte(m.Metadata), \u0026metadata); err != nil {",
              "type": "error-handling",
              "context": "in function: (m"
            },
            {
              "number": 298,
              "content": "return nil, fmt.Errorf(\"failed to unmarshal metadata: %w\", err)",
              "type": "code",
              "context": "in function: (m"
            },
            {
              "number": 299,
              "content": "}",
              "type": "code",
              "context": "in function: (m"
            },
            {
              "number": 301,
              "content": "return metadata, nil",
              "type": "code",
              "context": "in function: (m"
            },
            {
              "number": 302,
              "content": "}",
              "type": "code",
              "context": "in function: (m"
            },
            {
              "number": 305,
              "content": "func (m *ETCMapping) GetConfidencePercentage() float64 {",
              "type": "code",
              "context": "in function: (m"
            },
            {
              "number": 306,
              "content": "return float64(m.Confidence * 100)",
              "type": "code",
              "context": "in function: (m"
            },
            {
              "number": 307,
              "content": "}",
              "type": "code",
              "context": "in function: (m"
            },
            {
              "number": 310,
              "content": "func (m *ETCMapping) IsHighConfidence() bool {",
              "type": "code",
              "context": "in function: (m"
            },
            {
              "number": 311,
              "content": "return m.Confidence \u003e= 0.8",
              "type": "code",
              "context": "in function: (m"
            },
            {
              "number": 312,
              "content": "}",
              "type": "code",
              "context": "in function: (m"
            },
            {
              "number": 315,
              "content": "func (m *ETCMapping) IsLowConfidence() bool {",
              "type": "code",
              "context": "in function: (m"
            },
            {
              "number": 316,
              "content": "return m.Confidence \u003c 0.5",
              "type": "code",
              "context": "in function: (m"
            },
            {
              "number": 317,
              "content": "}",
              "type": "code",
              "context": "in function: (m"
            },
            {
              "number": 322,
              "content": "func (m *ETCMapping) Validate() error {",
              "type": "code",
              "context": "in function: (m"
            },
            {
              "number": 323,
              "content": "return m.validate()",
              "type": "code",
              "context": "in function: (m"
            },
            {
              "number": 324,
              "content": "}",
              "type": "code",
              "context": "in function: (m"
            },
            {
              "number": 327,
              "content": "func (m *ETCMapping) BeforeUpdate() error {",
              "type": "code",
              "context": "in function: (m"
            },
            {
              "number": 328,
              "content": "m.UpdatedAt = time.Now()",
              "type": "code",
              "context": "in function: (m"
            },
            {
              "number": 329,
              "content": "return nil",
              "type": "code",
              "context": "in function: (m"
            },
            {
              "number": 330,
              "content": "}",
              "type": "code",
              "context": "in function: (m"
            },
            {
              "number": 333,
              "content": "func (m *ETCMapping) GetTableName() string {",
              "type": "code",
              "context": "in function: (m"
            },
            {
              "number": 334,
              "content": "return m.TableName()",
              "type": "code",
              "context": "in function: (m"
            },
            {
              "number": 335,
              "content": "}",
              "type": "code",
              "context": "in function: (m"
            },
            {
              "number": 338,
              "content": "func (m *ETCMapping) String() string {",
              "type": "code",
              "context": "in function: (m"
            },
            {
              "number": 339,
              "content": "return fmt.Sprintf(\"ETCMapping{ID:%d, ETCRecordID:%d, Type:%s, EntityID:%d, Confidence:%.2f, Status:%s}\",",
              "type": "code",
              "context": "in function: (m"
            },
            {
              "number": 340,
              "content": "m.ID, m.ETCRecordID, m.MappingType, m.MappedEntityID, m.Confidence, m.Status)",
              "type": "code",
              "context": "in function: (m"
            },
            {
              "number": 341,
              "content": "}",
              "type": "code",
              "context": "in function: (m"
            },
            {
              "number": 346,
              "content": "func IsValidMappingType(mappingType string) bool {",
              "type": "code",
              "context": "in function: IsValidMappingType(mappingType"
            },
            {
              "number": 347,
              "content": "validTypes := []string{",
              "type": "code",
              "context": "in function: IsValidMappingType(mappingType"
            },
            {
              "number": 348,
              "content": "string(MappingTypeDtako),",
              "type": "code",
              "context": "in function: IsValidMappingType(mappingType"
            },
            {
              "number": 349,
              "content": "string(MappingTypeExpense),",
              "type": "code",
              "context": "in function: IsValidMappingType(mappingType"
            },
            {
              "number": 350,
              "content": "string(MappingTypeInvoice),",
              "type": "code",
              "context": "in function: IsValidMappingType(mappingType"
            },
            {
              "number": 351,
              "content": "}",
              "type": "code",
              "context": "in function: IsValidMappingType(mappingType"
            },
            {
              "number": 353,
              "content": "for _, validType := range validTypes {",
              "type": "branch",
              "context": "in function: IsValidMappingType(mappingType"
            },
            {
              "number": 354,
              "content": "if strings.ToLower(strings.TrimSpace(mappingType)) == validType {",
              "type": "branch",
              "context": "in function: IsValidMappingType(mappingType"
            },
            {
              "number": 355,
              "content": "return true",
              "type": "code",
              "context": "in function: IsValidMappingType(mappingType"
            },
            {
              "number": 356,
              "content": "}",
              "type": "code",
              "context": "in function: IsValidMappingType(mappingType"
            },
            {
              "number": 357,
              "content": "}",
              "type": "code",
              "context": "in function: IsValidMappingType(mappingType"
            },
            {
              "number": 358,
              "content": "return false",
              "type": "code",
              "context": "in function: IsValidMappingType(mappingType"
            },
            {
              "number": 359,
              "content": "}",
              "type": "code",
              "context": "in function: IsValidMappingType(mappingType"
            },
            {
              "number": 362,
              "content": "func IsValidEntityType(entityType string) bool {",
              "type": "code",
              "context": "in function: IsValidEntityType(entityType"
            },
            {
              "number": 363,
              "content": "validTypes := []string{",
              "type": "code",
              "context": "in function: IsValidEntityType(entityType"
            },
            {
              "number": 364,
              "content": "string(EntityTypeDtakoRecord),",
              "type": "code",
              "context": "in function: IsValidEntityType(entityType"
            },
            {
              "number": 365,
              "content": "string(EntityTypeExpenseRecord),",
              "type": "code",
              "context": "in function: IsValidEntityType(entityType"
            },
            {
              "number": 366,
              "content": "string(EntityTypeInvoiceRecord),",
              "type": "code",
              "context": "in function: IsValidEntityType(entityType"
            },
            {
              "number": 367,
              "content": "}",
              "type": "code",
              "context": "in function: IsValidEntityType(entityType"
            },
            {
              "number": 369,
              "content": "for _, validType := range validTypes {",
              "type": "branch",
              "context": "in function: IsValidEntityType(entityType"
            },
            {
              "number": 370,
              "content": "if strings.ToLower(strings.TrimSpace(entityType)) == validType {",
              "type": "branch",
              "context": "in function: IsValidEntityType(entityType"
            },
            {
              "number": 371,
              "content": "return true",
              "type": "code",
              "context": "in function: IsValidEntityType(entityType"
            },
            {
              "number": 372,
              "content": "}",
              "type": "code",
              "context": "in function: IsValidEntityType(entityType"
            },
            {
              "number": 373,
              "content": "}",
              "type": "code",
              "context": "in function: IsValidEntityType(entityType"
            },
            {
              "number": 374,
              "content": "return false",
              "type": "code",
              "context": "in function: IsValidEntityType(entityType"
            },
            {
              "number": 375,
              "content": "}",
              "type": "code",
              "context": "in function: IsValidEntityType(entityType"
            },
            {
              "number": 378,
              "content": "func IsValidStatus(status string) bool {",
              "type": "code",
              "context": "in function: IsValidStatus(status"
            },
            {
              "number": 379,
              "content": "validStatuses := []string{",
              "type": "code",
              "context": "in function: IsValidStatus(status"
            },
            {
              "number": 380,
              "content": "string(MappingStatusActive),",
              "type": "code",
              "context": "in function: IsValidStatus(status"
            },
            {
              "number": 381,
              "content": "string(MappingStatusInactive),",
              "type": "code",
              "context": "in function: IsValidStatus(status"
            },
            {
              "number": 382,
              "content": "string(MappingStatusPending),",
              "type": "code",
              "context": "in function: IsValidStatus(status"
            },
            {
              "number": 383,
              "content": "string(MappingStatusRejected),",
              "type": "code",
              "context": "in function: IsValidStatus(status"
            },
            {
              "number": 384,
              "content": "}",
              "type": "code",
              "context": "in function: IsValidStatus(status"
            },
            {
              "number": 386,
              "content": "for _, validStatus := range validStatuses {",
              "type": "branch",
              "context": "in function: IsValidStatus(status"
            },
            {
              "number": 387,
              "content": "if strings.ToLower(strings.TrimSpace(status)) == validStatus {",
              "type": "branch",
              "context": "in function: IsValidStatus(status"
            },
            {
              "number": 388,
              "content": "return true",
              "type": "code",
              "context": "in function: IsValidStatus(status"
            },
            {
              "number": 389,
              "content": "}",
              "type": "code",
              "context": "in function: IsValidStatus(status"
            },
            {
              "number": 390,
              "content": "}",
              "type": "code",
              "context": "in function: IsValidStatus(status"
            },
            {
              "number": 391,
              "content": "return false",
              "type": "code",
              "context": "in function: IsValidStatus(status"
            },
            {
              "number": 392,
              "content": "}",
              "type": "code",
              "context": "in function: IsValidStatus(status"
            }
          ],
          "functions": [
            {
              "name": "TableName",
              "start_line": 58,
              "end_line": 60,
              "coverage": 0,
              "uncovered_lines": [
                58,
                59,
                60
              ]
            },
            {
              "name": "BeforeCreate",
              "start_line": 63,
              "end_line": 79,
              "coverage": 0,
              "uncovered_lines": [
                63,
                65,
                66,
                67,
                68,
                69,
                70,
                71,
                74,
                75,
                76,
                78,
                79
              ]
            },
            {
              "name": "BeforeSave",
              "start_line": 82,
              "end_line": 87,
              "coverage": 0,
              "uncovered_lines": [
                82,
                84,
                86,
                87
              ]
            },
            {
              "name": "validate",
              "start_line": 90,
              "end_line": 127,
              "coverage": 0,
              "uncovered_lines": [
                90,
                92,
                93,
                94,
                97,
                98,
                99,
                102,
                103,
                104,
                107,
                108,
                109,
                112,
                113,
                114,
                117,
                118,
                119,
                122,
                123,
                124,
                126,
                127
              ]
            },
            {
              "name": "validateMappingType",
              "start_line": 130,
              "end_line": 151,
              "coverage": 0,
              "uncovered_lines": [
                130,
                131,
                132,
                133,
                134,
                135,
                137,
                138,
                139,
                140,
                142,
                143,
                144,
                145,
                146,
                147,
                149,
                150,
                151
              ]
            },
            {
              "name": "validateMappedEntityType",
              "start_line": 154,
              "end_line": 175,
              "coverage": 0,
              "uncovered_lines": [
                154,
                155,
                156,
                157,
                158,
                159,
                161,
                162,
                163,
                164,
                166,
                167,
                168,
                169,
                170,
                171,
                173,
                174,
                175
              ]
            },
            {
              "name": "validateStatus",
              "start_line": 178,
              "end_line": 201,
              "coverage": 0,
              "uncovered_lines": [
                178,
                179,
                180,
                181,
                182,
                183,
                184,
                186,
                187,
                188,
                189,
                190,
                192,
                193,
                194,
                195,
                196,
                197,
                199,
                200,
                201
              ]
            },
            {
              "name": "IsActive",
              "start_line": 204,
              "end_line": 206,
              "coverage": 0,
              "uncovered_lines": [
                204,
                205,
                206
              ]
            },
            {
              "name": "IsPending",
              "start_line": 209,
              "end_line": 211,
              "coverage": 0,
              "uncovered_lines": [
                209,
                210,
                211
              ]
            },
            {
              "name": "CanTransitionTo",
              "start_line": 214,
              "end_line": 230,
              "coverage": 0,
              "uncovered_lines": [
                214,
                215,
                216,
                218,
                219,
                220,
                221,
                222,
                223,
                224,
                225,
                226,
                227,
                228,
                229,
                230
              ]
            },
            {
              "name": "Activate",
              "start_line": 233,
              "end_line": 239,
              "coverage": 0,
              "uncovered_lines": [
                233,
                234,
                235,
                236,
                237,
                238,
                239
              ]
            },
            {
              "name": "Deactivate",
              "start_line": 242,
              "end_line": 248,
              "coverage": 0,
              "uncovered_lines": [
                242,
                243,
                244,
                245,
                246,
                247,
                248
              ]
            },
            {
              "name": "Approve",
              "start_line": 251,
              "end_line": 257,
              "coverage": 0,
              "uncovered_lines": [
                251,
                252,
                253,
                254,
                255,
                256,
                257
              ]
            },
            {
              "name": "Reject",
              "start_line": 260,
              "end_line": 266,
              "coverage": 0,
              "uncovered_lines": [
                260,
                261,
                262,
                263,
                264,
                265,
                266
              ]
            },
            {
              "name": "SetMetadata",
              "start_line": 269,
              "end_line": 269,
              "coverage": 0,
              "uncovered_lines": [
                269
              ]
            },
            {
              "name": "GetMetadata",
              "start_line": 291,
              "end_line": 291,
              "coverage": 0,
              "uncovered_lines": [
                291
              ]
            },
            {
              "name": "GetConfidencePercentage",
              "start_line": 305,
              "end_line": 307,
              "coverage": 0,
              "uncovered_lines": [
                305,
                306,
                307
              ]
            },
            {
              "name": "IsHighConfidence",
              "start_line": 310,
              "end_line": 312,
              "coverage": 0,
              "uncovered_lines": [
                310,
                311,
                312
              ]
            },
            {
              "name": "IsLowConfidence",
              "start_line": 315,
              "end_line": 317,
              "coverage": 0,
              "uncovered_lines": [
                315,
                316,
                317
              ]
            },
            {
              "name": "Validate",
              "start_line": 322,
              "end_line": 324,
              "coverage": 0,
              "uncovered_lines": [
                322,
                323,
                324
              ]
            },
            {
              "name": "BeforeUpdate",
              "start_line": 327,
              "end_line": 330,
              "coverage": 0,
              "uncovered_lines": [
                327,
                328,
                329,
                330
              ]
            },
            {
              "name": "GetTableName",
              "start_line": 333,
              "end_line": 335,
              "coverage": 0,
              "uncovered_lines": [
                333,
                334,
                335
              ]
            },
            {
              "name": "String",
              "start_line": 338,
              "end_line": 341,
              "coverage": 0,
              "uncovered_lines": [
                338,
                339,
                340,
                341
              ]
            },
            {
              "name": "IsValidMappingType",
              "start_line": 346,
              "end_line": 359,
              "coverage": 0,
              "uncovered_lines": [
                346,
                347,
                348,
                349,
                350,
                351,
                353,
                354,
                355,
                356,
                357,
                358,
                359
              ]
            },
            {
              "name": "IsValidEntityType",
              "start_line": 362,
              "end_line": 375,
              "coverage": 0,
              "uncovered_lines": [
                362,
                363,
                364,
                365,
                366,
                367,
                369,
                370,
                371,
                372,
                373,
                374,
                375
              ]
            },
            {
              "name": "IsValidStatus",
              "start_line": 378,
              "end_line": 392,
              "coverage": 0,
              "uncovered_lines": [
                378,
                379,
                380,
                381,
                382,
                383,
                384,
                386,
                387,
                388,
                389,
                390,
                391,
                392
              ]
            }
          ]
        },
        "github.com/yhonda-ohishi/etc_meisai/src/models/etc_meisai.go": {
          "name": "github.com/yhonda-ohishi/etc_meisai/src/models/etc_meisai.go",
          "coverage": 0,
          "total_lines": 216,
          "covered_lines": 0,
          "uncovered_lines": [
            {
              "number": 4,
              "content": "\"crypto/sha256\"",
              "type": "code"
            },
            {
              "number": 5,
              "content": "\"fmt\"",
              "type": "code"
            },
            {
              "number": 6,
              "content": "\"time\"",
              "type": "code"
            },
            {
              "number": 7,
              "content": ")",
              "type": "code"
            },
            {
              "number": 10,
              "content": "type ETCMeisai struct {",
              "type": "code"
            },
            {
              "number": 12,
              "content": "ID int64 `json:\"id\"`",
              "type": "code"
            },
            {
              "number": 15,
              "content": "UseDate time.Time `json:\"use_date\"`",
              "type": "code"
            },
            {
              "number": 16,
              "content": "UseTime string    `json:\"use_time\"`",
              "type": "code"
            },
            {
              "number": 19,
              "content": "EntryIC string `json:\"entry_ic\"`",
              "type": "code"
            },
            {
              "number": 20,
              "content": "ExitIC  string `json:\"exit_ic\"`",
              "type": "code"
            },
            {
              "number": 23,
              "content": "Amount int32 `json:\"amount\"`",
              "type": "code"
            },
            {
              "number": 26,
              "content": "CarNumber string `json:\"car_number\"`",
              "type": "code"
            },
            {
              "number": 29,
              "content": "ETCNumber string `json:\"etc_number\"`",
              "type": "code"
            },
            {
              "number": 32,
              "content": "Hash string `json:\"hash\"`",
              "type": "code"
            },
            {
              "number": 35,
              "content": "CreatedAt time.Time `json:\"created_at\"`",
              "type": "code"
            },
            {
              "number": 36,
              "content": "UpdatedAt time.Time `json:\"updated_at\"`",
              "type": "code"
            },
            {
              "number": 39,
              "content": "Mappings []ETCMeisaiMapping `json:\"mappings,omitempty\"`",
              "type": "code"
            },
            {
              "number": 40,
              "content": "}",
              "type": "code"
            },
            {
              "number": 43,
              "content": "func (e *ETCMeisai) BeforeCreate() error {",
              "type": "code",
              "context": "in function: (e"
            },
            {
              "number": 45,
              "content": "now := time.Now()",
              "type": "code",
              "context": "in function: (e"
            },
            {
              "number": 46,
              "content": "if e.CreatedAt.IsZero() {",
              "type": "branch",
              "context": "in function: (e"
            },
            {
              "number": 47,
              "content": "e.CreatedAt = now",
              "type": "code",
              "context": "in function: (e"
            },
            {
              "number": 48,
              "content": "}",
              "type": "code",
              "context": "in function: (e"
            },
            {
              "number": 49,
              "content": "if e.UpdatedAt.IsZero() {",
              "type": "branch",
              "context": "in function: (e"
            },
            {
              "number": 50,
              "content": "e.UpdatedAt = now",
              "type": "code",
              "context": "in function: (e"
            },
            {
              "number": 51,
              "content": "}",
              "type": "code",
              "context": "in function: (e"
            },
            {
              "number": 54,
              "content": "if e.Hash == \"\" {",
              "type": "branch",
              "context": "in function: (e"
            },
            {
              "number": 55,
              "content": "e.Hash = e.GenerateHash()",
              "type": "code",
              "context": "in function: (e"
            },
            {
              "number": 56,
              "content": "}",
              "type": "code",
              "context": "in function: (e"
            },
            {
              "number": 58,
              "content": "return nil",
              "type": "code",
              "context": "in function: (e"
            },
            {
              "number": 59,
              "content": "}",
              "type": "code",
              "context": "in function: (e"
            },
            {
              "number": 62,
              "content": "func (e *ETCMeisai) BeforeUpdate() error {",
              "type": "code",
              "context": "in function: (e"
            },
            {
              "number": 64,
              "content": "e.UpdatedAt = time.Now()",
              "type": "code",
              "context": "in function: (e"
            },
            {
              "number": 67,
              "content": "e.Hash = e.GenerateHash()",
              "type": "code",
              "context": "in function: (e"
            },
            {
              "number": 69,
              "content": "return nil",
              "type": "code",
              "context": "in function: (e"
            },
            {
              "number": 70,
              "content": "}",
              "type": "code",
              "context": "in function: (e"
            },
            {
              "number": 73,
              "content": "func (e *ETCMeisai) GenerateHash() string {",
              "type": "code",
              "context": "in function: (e"
            },
            {
              "number": 74,
              "content": "data := fmt.Sprintf(\"%s|%s|%s|%s|%d|%s|%s\",",
              "type": "code",
              "context": "in function: (e"
            },
            {
              "number": 75,
              "content": "e.UseDate.Format(\"2006-01-02\"),",
              "type": "code",
              "context": "in function: (e"
            },
            {
              "number": 76,
              "content": "e.UseTime,",
              "type": "code",
              "context": "in function: (e"
            },
            {
              "number": 77,
              "content": "e.EntryIC,",
              "type": "code",
              "context": "in function: (e"
            },
            {
              "number": 78,
              "content": "e.ExitIC,",
              "type": "code",
              "context": "in function: (e"
            },
            {
              "number": 79,
              "content": "e.Amount,",
              "type": "code",
              "context": "in function: (e"
            },
            {
              "number": 80,
              "content": "e.CarNumber,",
              "type": "code",
              "context": "in function: (e"
            },
            {
              "number": 81,
              "content": "e.ETCNumber,",
              "type": "code",
              "context": "in function: (e"
            },
            {
              "number": 82,
              "content": ")",
              "type": "code",
              "context": "in function: (e"
            },
            {
              "number": 84,
              "content": "hash := sha256.Sum256([]byte(data))",
              "type": "code",
              "context": "in function: (e"
            },
            {
              "number": 85,
              "content": "return fmt.Sprintf(\"%x\", hash)",
              "type": "code",
              "context": "in function: (e"
            },
            {
              "number": 86,
              "content": "}",
              "type": "code",
              "context": "in function: (e"
            },
            {
              "number": 89,
              "content": "func (e *ETCMeisai) Validate() error {",
              "type": "code",
              "context": "in function: (e"
            },
            {
              "number": 90,
              "content": "if e.UseDate.IsZero() {",
              "type": "branch",
              "context": "in function: (e"
            },
            {
              "number": 91,
              "content": "return fmt.Errorf(\"UseDate is required\")",
              "type": "code",
              "context": "in function: (e"
            },
            {
              "number": 92,
              "content": "}",
              "type": "code",
              "context": "in function: (e"
            },
            {
              "number": 94,
              "content": "if e.UseTime == \"\" {",
              "type": "branch",
              "context": "in function: (e"
            },
            {
              "number": 95,
              "content": "return fmt.Errorf(\"UseTime is required\")",
              "type": "code",
              "context": "in function: (e"
            },
            {
              "number": 96,
              "content": "}",
              "type": "code",
              "context": "in function: (e"
            },
            {
              "number": 98,
              "content": "if e.EntryIC == \"\" {",
              "type": "branch",
              "context": "in function: (e"
            },
            {
              "number": 99,
              "content": "return fmt.Errorf(\"EntryIC is required\")",
              "type": "code",
              "context": "in function: (e"
            },
            {
              "number": 100,
              "content": "}",
              "type": "code",
              "context": "in function: (e"
            },
            {
              "number": 102,
              "content": "if e.ExitIC == \"\" {",
              "type": "branch",
              "context": "in function: (e"
            },
            {
              "number": 103,
              "content": "return fmt.Errorf(\"ExitIC is required\")",
              "type": "code",
              "context": "in function: (e"
            },
            {
              "number": 104,
              "content": "}",
              "type": "code",
              "context": "in function: (e"
            },
            {
              "number": 106,
              "content": "if e.Amount \u003c= 0 {",
              "type": "branch",
              "context": "in function: (e"
            },
            {
              "number": 107,
              "content": "return fmt.Errorf(\"Amount must be positive\")",
              "type": "code",
              "context": "in function: (e"
            },
            {
              "number": 108,
              "content": "}",
              "type": "code",
              "context": "in function: (e"
            },
            {
              "number": 110,
              "content": "if e.CarNumber == \"\" {",
              "type": "branch",
              "context": "in function: (e"
            },
            {
              "number": 111,
              "content": "return fmt.Errorf(\"CarNumber is required\")",
              "type": "code",
              "context": "in function: (e"
            },
            {
              "number": 112,
              "content": "}",
              "type": "code",
              "context": "in function: (e"
            },
            {
              "number": 114,
              "content": "if e.ETCNumber == \"\" {",
              "type": "branch",
              "context": "in function: (e"
            },
            {
              "number": 115,
              "content": "return fmt.Errorf(\"ETCNumber is required\")",
              "type": "code",
              "context": "in function: (e"
            },
            {
              "number": 116,
              "content": "}",
              "type": "code",
              "context": "in function: (e"
            },
            {
              "number": 118,
              "content": "if len(e.ETCNumber) \u003e 20 {",
              "type": "branch",
              "context": "in function: (e"
            },
            {
              "number": 119,
              "content": "return fmt.Errorf(\"ETCNumber too long\")",
              "type": "code",
              "context": "in function: (e"
            },
            {
              "number": 120,
              "content": "}",
              "type": "code",
              "context": "in function: (e"
            },
            {
              "number": 122,
              "content": "return nil",
              "type": "code",
              "context": "in function: (e"
            },
            {
              "number": 123,
              "content": "}",
              "type": "code",
              "context": "in function: (e"
            },
            {
              "number": 126,
              "content": "type ETCListParams struct {",
              "type": "code",
              "context": "in function: (e"
            },
            {
              "number": 127,
              "content": "Limit     int        `json:\"limit\"`",
              "type": "code",
              "context": "in function: (e"
            },
            {
              "number": 128,
              "content": "Offset    int        `json:\"offset\"`",
              "type": "code",
              "context": "in function: (e"
            },
            {
              "number": 129,
              "content": "StartDate *time.Time `json:\"start_date,omitempty\"`",
              "type": "code",
              "context": "in function: (e"
            },
            {
              "number": 130,
              "content": "EndDate   *time.Time `json:\"end_date,omitempty\"`",
              "type": "code",
              "context": "in function: (e"
            },
            {
              "number": 131,
              "content": "FromDate  *time.Time `json:\"from_date,omitempty\"` // Alias for StartDate",
              "type": "code",
              "context": "in function: (e"
            },
            {
              "number": 132,
              "content": "ToDate    *time.Time `json:\"to_date,omitempty\"`   // Alias for EndDate",
              "type": "code",
              "context": "in function: (e"
            },
            {
              "number": 133,
              "content": "ETCNumber string     `json:\"etc_number,omitempty\"`",
              "type": "code",
              "context": "in function: (e"
            },
            {
              "number": 134,
              "content": "CarNumber string     `json:\"car_number,omitempty\"`",
              "type": "code",
              "context": "in function: (e"
            },
            {
              "number": 135,
              "content": "EntryIC   string     `json:\"entry_ic,omitempty\"`",
              "type": "code",
              "context": "in function: (e"
            },
            {
              "number": 136,
              "content": "ExitIC    string     `json:\"exit_ic,omitempty\"`",
              "type": "code",
              "context": "in function: (e"
            },
            {
              "number": 137,
              "content": "SortBy    string     `json:\"sort_by,omitempty\"`",
              "type": "code",
              "context": "in function: (e"
            },
            {
              "number": 138,
              "content": "OrderBy   string     `json:\"order_by,omitempty\"`   // Alias for SortBy",
              "type": "code",
              "context": "in function: (e"
            },
            {
              "number": 139,
              "content": "SortOrder string     `json:\"sort_order,omitempty\"`",
              "type": "code",
              "context": "in function: (e"
            },
            {
              "number": 140,
              "content": "}",
              "type": "code",
              "context": "in function: (e"
            },
            {
              "number": 143,
              "content": "func (p *ETCListParams) SetDefaults() {",
              "type": "code",
              "context": "in function: (p"
            },
            {
              "number": 144,
              "content": "if p.Limit \u003c= 0 || p.Limit \u003e 1000 {",
              "type": "branch",
              "context": "in function: (p"
            },
            {
              "number": 145,
              "content": "if p.Limit \u003e 1000 {",
              "type": "branch",
              "context": "in function: (p"
            },
            {
              "number": 146,
              "content": "p.Limit = 1000",
              "type": "code",
              "context": "in function: (p"
            },
            {
              "number": 147,
              "content": "} else {",
              "type": "code",
              "context": "in function: (p"
            },
            {
              "number": 148,
              "content": "p.Limit = 100",
              "type": "code",
              "context": "in function: (p"
            },
            {
              "number": 149,
              "content": "}",
              "type": "code",
              "context": "in function: (p"
            },
            {
              "number": 150,
              "content": "}",
              "type": "code",
              "context": "in function: (p"
            },
            {
              "number": 151,
              "content": "if p.Offset \u003c 0 {",
              "type": "branch",
              "context": "in function: (p"
            },
            {
              "number": 152,
              "content": "p.Offset = 0",
              "type": "code",
              "context": "in function: (p"
            },
            {
              "number": 153,
              "content": "}",
              "type": "code",
              "context": "in function: (p"
            },
            {
              "number": 154,
              "content": "}",
              "type": "code",
              "context": "in function: (p"
            },
            {
              "number": 157,
              "content": "type ETCSummary struct {",
              "type": "code",
              "context": "in function: (p"
            },
            {
              "number": 158,
              "content": "TotalAmount int64     `json:\"total_amount\"`",
              "type": "code",
              "context": "in function: (p"
            },
            {
              "number": 159,
              "content": "TotalCount  int64     `json:\"total_count\"`",
              "type": "code",
              "context": "in function: (p"
            },
            {
              "number": 160,
              "content": "StartDate   time.Time `json:\"start_date\"`",
              "type": "code",
              "context": "in function: (p"
            },
            {
              "number": 161,
              "content": "EndDate     time.Time `json:\"end_date\"`",
              "type": "code",
              "context": "in function: (p"
            },
            {
              "number": 162,
              "content": "ByETCNumber map[string]*ETCNumberSummary  `json:\"by_etc_number\"`",
              "type": "code",
              "context": "in function: (p"
            },
            {
              "number": 163,
              "content": "ByMonth     map[string]*ETCMonthlySummary `json:\"by_month\"`",
              "type": "code",
              "context": "in function: (p"
            },
            {
              "number": 164,
              "content": "}",
              "type": "code",
              "context": "in function: (p"
            },
            {
              "number": 167,
              "content": "type ETCNumberSummary struct {",
              "type": "code",
              "context": "in function: (p"
            },
            {
              "number": 168,
              "content": "ETCNumber   string `json:\"etc_number\"`",
              "type": "code",
              "context": "in function: (p"
            },
            {
              "number": 169,
              "content": "TotalAmount int64  `json:\"total_amount\"`",
              "type": "code",
              "context": "in function: (p"
            },
            {
              "number": 170,
              "content": "TotalCount  int64  `json:\"total_count\"`",
              "type": "code",
              "context": "in function: (p"
            },
            {
              "number": 171,
              "content": "}",
              "type": "code",
              "context": "in function: (p"
            },
            {
              "number": 174,
              "content": "type ETCMonthlySummary struct {",
              "type": "code",
              "context": "in function: (p"
            },
            {
              "number": 175,
              "content": "Year        int   `json:\"year\"`",
              "type": "code",
              "context": "in function: (p"
            },
            {
              "number": 176,
              "content": "Month       int   `json:\"month\"`",
              "type": "code",
              "context": "in function: (p"
            },
            {
              "number": 177,
              "content": "TotalAmount int64 `json:\"total_amount\"`",
              "type": "code",
              "context": "in function: (p"
            },
            {
              "number": 178,
              "content": "TotalCount  int64 `json:\"total_count\"`",
              "type": "code",
              "context": "in function: (p"
            },
            {
              "number": 179,
              "content": "}",
              "type": "code",
              "context": "in function: (p"
            },
            {
              "number": 182,
              "content": "func (e *ETCMeisai) GetTableName() string {",
              "type": "code",
              "context": "in function: (e"
            },
            {
              "number": 183,
              "content": "return \"etc_meisai\"",
              "type": "code",
              "context": "in function: (e"
            },
            {
              "number": 184,
              "content": "}",
              "type": "code",
              "context": "in function: (e"
            },
            {
              "number": 187,
              "content": "func (e *ETCMeisai) String() string {",
              "type": "code",
              "context": "in function: (e"
            },
            {
              "number": 188,
              "content": "return fmt.Sprintf(\"ETCMeisai{ID:%d, Date:%s, ETCNumber:%s, EntryIC:%s, ExitIC:%s, Amount:%d}\",",
              "type": "code",
              "context": "in function: (e"
            },
            {
              "number": 189,
              "content": "e.ID, e.UseDate.Format(\"2006-01-02\"), e.ETCNumber, e.EntryIC, e.ExitIC, e.Amount)",
              "type": "code",
              "context": "in function: (e"
            },
            {
              "number": 190,
              "content": "}",
              "type": "code",
              "context": "in function: (e"
            },
            {
              "number": 193,
              "content": "type ETCMonthlyStats struct {",
              "type": "code",
              "context": "in function: (e"
            },
            {
              "number": 194,
              "content": "Year           int                          `json:\"year\"`",
              "type": "code",
              "context": "in function: (e"
            },
            {
              "number": 195,
              "content": "Month          int                          `json:\"month\"`",
              "type": "code",
              "context": "in function: (e"
            },
            {
              "number": 196,
              "content": "TotalAmount    int64                        `json:\"total_amount\"`",
              "type": "code",
              "context": "in function: (e"
            },
            {
              "number": 197,
              "content": "TotalCount     int64                        `json:\"total_count\"`",
              "type": "code",
              "context": "in function: (e"
            },
            {
              "number": 198,
              "content": "DailyBreakdown map[int]*ETCDailySummary     `json:\"daily_breakdown\"`",
              "type": "code",
              "context": "in function: (e"
            },
            {
              "number": 199,
              "content": "TopRoutes      []*ETCRouteSummary           `json:\"top_routes\"`",
              "type": "code",
              "context": "in function: (e"
            },
            {
              "number": 200,
              "content": "}",
              "type": "code",
              "context": "in function: (e"
            },
            {
              "number": 203,
              "content": "type ETCDailySummary struct {",
              "type": "code",
              "context": "in function: (e"
            },
            {
              "number": 204,
              "content": "Day    int   `json:\"day\"`",
              "type": "code",
              "context": "in function: (e"
            },
            {
              "number": 205,
              "content": "Amount int64 `json:\"amount\"`",
              "type": "code",
              "context": "in function: (e"
            },
            {
              "number": 206,
              "content": "Count  int64 `json:\"count\"`",
              "type": "code",
              "context": "in function: (e"
            },
            {
              "number": 207,
              "content": "}",
              "type": "code",
              "context": "in function: (e"
            },
            {
              "number": 210,
              "content": "type ETCRouteSummary struct {",
              "type": "code",
              "context": "in function: (e"
            },
            {
              "number": 211,
              "content": "EntryIC     string `json:\"entry_ic\"`",
              "type": "code",
              "context": "in function: (e"
            },
            {
              "number": 212,
              "content": "ExitIC      string `json:\"exit_ic\"`",
              "type": "code",
              "context": "in function: (e"
            },
            {
              "number": 213,
              "content": "Count       int64  `json:\"count\"`",
              "type": "code",
              "context": "in function: (e"
            },
            {
              "number": 214,
              "content": "TotalAmount int64  `json:\"total_amount\"`",
              "type": "code",
              "context": "in function: (e"
            },
            {
              "number": 215,
              "content": "AvgAmount   int64  `json:\"avg_amount\"`",
              "type": "code",
              "context": "in function: (e"
            },
            {
              "number": 216,
              "content": "}",
              "type": "code",
              "context": "in function: (e"
            }
          ],
          "functions": [
            {
              "name": "BeforeCreate",
              "start_line": 43,
              "end_line": 59,
              "coverage": 0,
              "uncovered_lines": [
                43,
                45,
                46,
                47,
                48,
                49,
                50,
                51,
                54,
                55,
                56,
                58,
                59
              ]
            },
            {
              "name": "BeforeUpdate",
              "start_line": 62,
              "end_line": 70,
              "coverage": 0,
              "uncovered_lines": [
                62,
                64,
                67,
                69,
                70
              ]
            },
            {
              "name": "GenerateHash",
              "start_line": 73,
              "end_line": 86,
              "coverage": 0,
              "uncovered_lines": [
                73,
                74,
                75,
                76,
                77,
                78,
                79,
                80,
                81,
                82,
                84,
                85,
                86
              ]
            },
            {
              "name": "Validate",
              "start_line": 89,
              "end_line": 123,
              "coverage": 0,
              "uncovered_lines": [
                89,
                90,
                91,
                92,
                94,
                95,
                96,
                98,
                99,
                100,
                102,
                103,
                104,
                106,
                107,
                108,
                110,
                111,
                112,
                114,
                115,
                116,
                118,
                119,
                120,
                122,
                123
              ]
            },
            {
              "name": "SetDefaults",
              "start_line": 143,
              "end_line": 154,
              "coverage": 0,
              "uncovered_lines": [
                143,
                144,
                145,
                146,
                147,
                148,
                149,
                150,
                151,
                152,
                153,
                154
              ]
            },
            {
              "name": "GetTableName",
              "start_line": 182,
              "end_line": 184,
              "coverage": 0,
              "uncovered_lines": [
                182,
                183,
                184
              ]
            },
            {
              "name": "String",
              "start_line": 187,
              "end_line": 190,
              "coverage": 0,
              "uncovered_lines": [
                187,
                188,
                189,
                190
              ]
            }
          ]
        },
        "github.com/yhonda-ohishi/etc_meisai/src/models/etc_meisai_mapping.go": {
          "name": "github.com/yhonda-ohishi/etc_meisai/src/models/etc_meisai_mapping.go",
          "coverage": 0,
          "total_lines": 102,
          "covered_lines": 0,
          "uncovered_lines": [
            {
              "number": 4,
              "content": "\"fmt\"",
              "type": "code"
            },
            {
              "number": 5,
              "content": "\"time\"",
              "type": "code"
            },
            {
              "number": 6,
              "content": ")",
              "type": "code"
            },
            {
              "number": 9,
              "content": "type ETCMeisaiMapping struct {",
              "type": "code"
            },
            {
              "number": 10,
              "content": "ID          int64     `json:\"id\"`",
              "type": "code"
            },
            {
              "number": 11,
              "content": "ETCMeisaiID int64     `json:\"etc_meisai_id\"`",
              "type": "code"
            },
            {
              "number": 12,
              "content": "DTakoRowID  string    `json:\"dtako_row_id\"`",
              "type": "code"
            },
            {
              "number": 13,
              "content": "MappingType string    `json:\"mapping_type\"` // auto, manual",
              "type": "code"
            },
            {
              "number": 14,
              "content": "Confidence  float32   `json:\"confidence\"`",
              "type": "code"
            },
            {
              "number": 15,
              "content": "Notes       string    `json:\"notes,omitempty\"`",
              "type": "code"
            },
            {
              "number": 16,
              "content": "CreatedAt   time.Time `json:\"created_at\"`",
              "type": "code"
            },
            {
              "number": 17,
              "content": "UpdatedAt   time.Time `json:\"updated_at\"`",
              "type": "code"
            },
            {
              "number": 18,
              "content": "CreatedBy   string    `json:\"created_by,omitempty\"`",
              "type": "code"
            },
            {
              "number": 21,
              "content": "ETCMeisai *ETCMeisai `json:\"etc_meisai,omitempty\"`",
              "type": "code"
            },
            {
              "number": 22,
              "content": "}",
              "type": "code"
            },
            {
              "number": 25,
              "content": "func (m *ETCMeisaiMapping) BeforeCreate() error {",
              "type": "code",
              "context": "in function: (m"
            },
            {
              "number": 26,
              "content": "if err := m.Validate(); err != nil {",
              "type": "error-handling",
              "context": "in function: (m"
            },
            {
              "number": 27,
              "content": "return err",
              "type": "error-handling",
              "context": "in function: (m"
            },
            {
              "number": 28,
              "content": "}",
              "type": "code",
              "context": "in function: (m"
            },
            {
              "number": 29,
              "content": "return nil",
              "type": "code",
              "context": "in function: (m"
            },
            {
              "number": 30,
              "content": "}",
              "type": "code",
              "context": "in function: (m"
            },
            {
              "number": 33,
              "content": "func (m *ETCMeisaiMapping) BeforeUpdate() error {",
              "type": "code",
              "context": "in function: (m"
            },
            {
              "number": 34,
              "content": "if err := m.Validate(); err != nil {",
              "type": "error-handling",
              "context": "in function: (m"
            },
            {
              "number": 35,
              "content": "return err",
              "type": "error-handling",
              "context": "in function: (m"
            },
            {
              "number": 36,
              "content": "}",
              "type": "code",
              "context": "in function: (m"
            },
            {
              "number": 37,
              "content": "return nil",
              "type": "code",
              "context": "in function: (m"
            },
            {
              "number": 38,
              "content": "}",
              "type": "code",
              "context": "in function: (m"
            },
            {
              "number": 41,
              "content": "func (m *ETCMeisaiMapping) Validate() error {",
              "type": "code",
              "context": "in function: (m"
            },
            {
              "number": 42,
              "content": "if m.ETCMeisaiID \u003c= 0 {",
              "type": "branch",
              "context": "in function: (m"
            },
            {
              "number": 43,
              "content": "return fmt.Errorf(\"ETCMeisaiID must be positive\")",
              "type": "code",
              "context": "in function: (m"
            },
            {
              "number": 44,
              "content": "}",
              "type": "code",
              "context": "in function: (m"
            },
            {
              "number": 46,
              "content": "if m.DTakoRowID == \"\" {",
              "type": "branch",
              "context": "in function: (m"
            },
            {
              "number": 47,
              "content": "return fmt.Errorf(\"DTakoRowID is required\")",
              "type": "code",
              "context": "in function: (m"
            },
            {
              "number": 48,
              "content": "}",
              "type": "code",
              "context": "in function: (m"
            },
            {
              "number": 50,
              "content": "if m.MappingType != \"auto\" \u0026\u0026 m.MappingType != \"manual\" {",
              "type": "branch",
              "context": "in function: (m"
            },
            {
              "number": 51,
              "content": "return fmt.Errorf(\"MappingType must be 'auto' or 'manual'\")",
              "type": "code",
              "context": "in function: (m"
            },
            {
              "number": 52,
              "content": "}",
              "type": "code",
              "context": "in function: (m"
            },
            {
              "number": 54,
              "content": "if m.Confidence \u003c 0 || m.Confidence \u003e 1 {",
              "type": "branch",
              "context": "in function: (m"
            },
            {
              "number": 55,
              "content": "return fmt.Errorf(\"Confidence must be between 0 and 1\")",
              "type": "code",
              "context": "in function: (m"
            },
            {
              "number": 56,
              "content": "}",
              "type": "code",
              "context": "in function: (m"
            },
            {
              "number": 58,
              "content": "return nil",
              "type": "code",
              "context": "in function: (m"
            },
            {
              "number": 59,
              "content": "}",
              "type": "code",
              "context": "in function: (m"
            },
            {
              "number": 62,
              "content": "func (m *ETCMeisaiMapping) IsHighConfidence() bool {",
              "type": "code",
              "context": "in function: (m"
            },
            {
              "number": 63,
              "content": "return m.Confidence \u003e= 0.8",
              "type": "code",
              "context": "in function: (m"
            },
            {
              "number": 64,
              "content": "}",
              "type": "code",
              "context": "in function: (m"
            },
            {
              "number": 67,
              "content": "type MappingListParams struct {",
              "type": "code",
              "context": "in function: (m"
            },
            {
              "number": 68,
              "content": "Limit         int      `json:\"limit\"`",
              "type": "code",
              "context": "in function: (m"
            },
            {
              "number": 69,
              "content": "Offset        int      `json:\"offset\"`",
              "type": "code",
              "context": "in function: (m"
            },
            {
              "number": 70,
              "content": "ETCMeisaiID   *int64   `json:\"etc_meisai_id,omitempty\"`",
              "type": "code",
              "context": "in function: (m"
            },
            {
              "number": 71,
              "content": "DTakoRowID    string   `json:\"dtako_row_id,omitempty\"`",
              "type": "code",
              "context": "in function: (m"
            },
            {
              "number": 72,
              "content": "MappingType   string   `json:\"mapping_type,omitempty\"`",
              "type": "code",
              "context": "in function: (m"
            },
            {
              "number": 73,
              "content": "MinConfidence *float32 `json:\"min_confidence,omitempty\"`",
              "type": "code",
              "context": "in function: (m"
            },
            {
              "number": 74,
              "content": "CreatedBy     string   `json:\"created_by,omitempty\"`",
              "type": "code",
              "context": "in function: (m"
            },
            {
              "number": 75,
              "content": "}",
              "type": "code",
              "context": "in function: (m"
            },
            {
              "number": 78,
              "content": "type PotentialMatch struct {",
              "type": "code",
              "context": "in function: (m"
            },
            {
              "number": 79,
              "content": "DTakoRowID   string                 `json:\"dtako_row_id\"`",
              "type": "code",
              "context": "in function: (m"
            },
            {
              "number": 80,
              "content": "Confidence   float32                `json:\"confidence\"`",
              "type": "code",
              "context": "in function: (m"
            },
            {
              "number": 81,
              "content": "MatchReasons []string               `json:\"match_reasons\"`",
              "type": "code",
              "context": "in function: (m"
            },
            {
              "number": 82,
              "content": "DTakoData    map[string]interface{} `json:\"dtako_data\"`",
              "type": "code",
              "context": "in function: (m"
            },
            {
              "number": 83,
              "content": "}",
              "type": "code",
              "context": "in function: (m"
            },
            {
              "number": 86,
              "content": "type MappingStats struct {",
              "type": "code",
              "context": "in function: (m"
            },
            {
              "number": 87,
              "content": "TotalMappings   int64   `json:\"total_mappings\"`",
              "type": "code",
              "context": "in function: (m"
            },
            {
              "number": 88,
              "content": "AutoMappings    int64   `json:\"auto_mappings\"`",
              "type": "code",
              "context": "in function: (m"
            },
            {
              "number": 89,
              "content": "ManualMappings  int64   `json:\"manual_mappings\"`",
              "type": "code",
              "context": "in function: (m"
            },
            {
              "number": 90,
              "content": "HighConfidence  int64   `json:\"high_confidence\"`",
              "type": "code",
              "context": "in function: (m"
            },
            {
              "number": 91,
              "content": "LowConfidence   int64   `json:\"low_confidence\"`",
              "type": "code",
              "context": "in function: (m"
            },
            {
              "number": 92,
              "content": "AverageConfidence float32 `json:\"average_confidence\"`",
              "type": "code",
              "context": "in function: (m"
            },
            {
              "number": 93,
              "content": "UnmappedRecords int64   `json:\"unmapped_records\"`",
              "type": "code",
              "context": "in function: (m"
            },
            {
              "number": 94,
              "content": "}",
              "type": "code",
              "context": "in function: (m"
            },
            {
              "number": 97,
              "content": "type AutoMatchResult struct {",
              "type": "code",
              "context": "in function: (m"
            },
            {
              "number": 98,
              "content": "ETCMeisaiID      int64             `json:\"etc_meisai_id\"`",
              "type": "code",
              "context": "in function: (m"
            },
            {
              "number": 99,
              "content": "PotentialMatches []*PotentialMatch `json:\"potential_matches,omitempty\"`",
              "type": "code",
              "context": "in function: (m"
            },
            {
              "number": 100,
              "content": "BestMatch        *PotentialMatch   `json:\"best_match,omitempty\"`",
              "type": "code",
              "context": "in function: (m"
            },
            {
              "number": 101,
              "content": "Error            string            `json:\"error,omitempty\"`",
              "type": "code",
              "context": "in function: (m"
            },
            {
              "number": 102,
              "content": "}",
              "type": "code",
              "context": "in function: (m"
            }
          ],
          "functions": [
            {
              "name": "BeforeCreate",
              "start_line": 25,
              "end_line": 30,
              "coverage": 0,
              "uncovered_lines": [
                25,
                26,
                27,
                28,
                29,
                30
              ]
            },
            {
              "name": "BeforeUpdate",
              "start_line": 33,
              "end_line": 38,
              "coverage": 0,
              "uncovered_lines": [
                33,
                34,
                35,
                36,
                37,
                38
              ]
            },
            {
              "name": "Validate",
              "start_line": 41,
              "end_line": 59,
              "coverage": 0,
              "uncovered_lines": [
                41,
                42,
                43,
                44,
                46,
                47,
                48,
                50,
                51,
                52,
                54,
                55,
                56,
                58,
                59
              ]
            },
            {
              "name": "IsHighConfidence",
              "start_line": 62,
              "end_line": 64,
              "coverage": 0,
              "uncovered_lines": [
                62,
                63,
                64
              ]
            }
          ]
        },
        "github.com/yhonda-ohishi/etc_meisai/src/models/etc_meisai_record.go": {
          "name": "github.com/yhonda-ohishi/etc_meisai/src/models/etc_meisai_record.go",
          "coverage": 0,
          "total_lines": 264,
          "covered_lines": 0,
          "uncovered_lines": [
            {
              "number": 4,
              "content": "\"crypto/sha256\"",
              "type": "code"
            },
            {
              "number": 5,
              "content": "\"fmt\"",
              "type": "code"
            },
            {
              "number": 6,
              "content": "\"regexp\"",
              "type": "code"
            },
            {
              "number": 7,
              "content": "\"strconv\"",
              "type": "code"
            },
            {
              "number": 8,
              "content": "\"strings\"",
              "type": "code"
            },
            {
              "number": 9,
              "content": "\"time\"",
              "type": "code"
            },
            {
              "number": 11,
              "content": "\"gorm.io/gorm\"",
              "type": "code"
            },
            {
              "number": 12,
              "content": ")",
              "type": "code"
            },
            {
              "number": 15,
              "content": "type ETCMeisaiRecord struct {",
              "type": "code"
            },
            {
              "number": 16,
              "content": "ID              int64              `gorm:\"primaryKey;autoIncrement\" json:\"id\"`",
              "type": "code"
            },
            {
              "number": 17,
              "content": "Hash            string             `gorm:\"uniqueIndex;size:64;not null\" json:\"hash\"`",
              "type": "code"
            },
            {
              "number": 18,
              "content": "Date            time.Time          `gorm:\"index;not null\" json:\"date\"`",
              "type": "code"
            },
            {
              "number": 19,
              "content": "Time            string             `gorm:\"size:8;not null\" json:\"time\"`",
              "type": "code"
            },
            {
              "number": 20,
              "content": "EntranceIC      string             `gorm:\"size:100;not null\" json:\"entrance_ic\"`",
              "type": "code"
            },
            {
              "number": 21,
              "content": "ExitIC          string             `gorm:\"size:100;not null\" json:\"exit_ic\"`",
              "type": "code"
            },
            {
              "number": 22,
              "content": "TollAmount      int                `gorm:\"not null\" json:\"toll_amount\"`",
              "type": "code"
            },
            {
              "number": 23,
              "content": "CarNumber       string             `gorm:\"index;size:20;not null\" json:\"car_number\"`",
              "type": "code"
            },
            {
              "number": 24,
              "content": "ETCCardNumber   string             `gorm:\"index;size:20;not null\" json:\"etc_card_number\"`",
              "type": "code"
            },
            {
              "number": 25,
              "content": "ETCNum          *string            `gorm:\"index;size:50\" json:\"etc_num,omitempty\"`",
              "type": "code"
            },
            {
              "number": 26,
              "content": "DtakoRowID      *int64             `gorm:\"index\" json:\"dtako_row_id,omitempty\"`",
              "type": "code"
            },
            {
              "number": 27,
              "content": "CreatedAt       time.Time          `gorm:\"autoCreateTime\" json:\"created_at\"`",
              "type": "code"
            },
            {
              "number": 28,
              "content": "UpdatedAt       time.Time          `gorm:\"autoUpdateTime\" json:\"updated_at\"`",
              "type": "code"
            },
            {
              "number": 29,
              "content": "DeletedAt       gorm.DeletedAt     `gorm:\"index\" json:\"deleted_at,omitempty\"`",
              "type": "code"
            },
            {
              "number": 30,
              "content": "}",
              "type": "code"
            },
            {
              "number": 33,
              "content": "func (ETCMeisaiRecord) TableName() string {",
              "type": "code",
              "context": "in function: (ETCMeisaiRecord)"
            },
            {
              "number": 34,
              "content": "return \"etc_meisai_records\"",
              "type": "code",
              "context": "in function: (ETCMeisaiRecord)"
            },
            {
              "number": 35,
              "content": "}",
              "type": "code",
              "context": "in function: (ETCMeisaiRecord)"
            },
            {
              "number": 38,
              "content": "func (r *ETCMeisaiRecord) BeforeCreate(tx *gorm.DB) error {",
              "type": "code",
              "context": "in function: (r"
            },
            {
              "number": 39,
              "content": "if err := r.validate(); err != nil {",
              "type": "error-handling",
              "context": "in function: (r"
            },
            {
              "number": 40,
              "content": "return err",
              "type": "error-handling",
              "context": "in function: (r"
            },
            {
              "number": 41,
              "content": "}",
              "type": "code",
              "context": "in function: (r"
            },
            {
              "number": 43,
              "content": "if r.Hash == \"\" {",
              "type": "branch",
              "context": "in function: (r"
            },
            {
              "number": 44,
              "content": "r.Hash = r.generateHash()",
              "type": "code",
              "context": "in function: (r"
            },
            {
              "number": 45,
              "content": "}",
              "type": "code",
              "context": "in function: (r"
            },
            {
              "number": 47,
              "content": "return nil",
              "type": "code",
              "context": "in function: (r"
            },
            {
              "number": 48,
              "content": "}",
              "type": "code",
              "context": "in function: (r"
            },
            {
              "number": 51,
              "content": "func (r *ETCMeisaiRecord) BeforeSave(tx *gorm.DB) error {",
              "type": "code",
              "context": "in function: (r"
            },
            {
              "number": 52,
              "content": "return r.validate()",
              "type": "code",
              "context": "in function: (r"
            },
            {
              "number": 53,
              "content": "}",
              "type": "code",
              "context": "in function: (r"
            },
            {
              "number": 56,
              "content": "func (r *ETCMeisaiRecord) validate() error {",
              "type": "code",
              "context": "in function: (r"
            },
            {
              "number": 58,
              "content": "if r.Date.After(time.Now()) {",
              "type": "branch",
              "context": "in function: (r"
            },
            {
              "number": 59,
              "content": "return fmt.Errorf(\"date cannot be in the future\")",
              "type": "code",
              "context": "in function: (r"
            },
            {
              "number": 60,
              "content": "}",
              "type": "code",
              "context": "in function: (r"
            },
            {
              "number": 63,
              "content": "timeRegex := regexp.MustCompile(`^([01]?[0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]$`)",
              "type": "code",
              "context": "in function: (r"
            },
            {
              "number": 64,
              "content": "if !timeRegex.MatchString(r.Time) {",
              "type": "branch",
              "context": "in function: (r"
            },
            {
              "number": 65,
              "content": "return fmt.Errorf(\"time must be in HH:MM:SS format\")",
              "type": "code",
              "context": "in function: (r"
            },
            {
              "number": 66,
              "content": "}",
              "type": "code",
              "context": "in function: (r"
            },
            {
              "number": 69,
              "content": "if len(strings.TrimSpace(r.EntranceIC)) == 0 {",
              "type": "branch",
              "context": "in function: (r"
            },
            {
              "number": 70,
              "content": "return fmt.Errorf(\"entrance IC cannot be empty\")",
              "type": "code",
              "context": "in function: (r"
            },
            {
              "number": 71,
              "content": "}",
              "type": "code",
              "context": "in function: (r"
            },
            {
              "number": 72,
              "content": "if len(strings.TrimSpace(r.ExitIC)) == 0 {",
              "type": "branch",
              "context": "in function: (r"
            },
            {
              "number": 73,
              "content": "return fmt.Errorf(\"exit IC cannot be empty\")",
              "type": "code",
              "context": "in function: (r"
            },
            {
              "number": 74,
              "content": "}",
              "type": "code",
              "context": "in function: (r"
            },
            {
              "number": 75,
              "content": "if len(r.EntranceIC) \u003e 100 {",
              "type": "branch",
              "context": "in function: (r"
            },
            {
              "number": 76,
              "content": "return fmt.Errorf(\"entrance IC name too long (max 100 characters)\")",
              "type": "code",
              "context": "in function: (r"
            },
            {
              "number": 77,
              "content": "}",
              "type": "code",
              "context": "in function: (r"
            },
            {
              "number": 78,
              "content": "if len(r.ExitIC) \u003e 100 {",
              "type": "branch",
              "context": "in function: (r"
            },
            {
              "number": 79,
              "content": "return fmt.Errorf(\"exit IC name too long (max 100 characters)\")",
              "type": "code",
              "context": "in function: (r"
            },
            {
              "number": 80,
              "content": "}",
              "type": "code",
              "context": "in function: (r"
            },
            {
              "number": 83,
              "content": "if r.TollAmount \u003c 0 {",
              "type": "branch",
              "context": "in function: (r"
            },
            {
              "number": 84,
              "content": "return fmt.Errorf(\"toll amount must be non-negative\")",
              "type": "code",
              "context": "in function: (r"
            },
            {
              "number": 85,
              "content": "}",
              "type": "code",
              "context": "in function: (r"
            },
            {
              "number": 86,
              "content": "if r.TollAmount \u003e 999999 {",
              "type": "branch",
              "context": "in function: (r"
            },
            {
              "number": 87,
              "content": "return fmt.Errorf(\"toll amount too large (max 999999)\")",
              "type": "code",
              "context": "in function: (r"
            },
            {
              "number": 88,
              "content": "}",
              "type": "code",
              "context": "in function: (r"
            },
            {
              "number": 91,
              "content": "if err := r.validateCarNumber(); err != nil {",
              "type": "error-handling",
              "context": "in function: (r"
            },
            {
              "number": 92,
              "content": "return err",
              "type": "error-handling",
              "context": "in function: (r"
            },
            {
              "number": 93,
              "content": "}",
              "type": "code",
              "context": "in function: (r"
            },
            {
              "number": 96,
              "content": "if err := r.validateETCCardNumber(); err != nil {",
              "type": "error-handling",
              "context": "in function: (r"
            },
            {
              "number": 97,
              "content": "return err",
              "type": "error-handling",
              "context": "in function: (r"
            },
            {
              "number": 98,
              "content": "}",
              "type": "code",
              "context": "in function: (r"
            },
            {
              "number": 101,
              "content": "if r.ETCNum != nil \u0026\u0026 *r.ETCNum != \"\" {",
              "type": "branch",
              "context": "in function: (r"
            },
            {
              "number": 102,
              "content": "if err := r.validateETCNum(); err != nil {",
              "type": "error-handling",
              "context": "in function: (r"
            },
            {
              "number": 103,
              "content": "return err",
              "type": "error-handling",
              "context": "in function: (r"
            },
            {
              "number": 104,
              "content": "}",
              "type": "code",
              "context": "in function: (r"
            },
            {
              "number": 105,
              "content": "}",
              "type": "code",
              "context": "in function: (r"
            },
            {
              "number": 107,
              "content": "return nil",
              "type": "code",
              "context": "in function: (r"
            },
            {
              "number": 108,
              "content": "}",
              "type": "code",
              "context": "in function: (r"
            },
            {
              "number": 111,
              "content": "func (r *ETCMeisaiRecord) validateCarNumber() error {",
              "type": "code",
              "context": "in function: (r"
            },
            {
              "number": 112,
              "content": "if len(strings.TrimSpace(r.CarNumber)) == 0 {",
              "type": "branch",
              "context": "in function: (r"
            },
            {
              "number": 113,
              "content": "return fmt.Errorf(\"car number cannot be empty\")",
              "type": "code",
              "context": "in function: (r"
            },
            {
              "number": 114,
              "content": "}",
              "type": "code",
              "context": "in function: (r"
            },
            {
              "number": 117,
              "content": "patterns := []string{",
              "type": "code",
              "context": "in function: (r"
            },
            {
              "number": 118,
              "content": "`^\\d{3}-\\d{2}$`,                    // 軽自動車: 123-45",
              "type": "code",
              "context": "in function: (r"
            },
            {
              "number": 119,
              "content": "`^\\d{3}\\s\\d{2}$`,                   // 軽自動車: 123 45",
              "type": "code",
              "context": "in function: (r"
            },
            {
              "number": 120,
              "content": "`^[あ-ん]{1}\\d{3}$`,                // ひらがな + 数字: あ123",
              "type": "code",
              "context": "in function: (r"
            },
            {
              "number": 121,
              "content": "`^[ア-ン]{1}\\d{3}$`,                // カタカナ + 数字: ア123",
              "type": "code",
              "context": "in function: (r"
            },
            {
              "number": 122,
              "content": "`^\\d{2}-\\d{2}$`,                    // 二輪: 12-34",
              "type": "code",
              "context": "in function: (r"
            },
            {
              "number": 123,
              "content": "`^\\d{4}$`,                          // 4桁数字",
              "type": "code",
              "context": "in function: (r"
            },
            {
              "number": 124,
              "content": "`^[a-zA-Z0-9\\-\\s]{3,20}$`,         // 一般的なパターン",
              "type": "code",
              "context": "in function: (r"
            },
            {
              "number": 125,
              "content": "}",
              "type": "code",
              "context": "in function: (r"
            },
            {
              "number": 127,
              "content": "for _, pattern := range patterns {",
              "type": "branch",
              "context": "in function: (r"
            },
            {
              "number": 128,
              "content": "if matched, _ := regexp.MatchString(pattern, r.CarNumber); matched {",
              "type": "branch",
              "context": "in function: (r"
            },
            {
              "number": 129,
              "content": "return nil",
              "type": "code",
              "context": "in function: (r"
            },
            {
              "number": 130,
              "content": "}",
              "type": "code",
              "context": "in function: (r"
            },
            {
              "number": 131,
              "content": "}",
              "type": "code",
              "context": "in function: (r"
            },
            {
              "number": 133,
              "content": "return fmt.Errorf(\"invalid car number format\")",
              "type": "code",
              "context": "in function: (r"
            },
            {
              "number": 134,
              "content": "}",
              "type": "code",
              "context": "in function: (r"
            },
            {
              "number": 137,
              "content": "func (r *ETCMeisaiRecord) validateETCCardNumber() error {",
              "type": "code",
              "context": "in function: (r"
            },
            {
              "number": 138,
              "content": "if len(strings.TrimSpace(r.ETCCardNumber)) == 0 {",
              "type": "branch",
              "context": "in function: (r"
            },
            {
              "number": 139,
              "content": "return fmt.Errorf(\"ETC card number cannot be empty\")",
              "type": "code",
              "context": "in function: (r"
            },
            {
              "number": 140,
              "content": "}",
              "type": "code",
              "context": "in function: (r"
            },
            {
              "number": 143,
              "content": "cleaned := strings.ReplaceAll(strings.ReplaceAll(r.ETCCardNumber, \" \", \"\"), \"-\", \"\")",
              "type": "code",
              "context": "in function: (r"
            },
            {
              "number": 146,
              "content": "if len(cleaned) \u003c 16 || len(cleaned) \u003e 19 {",
              "type": "branch",
              "context": "in function: (r"
            },
            {
              "number": 147,
              "content": "return fmt.Errorf(\"ETC card number must be 16-19 digits\")",
              "type": "code",
              "context": "in function: (r"
            },
            {
              "number": 148,
              "content": "}",
              "type": "code",
              "context": "in function: (r"
            },
            {
              "number": 151,
              "content": "if _, err := strconv.ParseInt(cleaned, 10, 64); err != nil {",
              "type": "branch",
              "context": "in function: (r"
            },
            {
              "number": 152,
              "content": "return fmt.Errorf(\"ETC card number must contain only digits\")",
              "type": "code",
              "context": "in function: (r"
            },
            {
              "number": 153,
              "content": "}",
              "type": "code",
              "context": "in function: (r"
            },
            {
              "number": 155,
              "content": "return nil",
              "type": "code",
              "context": "in function: (r"
            },
            {
              "number": 156,
              "content": "}",
              "type": "code",
              "context": "in function: (r"
            },
            {
              "number": 159,
              "content": "func (r *ETCMeisaiRecord) validateETCNum() error {",
              "type": "code",
              "context": "in function: (r"
            },
            {
              "number": 160,
              "content": "if r.ETCNum == nil || *r.ETCNum == \"\" {",
              "type": "branch",
              "context": "in function: (r"
            },
            {
              "number": 161,
              "content": "return nil // Optional field",
              "type": "code",
              "context": "in function: (r"
            },
            {
              "number": 162,
              "content": "}",
              "type": "code",
              "context": "in function: (r"
            },
            {
              "number": 165,
              "content": "etcNum := strings.TrimSpace(*r.ETCNum)",
              "type": "code",
              "context": "in function: (r"
            },
            {
              "number": 166,
              "content": "if len(etcNum) \u003c 5 || len(etcNum) \u003e 50 {",
              "type": "branch",
              "context": "in function: (r"
            },
            {
              "number": 167,
              "content": "return fmt.Errorf(\"ETC number must be 5-50 characters\")",
              "type": "code",
              "context": "in function: (r"
            },
            {
              "number": 168,
              "content": "}",
              "type": "code",
              "context": "in function: (r"
            },
            {
              "number": 171,
              "content": "pattern := `^[a-zA-Z0-9\\-_]+$`",
              "type": "code",
              "context": "in function: (r"
            },
            {
              "number": 172,
              "content": "if matched, _ := regexp.MatchString(pattern, etcNum); !matched {",
              "type": "branch",
              "context": "in function: (r"
            },
            {
              "number": 173,
              "content": "return fmt.Errorf(\"ETC number contains invalid characters\")",
              "type": "code",
              "context": "in function: (r"
            },
            {
              "number": 174,
              "content": "}",
              "type": "code",
              "context": "in function: (r"
            },
            {
              "number": 176,
              "content": "return nil",
              "type": "code",
              "context": "in function: (r"
            },
            {
              "number": 177,
              "content": "}",
              "type": "code",
              "context": "in function: (r"
            },
            {
              "number": 180,
              "content": "func (r *ETCMeisaiRecord) generateHash() string {",
              "type": "code",
              "context": "in function: (r"
            },
            {
              "number": 181,
              "content": "data := fmt.Sprintf(\"%s|%s|%s|%s|%d|%s|%s\",",
              "type": "code",
              "context": "in function: (r"
            },
            {
              "number": 182,
              "content": "r.Date.Format(\"2006-01-02\"),",
              "type": "code",
              "context": "in function: (r"
            },
            {
              "number": 183,
              "content": "r.Time,",
              "type": "code",
              "context": "in function: (r"
            },
            {
              "number": 184,
              "content": "r.EntranceIC,",
              "type": "code",
              "context": "in function: (r"
            },
            {
              "number": 185,
              "content": "r.ExitIC,",
              "type": "code",
              "context": "in function: (r"
            },
            {
              "number": 186,
              "content": "r.TollAmount,",
              "type": "code",
              "context": "in function: (r"
            },
            {
              "number": 187,
              "content": "r.CarNumber,",
              "type": "code",
              "context": "in function: (r"
            },
            {
              "number": 188,
              "content": "r.ETCCardNumber,",
              "type": "code",
              "context": "in function: (r"
            },
            {
              "number": 189,
              "content": ")",
              "type": "code",
              "context": "in function: (r"
            },
            {
              "number": 191,
              "content": "hash := sha256.Sum256([]byte(data))",
              "type": "code",
              "context": "in function: (r"
            },
            {
              "number": 192,
              "content": "return fmt.Sprintf(\"%x\", hash)",
              "type": "code",
              "context": "in function: (r"
            },
            {
              "number": 193,
              "content": "}",
              "type": "code",
              "context": "in function: (r"
            },
            {
              "number": 196,
              "content": "func (r *ETCMeisaiRecord) GetDateString() string {",
              "type": "code",
              "context": "in function: (r"
            },
            {
              "number": 197,
              "content": "return r.Date.Format(\"2006-01-02\")",
              "type": "code",
              "context": "in function: (r"
            },
            {
              "number": 198,
              "content": "}",
              "type": "code",
              "context": "in function: (r"
            },
            {
              "number": 201,
              "content": "func (r *ETCMeisaiRecord) GenerateHash() string {",
              "type": "code",
              "context": "in function: (r"
            },
            {
              "number": 202,
              "content": "return r.generateHash()",
              "type": "code",
              "context": "in function: (r"
            },
            {
              "number": 203,
              "content": "}",
              "type": "code",
              "context": "in function: (r"
            },
            {
              "number": 206,
              "content": "func (r *ETCMeisaiRecord) Validate() error {",
              "type": "code",
              "context": "in function: (r"
            },
            {
              "number": 207,
              "content": "return r.validate()",
              "type": "code",
              "context": "in function: (r"
            },
            {
              "number": 208,
              "content": "}",
              "type": "code",
              "context": "in function: (r"
            },
            {
              "number": 211,
              "content": "func (r *ETCMeisaiRecord) GetMaskedETCCardNumber() string {",
              "type": "code",
              "context": "in function: (r"
            },
            {
              "number": 212,
              "content": "if len(r.ETCCardNumber) \u003c= 4 {",
              "type": "branch",
              "context": "in function: (r"
            },
            {
              "number": 213,
              "content": "return \"****\"",
              "type": "code",
              "context": "in function: (r"
            },
            {
              "number": 214,
              "content": "}",
              "type": "code",
              "context": "in function: (r"
            },
            {
              "number": 217,
              "content": "return \"****-****-****-\" + r.ETCCardNumber[len(r.ETCCardNumber)-4:]",
              "type": "code",
              "context": "in function: (r"
            },
            {
              "number": 218,
              "content": "}",
              "type": "code",
              "context": "in function: (r"
            },
            {
              "number": 221,
              "content": "func (r *ETCMeisaiRecord) IsValidForMapping() bool {",
              "type": "code",
              "context": "in function: (r"
            },
            {
              "number": 222,
              "content": "return r.ID \u003e 0 \u0026\u0026 r.Hash != \"\" \u0026\u0026 !r.Date.IsZero()",
              "type": "code",
              "context": "in function: (r"
            },
            {
              "number": 223,
              "content": "}",
              "type": "code",
              "context": "in function: (r"
            },
            {
              "number": 228,
              "content": "func (r *ETCMeisaiRecord) BeforeUpdate() error {",
              "type": "code",
              "context": "in function: (r"
            },
            {
              "number": 229,
              "content": "r.Hash = r.generateHash()",
              "type": "code",
              "context": "in function: (r"
            },
            {
              "number": 230,
              "content": "return nil",
              "type": "code",
              "context": "in function: (r"
            },
            {
              "number": 231,
              "content": "}",
              "type": "code",
              "context": "in function: (r"
            },
            {
              "number": 234,
              "content": "func (r *ETCMeisaiRecord) String() string {",
              "type": "code",
              "context": "in function: (r"
            },
            {
              "number": 235,
              "content": "return fmt.Sprintf(\"ETCMeisaiRecord{ID:%d, Date:%s, EntranceIC:%s, ExitIC:%s, Amount:%d, ETCCardNumber:%s}\",",
              "type": "code",
              "context": "in function: (r"
            },
            {
              "number": 236,
              "content": "r.ID, r.Date.Format(\"2006-01-02\"), r.EntranceIC, r.ExitIC, r.TollAmount, r.ETCCardNumber)",
              "type": "code",
              "context": "in function: (r"
            },
            {
              "number": 237,
              "content": "}",
              "type": "code",
              "context": "in function: (r"
            },
            {
              "number": 240,
              "content": "func (r *ETCMeisaiRecord) GetETCNum() string {",
              "type": "code",
              "context": "in function: (r"
            },
            {
              "number": 241,
              "content": "if r.ETCNum == nil {",
              "type": "branch",
              "context": "in function: (r"
            },
            {
              "number": 242,
              "content": "return \"\"",
              "type": "code",
              "context": "in function: (r"
            },
            {
              "number": 243,
              "content": "}",
              "type": "code",
              "context": "in function: (r"
            },
            {
              "number": 244,
              "content": "return *r.ETCNum",
              "type": "code",
              "context": "in function: (r"
            },
            {
              "number": 245,
              "content": "}",
              "type": "code",
              "context": "in function: (r"
            },
            {
              "number": 248,
              "content": "func (r *ETCMeisaiRecord) SetETCNum(etcNum string) {",
              "type": "code",
              "context": "in function: (r"
            },
            {
              "number": 249,
              "content": "if etcNum == \"\" {",
              "type": "branch",
              "context": "in function: (r"
            },
            {
              "number": 250,
              "content": "r.ETCNum = nil",
              "type": "code",
              "context": "in function: (r"
            },
            {
              "number": 251,
              "content": "} else {",
              "type": "code",
              "context": "in function: (r"
            },
            {
              "number": 252,
              "content": "r.ETCNum = \u0026etcNum",
              "type": "code",
              "context": "in function: (r"
            },
            {
              "number": 253,
              "content": "}",
              "type": "code",
              "context": "in function: (r"
            },
            {
              "number": 254,
              "content": "}",
              "type": "code",
              "context": "in function: (r"
            },
            {
              "number": 259,
              "content": "func IsTimeValid(timeStr string) bool {",
              "type": "code",
              "context": "in function: IsTimeValid(timeStr"
            },
            {
              "number": 261,
              "content": "pattern := `^([01]?[0-9]|2[0-3]):[0-5][0-9]$`",
              "type": "code",
              "context": "in function: IsTimeValid(timeStr"
            },
            {
              "number": 262,
              "content": "matched, _ := regexp.MatchString(pattern, timeStr)",
              "type": "code",
              "context": "in function: IsTimeValid(timeStr"
            },
            {
              "number": 263,
              "content": "return matched",
              "type": "code",
              "context": "in function: IsTimeValid(timeStr"
            },
            {
              "number": 264,
              "content": "}",
              "type": "code",
              "context": "in function: IsTimeValid(timeStr"
            }
          ],
          "functions": [
            {
              "name": "TableName",
              "start_line": 33,
              "end_line": 35,
              "coverage": 0,
              "uncovered_lines": [
                33,
                34,
                35
              ]
            },
            {
              "name": "BeforeCreate",
              "start_line": 38,
              "end_line": 48,
              "coverage": 0,
              "uncovered_lines": [
                38,
                39,
                40,
                41,
                43,
                44,
                45,
                47,
                48
              ]
            },
            {
              "name": "BeforeSave",
              "start_line": 51,
              "end_line": 53,
              "coverage": 0,
              "uncovered_lines": [
                51,
                52,
                53
              ]
            },
            {
              "name": "validate",
              "start_line": 56,
              "end_line": 108,
              "coverage": 0,
              "uncovered_lines": [
                56,
                58,
                59,
                60,
                63,
                64,
                65,
                66,
                69,
                70,
                71,
                72,
                73,
                74,
                75,
                76,
                77,
                78,
                79,
                80,
                83,
                84,
                85,
                86,
                87,
                88,
                91,
                92,
                93,
                96,
                97,
                98,
                101,
                102,
                103,
                104,
                105,
                107,
                108
              ]
            },
            {
              "name": "validateCarNumber",
              "start_line": 111,
              "end_line": 134,
              "coverage": 0,
              "uncovered_lines": [
                111,
                112,
                113,
                114,
                117,
                118,
                119,
                120,
                121,
                122,
                123,
                124,
                125,
                127,
                128,
                129,
                130,
                131,
                133,
                134
              ]
            },
            {
              "name": "validateETCCardNumber",
              "start_line": 137,
              "end_line": 156,
              "coverage": 0,
              "uncovered_lines": [
                137,
                138,
                139,
                140,
                143,
                146,
                147,
                148,
                151,
                152,
                153,
                155,
                156
              ]
            },
            {
              "name": "validateETCNum",
              "start_line": 159,
              "end_line": 177,
              "coverage": 0,
              "uncovered_lines": [
                159,
                160,
                161,
                162,
                165,
                166,
                167,
                168,
                171,
                172,
                173,
                174,
                176,
                177
              ]
            },
            {
              "name": "generateHash",
              "start_line": 180,
              "end_line": 193,
              "coverage": 0,
              "uncovered_lines": [
                180,
                181,
                182,
                183,
                184,
                185,
                186,
                187,
                188,
                189,
                191,
                192,
                193
              ]
            },
            {
              "name": "GetDateString",
              "start_line": 196,
              "end_line": 198,
              "coverage": 0,
              "uncovered_lines": [
                196,
                197,
                198
              ]
            },
            {
              "name": "GenerateHash",
              "start_line": 201,
              "end_line": 203,
              "coverage": 0,
              "uncovered_lines": [
                201,
                202,
                203
              ]
            },
            {
              "name": "Validate",
              "start_line": 206,
              "end_line": 208,
              "coverage": 0,
              "uncovered_lines": [
                206,
                207,
                208
              ]
            },
            {
              "name": "GetMaskedETCCardNumber",
              "start_line": 211,
              "end_line": 218,
              "coverage": 0,
              "uncovered_lines": [
                211,
                212,
                213,
                214,
                217,
                218
              ]
            },
            {
              "name": "IsValidForMapping",
              "start_line": 221,
              "end_line": 223,
              "coverage": 0,
              "uncovered_lines": [
                221,
                222,
                223
              ]
            },
            {
              "name": "BeforeUpdate",
              "start_line": 228,
              "end_line": 231,
              "coverage": 0,
              "uncovered_lines": [
                228,
                229,
                230,
                231
              ]
            },
            {
              "name": "String",
              "start_line": 234,
              "end_line": 237,
              "coverage": 0,
              "uncovered_lines": [
                234,
                235,
                236,
                237
              ]
            },
            {
              "name": "GetETCNum",
              "start_line": 240,
              "end_line": 245,
              "coverage": 0,
              "uncovered_lines": [
                240,
                241,
                242,
                243,
                244,
                245
              ]
            },
            {
              "name": "SetETCNum",
              "start_line": 248,
              "end_line": 254,
              "coverage": 0,
              "uncovered_lines": [
                248,
                249,
                250,
                251,
                252,
                253,
                254
              ]
            },
            {
              "name": "IsTimeValid",
              "start_line": 259,
              "end_line": 264,
              "coverage": 0,
              "uncovered_lines": [
                259,
                261,
                262,
                263,
                264
              ]
            }
          ]
        },
        "github.com/yhonda-ohishi/etc_meisai/src/models/import_session.go": {
          "name": "github.com/yhonda-ohishi/etc_meisai/src/models/import_session.go",
          "coverage": 0,
          "total_lines": 575,
          "covered_lines": 0,
          "uncovered_lines": [
            {
              "number": 4,
              "content": "\"encoding/json\"",
              "type": "code"
            },
            {
              "number": 5,
              "content": "\"fmt\"",
              "type": "code"
            },
            {
              "number": 6,
              "content": "\"path/filepath\"",
              "type": "code"
            },
            {
              "number": 7,
              "content": "\"regexp\"",
              "type": "code"
            },
            {
              "number": 8,
              "content": "\"strings\"",
              "type": "code"
            },
            {
              "number": 9,
              "content": "\"time\"",
              "type": "code"
            },
            {
              "number": 11,
              "content": "\"github.com/google/uuid\"",
              "type": "code"
            },
            {
              "number": 12,
              "content": "\"gorm.io/datatypes\"",
              "type": "code"
            },
            {
              "number": 13,
              "content": "\"gorm.io/gorm\"",
              "type": "code"
            },
            {
              "number": 14,
              "content": ")",
              "type": "code"
            },
            {
              "number": 17,
              "content": "type ImportStatus string",
              "type": "code"
            },
            {
              "number": 19,
              "content": "const (",
              "type": "code"
            },
            {
              "number": 20,
              "content": "ImportStatusPending    ImportStatus = \"pending\"",
              "type": "code"
            },
            {
              "number": 21,
              "content": "ImportStatusProcessing ImportStatus = \"processing\"",
              "type": "code"
            },
            {
              "number": 22,
              "content": "ImportStatusCompleted  ImportStatus = \"completed\"",
              "type": "code"
            },
            {
              "number": 23,
              "content": "ImportStatusFailed     ImportStatus = \"failed\"",
              "type": "code"
            },
            {
              "number": 24,
              "content": "ImportStatusCancelled  ImportStatus = \"cancelled\"",
              "type": "code"
            },
            {
              "number": 25,
              "content": ")",
              "type": "code"
            },
            {
              "number": 28,
              "content": "type AccountType string",
              "type": "code"
            },
            {
              "number": 30,
              "content": "const (",
              "type": "code"
            },
            {
              "number": 31,
              "content": "AccountTypeCorporate AccountType = \"corporate\"",
              "type": "code"
            },
            {
              "number": 32,
              "content": "AccountTypePersonal  AccountType = \"personal\"",
              "type": "code"
            },
            {
              "number": 33,
              "content": ")",
              "type": "code"
            },
            {
              "number": 36,
              "content": "type ImportError struct {",
              "type": "code"
            },
            {
              "number": 37,
              "content": "RowNumber    int    `json:\"row_number\"`",
              "type": "code"
            },
            {
              "number": 38,
              "content": "ErrorType    string `json:\"error_type\"`",
              "type": "code"
            },
            {
              "number": 39,
              "content": "ErrorMessage string `json:\"error_message\"`",
              "type": "code"
            },
            {
              "number": 40,
              "content": "RawData      string `json:\"raw_data,omitempty\"`",
              "type": "code"
            },
            {
              "number": 41,
              "content": "}",
              "type": "code"
            },
            {
              "number": 44,
              "content": "type ImportSession struct {",
              "type": "code"
            },
            {
              "number": 45,
              "content": "ID              string         `gorm:\"primaryKey;size:36\" json:\"id\"` // UUID",
              "type": "code"
            },
            {
              "number": 46,
              "content": "AccountType     string         `gorm:\"size:20;not null;index\" json:\"account_type\"`",
              "type": "code"
            },
            {
              "number": 47,
              "content": "AccountID       string         `gorm:\"size:50;not null;index\" json:\"account_id\"`",
              "type": "code"
            },
            {
              "number": 48,
              "content": "AccountIndex    int            `gorm:\"default:0\" json:\"account_index\"`",
              "type": "code"
            },
            {
              "number": 49,
              "content": "FileName        string         `gorm:\"size:255;not null\" json:\"file_name\"`",
              "type": "code"
            },
            {
              "number": 50,
              "content": "FileSize        int64          `gorm:\"not null\" json:\"file_size\"`",
              "type": "code"
            },
            {
              "number": 51,
              "content": "Status          string         `gorm:\"size:20;not null;index\" json:\"status\"`",
              "type": "code"
            },
            {
              "number": 52,
              "content": "TotalRows       int            `gorm:\"default:0\" json:\"total_rows\"`",
              "type": "code"
            },
            {
              "number": 53,
              "content": "ProcessedRows   int            `gorm:\"default:0\" json:\"processed_rows\"`",
              "type": "code"
            },
            {
              "number": 54,
              "content": "SuccessRows     int            `gorm:\"default:0\" json:\"success_rows\"`",
              "type": "code"
            },
            {
              "number": 55,
              "content": "ErrorRows       int            `gorm:\"default:0\" json:\"error_rows\"`",
              "type": "code"
            },
            {
              "number": 56,
              "content": "DuplicateRows   int            `gorm:\"default:0\" json:\"duplicate_rows\"`",
              "type": "code"
            },
            {
              "number": 57,
              "content": "ProgressPercent float64        `gorm:\"default:0\" json:\"progress_percent\"`",
              "type": "code"
            },
            {
              "number": 58,
              "content": "ErrorMessage    *string        `gorm:\"size:1000\" json:\"error_message,omitempty\"`",
              "type": "code"
            },
            {
              "number": 59,
              "content": "StartedAt       time.Time      `gorm:\"not null\" json:\"started_at\"`",
              "type": "code"
            },
            {
              "number": 60,
              "content": "CompletedAt     *time.Time     `json:\"completed_at,omitempty\"`",
              "type": "code"
            },
            {
              "number": 61,
              "content": "ErrorLog        datatypes.JSON `gorm:\"type:json\" json:\"error_log,omitempty\"`",
              "type": "code"
            },
            {
              "number": 62,
              "content": "CreatedBy       string         `gorm:\"size:100\" json:\"created_by,omitempty\"`",
              "type": "code"
            },
            {
              "number": 63,
              "content": "CreatedAt       time.Time      `gorm:\"autoCreateTime\" json:\"created_at\"`",
              "type": "code"
            },
            {
              "number": 64,
              "content": "UpdatedAt       time.Time      `gorm:\"autoUpdateTime\" json:\"updated_at\"`",
              "type": "code"
            },
            {
              "number": 65,
              "content": "}",
              "type": "code"
            },
            {
              "number": 68,
              "content": "func (ImportSession) TableName() string {",
              "type": "code",
              "context": "in function: (ImportSession)"
            },
            {
              "number": 69,
              "content": "return \"import_sessions\"",
              "type": "code",
              "context": "in function: (ImportSession)"
            },
            {
              "number": 70,
              "content": "}",
              "type": "code",
              "context": "in function: (ImportSession)"
            },
            {
              "number": 73,
              "content": "func (s *ImportSession) BeforeCreate(tx *gorm.DB) error {",
              "type": "code",
              "context": "in function: (s"
            },
            {
              "number": 75,
              "content": "if s.ID == \"\" {",
              "type": "branch",
              "context": "in function: (s"
            },
            {
              "number": 76,
              "content": "s.ID = uuid.New().String()",
              "type": "code",
              "context": "in function: (s"
            },
            {
              "number": 77,
              "content": "}",
              "type": "code",
              "context": "in function: (s"
            },
            {
              "number": 80,
              "content": "if s.StartedAt.IsZero() {",
              "type": "branch",
              "context": "in function: (s"
            },
            {
              "number": 81,
              "content": "s.StartedAt = time.Now()",
              "type": "code",
              "context": "in function: (s"
            },
            {
              "number": 82,
              "content": "}",
              "type": "code",
              "context": "in function: (s"
            },
            {
              "number": 85,
              "content": "if s.Status == \"\" {",
              "type": "branch",
              "context": "in function: (s"
            },
            {
              "number": 86,
              "content": "s.Status = string(ImportStatusPending)",
              "type": "code",
              "context": "in function: (s"
            },
            {
              "number": 87,
              "content": "}",
              "type": "code",
              "context": "in function: (s"
            },
            {
              "number": 89,
              "content": "return s.validate()",
              "type": "code",
              "context": "in function: (s"
            },
            {
              "number": 90,
              "content": "}",
              "type": "code",
              "context": "in function: (s"
            },
            {
              "number": 93,
              "content": "func (s *ImportSession) BeforeSave(tx *gorm.DB) error {",
              "type": "code",
              "context": "in function: (s"
            },
            {
              "number": 94,
              "content": "return s.validate()",
              "type": "code",
              "context": "in function: (s"
            },
            {
              "number": 95,
              "content": "}",
              "type": "code",
              "context": "in function: (s"
            },
            {
              "number": 98,
              "content": "func (s *ImportSession) validate() error {",
              "type": "code",
              "context": "in function: (s"
            },
            {
              "number": 100,
              "content": "if err := s.validateID(); err != nil {",
              "type": "error-handling",
              "context": "in function: (s"
            },
            {
              "number": 101,
              "content": "return err",
              "type": "error-handling",
              "context": "in function: (s"
            },
            {
              "number": 102,
              "content": "}",
              "type": "code",
              "context": "in function: (s"
            },
            {
              "number": 105,
              "content": "if err := s.validateAccountType(); err != nil {",
              "type": "error-handling",
              "context": "in function: (s"
            },
            {
              "number": 106,
              "content": "return err",
              "type": "error-handling",
              "context": "in function: (s"
            },
            {
              "number": 107,
              "content": "}",
              "type": "code",
              "context": "in function: (s"
            },
            {
              "number": 110,
              "content": "if err := s.validateAccountID(); err != nil {",
              "type": "error-handling",
              "context": "in function: (s"
            },
            {
              "number": 111,
              "content": "return err",
              "type": "error-handling",
              "context": "in function: (s"
            },
            {
              "number": 112,
              "content": "}",
              "type": "code",
              "context": "in function: (s"
            },
            {
              "number": 115,
              "content": "if err := s.validateFileName(); err != nil {",
              "type": "error-handling",
              "context": "in function: (s"
            },
            {
              "number": 116,
              "content": "return err",
              "type": "error-handling",
              "context": "in function: (s"
            },
            {
              "number": 117,
              "content": "}",
              "type": "code",
              "context": "in function: (s"
            },
            {
              "number": 120,
              "content": "if err := s.validateFileSize(); err != nil {",
              "type": "error-handling",
              "context": "in function: (s"
            },
            {
              "number": 121,
              "content": "return err",
              "type": "error-handling",
              "context": "in function: (s"
            },
            {
              "number": 122,
              "content": "}",
              "type": "code",
              "context": "in function: (s"
            },
            {
              "number": 125,
              "content": "if err := s.validateStatus(); err != nil {",
              "type": "error-handling",
              "context": "in function: (s"
            },
            {
              "number": 126,
              "content": "return err",
              "type": "error-handling",
              "context": "in function: (s"
            },
            {
              "number": 127,
              "content": "}",
              "type": "code",
              "context": "in function: (s"
            },
            {
              "number": 130,
              "content": "if err := s.validateRowCounts(); err != nil {",
              "type": "error-handling",
              "context": "in function: (s"
            },
            {
              "number": 131,
              "content": "return err",
              "type": "error-handling",
              "context": "in function: (s"
            },
            {
              "number": 132,
              "content": "}",
              "type": "code",
              "context": "in function: (s"
            },
            {
              "number": 135,
              "content": "if s.CreatedBy != \"\" \u0026\u0026 len(s.CreatedBy) \u003e 100 {",
              "type": "branch",
              "context": "in function: (s"
            },
            {
              "number": 136,
              "content": "return fmt.Errorf(\"created_by field too long (max 100 characters)\")",
              "type": "code",
              "context": "in function: (s"
            },
            {
              "number": 137,
              "content": "}",
              "type": "code",
              "context": "in function: (s"
            },
            {
              "number": 139,
              "content": "return nil",
              "type": "code",
              "context": "in function: (s"
            },
            {
              "number": 140,
              "content": "}",
              "type": "code",
              "context": "in function: (s"
            },
            {
              "number": 143,
              "content": "func (s *ImportSession) validateID() error {",
              "type": "code",
              "context": "in function: (s"
            },
            {
              "number": 144,
              "content": "if s.ID == \"\" {",
              "type": "branch",
              "context": "in function: (s"
            },
            {
              "number": 145,
              "content": "return fmt.Errorf(\"ID cannot be empty\")",
              "type": "code",
              "context": "in function: (s"
            },
            {
              "number": 146,
              "content": "}",
              "type": "code",
              "context": "in function: (s"
            },
            {
              "number": 149,
              "content": "if _, err := uuid.Parse(s.ID); err != nil {",
              "type": "branch",
              "context": "in function: (s"
            },
            {
              "number": 150,
              "content": "return fmt.Errorf(\"invalid UUID format: %w\", err)",
              "type": "code",
              "context": "in function: (s"
            },
            {
              "number": 151,
              "content": "}",
              "type": "code",
              "context": "in function: (s"
            },
            {
              "number": 153,
              "content": "return nil",
              "type": "code",
              "context": "in function: (s"
            },
            {
              "number": 154,
              "content": "}",
              "type": "code",
              "context": "in function: (s"
            },
            {
              "number": 157,
              "content": "func (s *ImportSession) validateAccountType() error {",
              "type": "code",
              "context": "in function: (s"
            },
            {
              "number": 158,
              "content": "validTypes := []string{",
              "type": "code",
              "context": "in function: (s"
            },
            {
              "number": 159,
              "content": "string(AccountTypeCorporate),",
              "type": "code",
              "context": "in function: (s"
            },
            {
              "number": 160,
              "content": "string(AccountTypePersonal),",
              "type": "code",
              "context": "in function: (s"
            },
            {
              "number": 161,
              "content": "}",
              "type": "code",
              "context": "in function: (s"
            },
            {
              "number": 163,
              "content": "accountType := strings.ToLower(strings.TrimSpace(s.AccountType))",
              "type": "code",
              "context": "in function: (s"
            },
            {
              "number": 164,
              "content": "if accountType == \"\" {",
              "type": "branch",
              "context": "in function: (s"
            },
            {
              "number": 165,
              "content": "return fmt.Errorf(\"account type cannot be empty\")",
              "type": "code",
              "context": "in function: (s"
            },
            {
              "number": 166,
              "content": "}",
              "type": "code",
              "context": "in function: (s"
            },
            {
              "number": 168,
              "content": "for _, validType := range validTypes {",
              "type": "branch",
              "context": "in function: (s"
            },
            {
              "number": 169,
              "content": "if accountType == validType {",
              "type": "branch",
              "context": "in function: (s"
            },
            {
              "number": 170,
              "content": "s.AccountType = accountType // Normalize to lowercase",
              "type": "code",
              "context": "in function: (s"
            },
            {
              "number": 171,
              "content": "return nil",
              "type": "code",
              "context": "in function: (s"
            },
            {
              "number": 172,
              "content": "}",
              "type": "code",
              "context": "in function: (s"
            },
            {
              "number": 173,
              "content": "}",
              "type": "code",
              "context": "in function: (s"
            },
            {
              "number": 175,
              "content": "return fmt.Errorf(\"invalid account type: %s (must be one of: %s)\",",
              "type": "code",
              "context": "in function: (s"
            },
            {
              "number": 176,
              "content": "s.AccountType, strings.Join(validTypes, \", \"))",
              "type": "code",
              "context": "in function: (s"
            },
            {
              "number": 177,
              "content": "}",
              "type": "code",
              "context": "in function: (s"
            },
            {
              "number": 180,
              "content": "func (s *ImportSession) validateAccountID() error {",
              "type": "code",
              "context": "in function: (s"
            },
            {
              "number": 181,
              "content": "accountID := strings.TrimSpace(s.AccountID)",
              "type": "code",
              "context": "in function: (s"
            },
            {
              "number": 182,
              "content": "if accountID == \"\" {",
              "type": "branch",
              "context": "in function: (s"
            },
            {
              "number": 183,
              "content": "return fmt.Errorf(\"account ID cannot be empty\")",
              "type": "code",
              "context": "in function: (s"
            },
            {
              "number": 184,
              "content": "}",
              "type": "code",
              "context": "in function: (s"
            },
            {
              "number": 186,
              "content": "if len(accountID) \u003e 50 {",
              "type": "branch",
              "context": "in function: (s"
            },
            {
              "number": 187,
              "content": "return fmt.Errorf(\"account ID too long (max 50 characters)\")",
              "type": "code",
              "context": "in function: (s"
            },
            {
              "number": 188,
              "content": "}",
              "type": "code",
              "context": "in function: (s"
            },
            {
              "number": 191,
              "content": "pattern := `^[a-zA-Z0-9\\-_@.]+$`",
              "type": "code",
              "context": "in function: (s"
            },
            {
              "number": 192,
              "content": "if matched, _ := regexp.MatchString(pattern, accountID); !matched {",
              "type": "branch",
              "context": "in function: (s"
            },
            {
              "number": 193,
              "content": "return fmt.Errorf(\"account ID contains invalid characters\")",
              "type": "code",
              "context": "in function: (s"
            },
            {
              "number": 194,
              "content": "}",
              "type": "code",
              "context": "in function: (s"
            },
            {
              "number": 196,
              "content": "s.AccountID = accountID",
              "type": "code",
              "context": "in function: (s"
            },
            {
              "number": 197,
              "content": "return nil",
              "type": "code",
              "context": "in function: (s"
            },
            {
              "number": 198,
              "content": "}",
              "type": "code",
              "context": "in function: (s"
            },
            {
              "number": 201,
              "content": "func (s *ImportSession) validateFileName() error {",
              "type": "code",
              "context": "in function: (s"
            },
            {
              "number": 202,
              "content": "fileName := strings.TrimSpace(s.FileName)",
              "type": "code",
              "context": "in function: (s"
            },
            {
              "number": 203,
              "content": "if fileName == \"\" {",
              "type": "branch",
              "context": "in function: (s"
            },
            {
              "number": 204,
              "content": "return fmt.Errorf(\"file name cannot be empty\")",
              "type": "code",
              "context": "in function: (s"
            },
            {
              "number": 205,
              "content": "}",
              "type": "code",
              "context": "in function: (s"
            },
            {
              "number": 207,
              "content": "if len(fileName) \u003e 255 {",
              "type": "branch",
              "context": "in function: (s"
            },
            {
              "number": 208,
              "content": "return fmt.Errorf(\"file name too long (max 255 characters)\")",
              "type": "code",
              "context": "in function: (s"
            },
            {
              "number": 209,
              "content": "}",
              "type": "code",
              "context": "in function: (s"
            },
            {
              "number": 212,
              "content": "ext := strings.ToLower(filepath.Ext(fileName))",
              "type": "code",
              "context": "in function: (s"
            },
            {
              "number": 213,
              "content": "if ext != \".csv\" {",
              "type": "branch",
              "context": "in function: (s"
            },
            {
              "number": 214,
              "content": "return fmt.Errorf(\"file must have .csv extension\")",
              "type": "code",
              "context": "in function: (s"
            },
            {
              "number": 215,
              "content": "}",
              "type": "code",
              "context": "in function: (s"
            },
            {
              "number": 217,
              "content": "s.FileName = fileName",
              "type": "code",
              "context": "in function: (s"
            },
            {
              "number": 218,
              "content": "return nil",
              "type": "code",
              "context": "in function: (s"
            },
            {
              "number": 219,
              "content": "}",
              "type": "code",
              "context": "in function: (s"
            },
            {
              "number": 222,
              "content": "func (s *ImportSession) validateFileSize() error {",
              "type": "code",
              "context": "in function: (s"
            },
            {
              "number": 223,
              "content": "if s.FileSize \u003c= 0 {",
              "type": "branch",
              "context": "in function: (s"
            },
            {
              "number": 224,
              "content": "return fmt.Errorf(\"file size must be greater than 0\")",
              "type": "code",
              "context": "in function: (s"
            },
            {
              "number": 225,
              "content": "}",
              "type": "code",
              "context": "in function: (s"
            },
            {
              "number": 228,
              "content": "maxSize := int64(100 * 1024 * 1024)",
              "type": "code",
              "context": "in function: (s"
            },
            {
              "number": 229,
              "content": "if s.FileSize \u003e maxSize {",
              "type": "branch",
              "context": "in function: (s"
            },
            {
              "number": 230,
              "content": "return fmt.Errorf(\"file size too large (max 100MB)\")",
              "type": "code",
              "context": "in function: (s"
            },
            {
              "number": 231,
              "content": "}",
              "type": "code",
              "context": "in function: (s"
            },
            {
              "number": 233,
              "content": "return nil",
              "type": "code",
              "context": "in function: (s"
            },
            {
              "number": 234,
              "content": "}",
              "type": "code",
              "context": "in function: (s"
            },
            {
              "number": 237,
              "content": "func (s *ImportSession) validateStatus() error {",
              "type": "code",
              "context": "in function: (s"
            },
            {
              "number": 238,
              "content": "validStatuses := []string{",
              "type": "code",
              "context": "in function: (s"
            },
            {
              "number": 239,
              "content": "string(ImportStatusPending),",
              "type": "code",
              "context": "in function: (s"
            },
            {
              "number": 240,
              "content": "string(ImportStatusProcessing),",
              "type": "code",
              "context": "in function: (s"
            },
            {
              "number": 241,
              "content": "string(ImportStatusCompleted),",
              "type": "code",
              "context": "in function: (s"
            },
            {
              "number": 242,
              "content": "string(ImportStatusFailed),",
              "type": "code",
              "context": "in function: (s"
            },
            {
              "number": 243,
              "content": "string(ImportStatusCancelled),",
              "type": "code",
              "context": "in function: (s"
            },
            {
              "number": 244,
              "content": "}",
              "type": "code",
              "context": "in function: (s"
            },
            {
              "number": 246,
              "content": "status := strings.ToLower(strings.TrimSpace(s.Status))",
              "type": "code",
              "context": "in function: (s"
            },
            {
              "number": 247,
              "content": "if status == \"\" {",
              "type": "branch",
              "context": "in function: (s"
            },
            {
              "number": 248,
              "content": "return fmt.Errorf(\"status cannot be empty\")",
              "type": "code",
              "context": "in function: (s"
            },
            {
              "number": 249,
              "content": "}",
              "type": "code",
              "context": "in function: (s"
            },
            {
              "number": 251,
              "content": "for _, validStatus := range validStatuses {",
              "type": "branch",
              "context": "in function: (s"
            },
            {
              "number": 252,
              "content": "if status == validStatus {",
              "type": "branch",
              "context": "in function: (s"
            },
            {
              "number": 253,
              "content": "s.Status = status // Normalize to lowercase",
              "type": "code",
              "context": "in function: (s"
            },
            {
              "number": 254,
              "content": "return nil",
              "type": "code",
              "context": "in function: (s"
            },
            {
              "number": 255,
              "content": "}",
              "type": "code",
              "context": "in function: (s"
            },
            {
              "number": 256,
              "content": "}",
              "type": "code",
              "context": "in function: (s"
            },
            {
              "number": 258,
              "content": "return fmt.Errorf(\"invalid status: %s (must be one of: %s)\",",
              "type": "code",
              "context": "in function: (s"
            },
            {
              "number": 259,
              "content": "s.Status, strings.Join(validStatuses, \", \"))",
              "type": "code",
              "context": "in function: (s"
            },
            {
              "number": 260,
              "content": "}",
              "type": "code",
              "context": "in function: (s"
            },
            {
              "number": 263,
              "content": "func (s *ImportSession) validateRowCounts() error {",
              "type": "code",
              "context": "in function: (s"
            },
            {
              "number": 265,
              "content": "if s.TotalRows \u003c 0 {",
              "type": "branch",
              "context": "in function: (s"
            },
            {
              "number": 266,
              "content": "return fmt.Errorf(\"total rows cannot be negative\")",
              "type": "code",
              "context": "in function: (s"
            },
            {
              "number": 267,
              "content": "}",
              "type": "code",
              "context": "in function: (s"
            },
            {
              "number": 268,
              "content": "if s.ProcessedRows \u003c 0 {",
              "type": "branch",
              "context": "in function: (s"
            },
            {
              "number": 269,
              "content": "return fmt.Errorf(\"processed rows cannot be negative\")",
              "type": "code",
              "context": "in function: (s"
            },
            {
              "number": 270,
              "content": "}",
              "type": "code",
              "context": "in function: (s"
            },
            {
              "number": 271,
              "content": "if s.SuccessRows \u003c 0 {",
              "type": "branch",
              "context": "in function: (s"
            },
            {
              "number": 272,
              "content": "return fmt.Errorf(\"success rows cannot be negative\")",
              "type": "code",
              "context": "in function: (s"
            },
            {
              "number": 273,
              "content": "}",
              "type": "code",
              "context": "in function: (s"
            },
            {
              "number": 274,
              "content": "if s.ErrorRows \u003c 0 {",
              "type": "branch",
              "context": "in function: (s"
            },
            {
              "number": 275,
              "content": "return fmt.Errorf(\"error rows cannot be negative\")",
              "type": "code",
              "context": "in function: (s"
            },
            {
              "number": 276,
              "content": "}",
              "type": "code",
              "context": "in function: (s"
            },
            {
              "number": 277,
              "content": "if s.DuplicateRows \u003c 0 {",
              "type": "branch",
              "context": "in function: (s"
            },
            {
              "number": 278,
              "content": "return fmt.Errorf(\"duplicate rows cannot be negative\")",
              "type": "code",
              "context": "in function: (s"
            },
            {
              "number": 279,
              "content": "}",
              "type": "code",
              "context": "in function: (s"
            },
            {
              "number": 282,
              "content": "expectedProcessed := s.SuccessRows + s.ErrorRows + s.DuplicateRows",
              "type": "code",
              "context": "in function: (s"
            },
            {
              "number": 283,
              "content": "if s.ProcessedRows != expectedProcessed {",
              "type": "branch",
              "context": "in function: (s"
            },
            {
              "number": 284,
              "content": "return fmt.Errorf(\"processed rows (%d) must equal sum of success (%d) + error (%d) + duplicate (%d) rows\",",
              "type": "code",
              "context": "in function: (s"
            },
            {
              "number": 285,
              "content": "s.ProcessedRows, s.SuccessRows, s.ErrorRows, s.DuplicateRows)",
              "type": "code",
              "context": "in function: (s"
            },
            {
              "number": 286,
              "content": "}",
              "type": "code",
              "context": "in function: (s"
            },
            {
              "number": 289,
              "content": "if s.ProcessedRows \u003e s.TotalRows {",
              "type": "branch",
              "context": "in function: (s"
            },
            {
              "number": 290,
              "content": "return fmt.Errorf(\"processed rows (%d) cannot exceed total rows (%d)\",",
              "type": "code",
              "context": "in function: (s"
            },
            {
              "number": 291,
              "content": "s.ProcessedRows, s.TotalRows)",
              "type": "code",
              "context": "in function: (s"
            },
            {
              "number": 292,
              "content": "}",
              "type": "code",
              "context": "in function: (s"
            },
            {
              "number": 294,
              "content": "return nil",
              "type": "code",
              "context": "in function: (s"
            },
            {
              "number": 295,
              "content": "}",
              "type": "code",
              "context": "in function: (s"
            },
            {
              "number": 298,
              "content": "func (s *ImportSession) IsCompleted() bool {",
              "type": "code",
              "context": "in function: (s"
            },
            {
              "number": 299,
              "content": "return s.Status == string(ImportStatusCompleted) || s.Status == string(ImportStatusFailed)",
              "type": "code",
              "context": "in function: (s"
            },
            {
              "number": 300,
              "content": "}",
              "type": "code",
              "context": "in function: (s"
            },
            {
              "number": 303,
              "content": "func (s *ImportSession) IsFailed() bool {",
              "type": "code",
              "context": "in function: (s"
            },
            {
              "number": 304,
              "content": "return s.Status == string(ImportStatusFailed)",
              "type": "code",
              "context": "in function: (s"
            },
            {
              "number": 305,
              "content": "}",
              "type": "code",
              "context": "in function: (s"
            },
            {
              "number": 308,
              "content": "func (s *ImportSession) IsInProgress() bool {",
              "type": "code",
              "context": "in function: (s"
            },
            {
              "number": 309,
              "content": "return s.Status == string(ImportStatusProcessing)",
              "type": "code",
              "context": "in function: (s"
            },
            {
              "number": 310,
              "content": "}",
              "type": "code",
              "context": "in function: (s"
            },
            {
              "number": 313,
              "content": "func (s *ImportSession) IsPending() bool {",
              "type": "code",
              "context": "in function: (s"
            },
            {
              "number": 314,
              "content": "return s.Status == string(ImportStatusPending)",
              "type": "code",
              "context": "in function: (s"
            },
            {
              "number": 315,
              "content": "}",
              "type": "code",
              "context": "in function: (s"
            },
            {
              "number": 318,
              "content": "func (s *ImportSession) CanTransitionTo(newStatus string) bool {",
              "type": "code",
              "context": "in function: (s"
            },
            {
              "number": 319,
              "content": "currentStatus := ImportStatus(s.Status)",
              "type": "code",
              "context": "in function: (s"
            },
            {
              "number": 320,
              "content": "targetStatus := ImportStatus(newStatus)",
              "type": "code",
              "context": "in function: (s"
            },
            {
              "number": 322,
              "content": "switch currentStatus {",
              "type": "branch",
              "context": "in function: (s"
            },
            {
              "number": 323,
              "content": "case ImportStatusPending:",
              "type": "branch",
              "context": "in function: (s"
            },
            {
              "number": 324,
              "content": "return targetStatus == ImportStatusProcessing || targetStatus == ImportStatusCancelled",
              "type": "code",
              "context": "in function: (s"
            },
            {
              "number": 325,
              "content": "case ImportStatusProcessing:",
              "type": "branch",
              "context": "in function: (s"
            },
            {
              "number": 326,
              "content": "return targetStatus == ImportStatusCompleted || targetStatus == ImportStatusFailed || targetStatus == ImportStatusCancelled",
              "type": "code",
              "context": "in function: (s"
            },
            {
              "number": 327,
              "content": "case ImportStatusCompleted, ImportStatusFailed, ImportStatusCancelled:",
              "type": "branch",
              "context": "in function: (s"
            },
            {
              "number": 328,
              "content": "return false // Terminal states",
              "type": "code",
              "context": "in function: (s"
            },
            {
              "number": 329,
              "content": "default:",
              "type": "code",
              "context": "in function: (s"
            },
            {
              "number": 330,
              "content": "return false",
              "type": "code",
              "context": "in function: (s"
            },
            {
              "number": 331,
              "content": "}",
              "type": "code",
              "context": "in function: (s"
            },
            {
              "number": 332,
              "content": "}",
              "type": "code",
              "context": "in function: (s"
            },
            {
              "number": 335,
              "content": "func (s *ImportSession) StartProcessing() error {",
              "type": "code",
              "context": "in function: (s"
            },
            {
              "number": 336,
              "content": "if !s.CanTransitionTo(string(ImportStatusProcessing)) {",
              "type": "branch",
              "context": "in function: (s"
            },
            {
              "number": 337,
              "content": "return fmt.Errorf(\"cannot start processing from status: %s\", s.Status)",
              "type": "code",
              "context": "in function: (s"
            },
            {
              "number": 338,
              "content": "}",
              "type": "code",
              "context": "in function: (s"
            },
            {
              "number": 339,
              "content": "s.Status = string(ImportStatusProcessing)",
              "type": "code",
              "context": "in function: (s"
            },
            {
              "number": 340,
              "content": "if s.StartedAt.IsZero() {",
              "type": "branch",
              "context": "in function: (s"
            },
            {
              "number": 341,
              "content": "s.StartedAt = time.Now()",
              "type": "code",
              "context": "in function: (s"
            },
            {
              "number": 342,
              "content": "}",
              "type": "code",
              "context": "in function: (s"
            },
            {
              "number": 343,
              "content": "return nil",
              "type": "code",
              "context": "in function: (s"
            },
            {
              "number": 344,
              "content": "}",
              "type": "code",
              "context": "in function: (s"
            },
            {
              "number": 347,
              "content": "func (s *ImportSession) Complete() error {",
              "type": "code",
              "context": "in function: (s"
            },
            {
              "number": 348,
              "content": "if !s.CanTransitionTo(string(ImportStatusCompleted)) {",
              "type": "branch",
              "context": "in function: (s"
            },
            {
              "number": 349,
              "content": "return fmt.Errorf(\"cannot complete from status: %s\", s.Status)",
              "type": "code",
              "context": "in function: (s"
            },
            {
              "number": 350,
              "content": "}",
              "type": "code",
              "context": "in function: (s"
            },
            {
              "number": 351,
              "content": "s.Status = string(ImportStatusCompleted)",
              "type": "code",
              "context": "in function: (s"
            },
            {
              "number": 352,
              "content": "now := time.Now()",
              "type": "code",
              "context": "in function: (s"
            },
            {
              "number": 353,
              "content": "s.CompletedAt = \u0026now",
              "type": "code",
              "context": "in function: (s"
            },
            {
              "number": 354,
              "content": "return nil",
              "type": "code",
              "context": "in function: (s"
            },
            {
              "number": 355,
              "content": "}",
              "type": "code",
              "context": "in function: (s"
            },
            {
              "number": 358,
              "content": "func (s *ImportSession) Fail() error {",
              "type": "code",
              "context": "in function: (s"
            },
            {
              "number": 359,
              "content": "if !s.CanTransitionTo(string(ImportStatusFailed)) {",
              "type": "branch",
              "context": "in function: (s"
            },
            {
              "number": 360,
              "content": "return fmt.Errorf(\"cannot fail from status: %s\", s.Status)",
              "type": "code",
              "context": "in function: (s"
            },
            {
              "number": 361,
              "content": "}",
              "type": "code",
              "context": "in function: (s"
            },
            {
              "number": 362,
              "content": "s.Status = string(ImportStatusFailed)",
              "type": "code",
              "context": "in function: (s"
            },
            {
              "number": 363,
              "content": "now := time.Now()",
              "type": "code",
              "context": "in function: (s"
            },
            {
              "number": 364,
              "content": "s.CompletedAt = \u0026now",
              "type": "code",
              "context": "in function: (s"
            },
            {
              "number": 365,
              "content": "return nil",
              "type": "code",
              "context": "in function: (s"
            },
            {
              "number": 366,
              "content": "}",
              "type": "code",
              "context": "in function: (s"
            },
            {
              "number": 369,
              "content": "func (s *ImportSession) Cancel() error {",
              "type": "code",
              "context": "in function: (s"
            },
            {
              "number": 370,
              "content": "if !s.CanTransitionTo(string(ImportStatusCancelled)) {",
              "type": "branch",
              "context": "in function: (s"
            },
            {
              "number": 371,
              "content": "return fmt.Errorf(\"cannot cancel from status: %s\", s.Status)",
              "type": "code",
              "context": "in function: (s"
            },
            {
              "number": 372,
              "content": "}",
              "type": "code",
              "context": "in function: (s"
            },
            {
              "number": 373,
              "content": "s.Status = string(ImportStatusCancelled)",
              "type": "code",
              "context": "in function: (s"
            },
            {
              "number": 374,
              "content": "now := time.Now()",
              "type": "code",
              "context": "in function: (s"
            },
            {
              "number": 375,
              "content": "s.CompletedAt = \u0026now",
              "type": "code",
              "context": "in function: (s"
            },
            {
              "number": 376,
              "content": "return nil",
              "type": "code",
              "context": "in function: (s"
            },
            {
              "number": 377,
              "content": "}",
              "type": "code",
              "context": "in function: (s"
            },
            {
              "number": 380,
              "content": "func (s *ImportSession) AddError(rowNumber int, errorType, errorMessage, rawData string) error {",
              "type": "code",
              "context": "in function: (s"
            },
            {
              "number": 381,
              "content": "var errors []ImportError",
              "type": "code",
              "context": "in function: (s"
            },
            {
              "number": 384,
              "content": "if s.ErrorLog != nil {",
              "type": "branch",
              "context": "in function: (s"
            },
            {
              "number": 385,
              "content": "if err := json.Unmarshal([]byte(s.ErrorLog), \u0026errors); err != nil {",
              "type": "error-handling",
              "context": "in function: (s"
            },
            {
              "number": 386,
              "content": "return fmt.Errorf(\"failed to unmarshal existing errors: %w\", err)",
              "type": "code",
              "context": "in function: (s"
            },
            {
              "number": 387,
              "content": "}",
              "type": "code",
              "context": "in function: (s"
            },
            {
              "number": 388,
              "content": "}",
              "type": "code",
              "context": "in function: (s"
            },
            {
              "number": 391,
              "content": "newError := ImportError{",
              "type": "code",
              "context": "in function: (s"
            },
            {
              "number": 392,
              "content": "RowNumber:    rowNumber,",
              "type": "code",
              "context": "in function: (s"
            },
            {
              "number": 393,
              "content": "ErrorType:    errorType,",
              "type": "code",
              "context": "in function: (s"
            },
            {
              "number": 394,
              "content": "ErrorMessage: errorMessage,",
              "type": "code",
              "context": "in function: (s"
            },
            {
              "number": 395,
              "content": "RawData:      rawData,",
              "type": "code",
              "context": "in function: (s"
            },
            {
              "number": 396,
              "content": "}",
              "type": "code",
              "context": "in function: (s"
            },
            {
              "number": 397,
              "content": "errors = append(errors, newError)",
              "type": "code",
              "context": "in function: (s"
            },
            {
              "number": 400,
              "content": "jsonData, err := json.Marshal(errors)",
              "type": "code",
              "context": "in function: (s"
            },
            {
              "number": 401,
              "content": "if err != nil {",
              "type": "error-handling",
              "context": "in function: (s"
            },
            {
              "number": 402,
              "content": "return fmt.Errorf(\"failed to marshal errors: %w\", err)",
              "type": "code",
              "context": "in function: (s"
            },
            {
              "number": 403,
              "content": "}",
              "type": "code",
              "context": "in function: (s"
            },
            {
              "number": 404,
              "content": "s.ErrorLog = datatypes.JSON(jsonData)",
              "type": "code",
              "context": "in function: (s"
            },
            {
              "number": 405,
              "content": "return nil",
              "type": "code",
              "context": "in function: (s"
            },
            {
              "number": 406,
              "content": "}",
              "type": "code",
              "context": "in function: (s"
            },
            {
              "number": 409,
              "content": "func (s *ImportSession) GetErrors() ([]ImportError, error) {",
              "type": "code",
              "context": "in function: (s"
            },
            {
              "number": 410,
              "content": "if s.ErrorLog == nil {",
              "type": "branch",
              "context": "in function: (s"
            },
            {
              "number": 411,
              "content": "return nil, nil",
              "type": "code",
              "context": "in function: (s"
            },
            {
              "number": 412,
              "content": "}",
              "type": "code",
              "context": "in function: (s"
            },
            {
              "number": 414,
              "content": "var errors []ImportError",
              "type": "code",
              "context": "in function: (s"
            },
            {
              "number": 415,
              "content": "if err := json.Unmarshal([]byte(s.ErrorLog), \u0026errors); err != nil {",
              "type": "error-handling",
              "context": "in function: (s"
            },
            {
              "number": 416,
              "content": "return nil, fmt.Errorf(\"failed to unmarshal errors: %w\", err)",
              "type": "code",
              "context": "in function: (s"
            },
            {
              "number": 417,
              "content": "}",
              "type": "code",
              "context": "in function: (s"
            },
            {
              "number": 419,
              "content": "return errors, nil",
              "type": "error-handling",
              "context": "in function: (s"
            },
            {
              "number": 420,
              "content": "}",
              "type": "code",
              "context": "in function: (s"
            },
            {
              "number": 423,
              "content": "func (s *ImportSession) GetProgressPercentage() float64 {",
              "type": "code",
              "context": "in function: (s"
            },
            {
              "number": 424,
              "content": "if s.TotalRows == 0 {",
              "type": "branch",
              "context": "in function: (s"
            },
            {
              "number": 425,
              "content": "return 0.0",
              "type": "code",
              "context": "in function: (s"
            },
            {
              "number": 426,
              "content": "}",
              "type": "code",
              "context": "in function: (s"
            },
            {
              "number": 427,
              "content": "return float64(s.ProcessedRows) / float64(s.TotalRows) * 100.0",
              "type": "code",
              "context": "in function: (s"
            },
            {
              "number": 428,
              "content": "}",
              "type": "code",
              "context": "in function: (s"
            },
            {
              "number": 431,
              "content": "func (s *ImportSession) GetSuccessRate() float64 {",
              "type": "code",
              "context": "in function: (s"
            },
            {
              "number": 432,
              "content": "if s.ProcessedRows == 0 {",
              "type": "branch",
              "context": "in function: (s"
            },
            {
              "number": 433,
              "content": "return 0.0",
              "type": "code",
              "context": "in function: (s"
            },
            {
              "number": 434,
              "content": "}",
              "type": "code",
              "context": "in function: (s"
            },
            {
              "number": 435,
              "content": "return float64(s.SuccessRows) / float64(s.ProcessedRows) * 100.0",
              "type": "code",
              "context": "in function: (s"
            },
            {
              "number": 436,
              "content": "}",
              "type": "code",
              "context": "in function: (s"
            },
            {
              "number": 439,
              "content": "func (s *ImportSession) GetDuration() time.Duration {",
              "type": "code",
              "context": "in function: (s"
            },
            {
              "number": 440,
              "content": "if s.CompletedAt != nil {",
              "type": "branch",
              "context": "in function: (s"
            },
            {
              "number": 441,
              "content": "return s.CompletedAt.Sub(s.StartedAt)",
              "type": "code",
              "context": "in function: (s"
            },
            {
              "number": 442,
              "content": "}",
              "type": "code",
              "context": "in function: (s"
            },
            {
              "number": 443,
              "content": "if s.IsInProgress() {",
              "type": "branch",
              "context": "in function: (s"
            },
            {
              "number": 444,
              "content": "return time.Since(s.StartedAt)",
              "type": "code",
              "context": "in function: (s"
            },
            {
              "number": 445,
              "content": "}",
              "type": "code",
              "context": "in function: (s"
            },
            {
              "number": 446,
              "content": "return 0",
              "type": "code",
              "context": "in function: (s"
            },
            {
              "number": 447,
              "content": "}",
              "type": "code",
              "context": "in function: (s"
            },
            {
              "number": 450,
              "content": "func (s *ImportSession) UpdateProgress(success, error, duplicate int) {",
              "type": "code",
              "context": "in function: (s"
            },
            {
              "number": 451,
              "content": "s.SuccessRows += success",
              "type": "code",
              "context": "in function: (s"
            },
            {
              "number": 452,
              "content": "s.ErrorRows += error",
              "type": "code",
              "context": "in function: (s"
            },
            {
              "number": 453,
              "content": "s.DuplicateRows += duplicate",
              "type": "code",
              "context": "in function: (s"
            },
            {
              "number": 454,
              "content": "s.ProcessedRows = s.SuccessRows + s.ErrorRows + s.DuplicateRows",
              "type": "code",
              "context": "in function: (s"
            },
            {
              "number": 455,
              "content": "}",
              "type": "code",
              "context": "in function: (s"
            },
            {
              "number": 460,
              "content": "func (s *ImportSession) Validate() error {",
              "type": "code",
              "context": "in function: (s"
            },
            {
              "number": 461,
              "content": "return s.validate()",
              "type": "code",
              "context": "in function: (s"
            },
            {
              "number": 462,
              "content": "}",
              "type": "code",
              "context": "in function: (s"
            },
            {
              "number": 465,
              "content": "func (s *ImportSession) BeforeUpdate() error {",
              "type": "code",
              "context": "in function: (s"
            },
            {
              "number": 467,
              "content": "s.StartedAt = time.Now()",
              "type": "code",
              "context": "in function: (s"
            },
            {
              "number": 468,
              "content": "return nil",
              "type": "code",
              "context": "in function: (s"
            },
            {
              "number": 469,
              "content": "}",
              "type": "code",
              "context": "in function: (s"
            },
            {
              "number": 472,
              "content": "func (s *ImportSession) GetTableName() string {",
              "type": "code",
              "context": "in function: (s"
            },
            {
              "number": 473,
              "content": "return s.TableName()",
              "type": "code",
              "context": "in function: (s"
            },
            {
              "number": 474,
              "content": "}",
              "type": "code",
              "context": "in function: (s"
            },
            {
              "number": 477,
              "content": "func (s *ImportSession) String() string {",
              "type": "code",
              "context": "in function: (s"
            },
            {
              "number": 478,
              "content": "return fmt.Sprintf(\"ImportSession{ID:%s, FileName:%s, FileSize:%d, AccountType:%s, Status:%s}\",",
              "type": "code",
              "context": "in function: (s"
            },
            {
              "number": 479,
              "content": "s.ID, s.FileName, s.FileSize, s.AccountType, s.Status)",
              "type": "code",
              "context": "in function: (s"
            },
            {
              "number": 480,
              "content": "}",
              "type": "code",
              "context": "in function: (s"
            },
            {
              "number": 483,
              "content": "func (s *ImportSession) SetError(errorMsg string) {",
              "type": "code",
              "context": "in function: (s"
            },
            {
              "number": 484,
              "content": "s.Status = string(ImportStatusFailed)",
              "type": "code",
              "context": "in function: (s"
            },
            {
              "number": 485,
              "content": "s.ErrorMessage = \u0026errorMsg",
              "type": "code",
              "context": "in function: (s"
            },
            {
              "number": 486,
              "content": "}",
              "type": "code",
              "context": "in function: (s"
            },
            {
              "number": 489,
              "content": "func (s *ImportSession) ClearError() {",
              "type": "code",
              "context": "in function: (s"
            },
            {
              "number": 490,
              "content": "s.ErrorMessage = nil",
              "type": "code",
              "context": "in function: (s"
            },
            {
              "number": 491,
              "content": "}",
              "type": "code",
              "context": "in function: (s"
            },
            {
              "number": 494,
              "content": "func (s *ImportSession) UpdateProgressWithCounts(processed, total int64) {",
              "type": "code",
              "context": "in function: (s"
            },
            {
              "number": 495,
              "content": "s.ProcessedRows = int(processed)",
              "type": "code",
              "context": "in function: (s"
            },
            {
              "number": 496,
              "content": "s.TotalRows = int(total)",
              "type": "code",
              "context": "in function: (s"
            },
            {
              "number": 498,
              "content": "if total \u003e 0 {",
              "type": "branch",
              "context": "in function: (s"
            },
            {
              "number": 499,
              "content": "s.ProgressPercent = float64(processed) / float64(total) * 100.0",
              "type": "code",
              "context": "in function: (s"
            },
            {
              "number": 500,
              "content": "} else {",
              "type": "code",
              "context": "in function: (s"
            },
            {
              "number": 501,
              "content": "s.ProgressPercent = 0.0",
              "type": "code",
              "context": "in function: (s"
            },
            {
              "number": 502,
              "content": "}",
              "type": "code",
              "context": "in function: (s"
            },
            {
              "number": 503,
              "content": "}",
              "type": "code",
              "context": "in function: (s"
            },
            {
              "number": 508,
              "content": "func IsValidImportStatus(status string) bool {",
              "type": "code",
              "context": "in function: IsValidImportStatus(status"
            },
            {
              "number": 509,
              "content": "validStatuses := []string{",
              "type": "code",
              "context": "in function: IsValidImportStatus(status"
            },
            {
              "number": 510,
              "content": "string(ImportStatusPending),",
              "type": "code",
              "context": "in function: IsValidImportStatus(status"
            },
            {
              "number": 511,
              "content": "string(ImportStatusProcessing),",
              "type": "code",
              "context": "in function: IsValidImportStatus(status"
            },
            {
              "number": 512,
              "content": "string(ImportStatusCompleted),",
              "type": "code",
              "context": "in function: IsValidImportStatus(status"
            },
            {
              "number": 513,
              "content": "string(ImportStatusFailed),",
              "type": "code",
              "context": "in function: IsValidImportStatus(status"
            },
            {
              "number": 514,
              "content": "string(ImportStatusCancelled),",
              "type": "code",
              "context": "in function: IsValidImportStatus(status"
            },
            {
              "number": 515,
              "content": "}",
              "type": "code",
              "context": "in function: IsValidImportStatus(status"
            },
            {
              "number": 517,
              "content": "for _, validStatus := range validStatuses {",
              "type": "branch",
              "context": "in function: IsValidImportStatus(status"
            },
            {
              "number": 518,
              "content": "if strings.ToLower(strings.TrimSpace(status)) == validStatus {",
              "type": "branch",
              "context": "in function: IsValidImportStatus(status"
            },
            {
              "number": 519,
              "content": "return true",
              "type": "code",
              "context": "in function: IsValidImportStatus(status"
            },
            {
              "number": 520,
              "content": "}",
              "type": "code",
              "context": "in function: IsValidImportStatus(status"
            },
            {
              "number": 521,
              "content": "}",
              "type": "code",
              "context": "in function: IsValidImportStatus(status"
            },
            {
              "number": 522,
              "content": "return false",
              "type": "code",
              "context": "in function: IsValidImportStatus(status"
            },
            {
              "number": 523,
              "content": "}",
              "type": "code",
              "context": "in function: IsValidImportStatus(status"
            },
            {
              "number": 526,
              "content": "func IsValidAccountType(accountType string) bool {",
              "type": "code",
              "context": "in function: IsValidAccountType(accountType"
            },
            {
              "number": 527,
              "content": "validTypes := []string{",
              "type": "code",
              "context": "in function: IsValidAccountType(accountType"
            },
            {
              "number": 528,
              "content": "string(AccountTypeCorporate),",
              "type": "code",
              "context": "in function: IsValidAccountType(accountType"
            },
            {
              "number": 529,
              "content": "string(AccountTypePersonal),",
              "type": "code",
              "context": "in function: IsValidAccountType(accountType"
            },
            {
              "number": 530,
              "content": "}",
              "type": "code",
              "context": "in function: IsValidAccountType(accountType"
            },
            {
              "number": 532,
              "content": "for _, validType := range validTypes {",
              "type": "branch",
              "context": "in function: IsValidAccountType(accountType"
            },
            {
              "number": 533,
              "content": "if strings.ToLower(strings.TrimSpace(accountType)) == validType {",
              "type": "branch",
              "context": "in function: IsValidAccountType(accountType"
            },
            {
              "number": 534,
              "content": "return true",
              "type": "code",
              "context": "in function: IsValidAccountType(accountType"
            },
            {
              "number": 535,
              "content": "}",
              "type": "code",
              "context": "in function: IsValidAccountType(accountType"
            },
            {
              "number": 536,
              "content": "}",
              "type": "code",
              "context": "in function: IsValidAccountType(accountType"
            },
            {
              "number": 537,
              "content": "return false",
              "type": "code",
              "context": "in function: IsValidAccountType(accountType"
            },
            {
              "number": 538,
              "content": "}",
              "type": "code",
              "context": "in function: IsValidAccountType(accountType"
            },
            {
              "number": 541,
              "content": "type ImportBatch struct {",
              "type": "code",
              "context": "in function: IsValidAccountType(accountType"
            },
            {
              "number": 542,
              "content": "ID           int64     `gorm:\"primaryKey;autoIncrement\" json:\"id\"`",
              "type": "code",
              "context": "in function: IsValidAccountType(accountType"
            },
            {
              "number": 543,
              "content": "SessionID    int64     `gorm:\"not null;index\" json:\"session_id\"`",
              "type": "code",
              "context": "in function: IsValidAccountType(accountType"
            },
            {
              "number": 544,
              "content": "BatchNumber  int       `gorm:\"not null\" json:\"batch_number\"`",
              "type": "code",
              "context": "in function: IsValidAccountType(accountType"
            },
            {
              "number": 545,
              "content": "RecordCount  int       `gorm:\"not null\" json:\"record_count\"`",
              "type": "code",
              "context": "in function: IsValidAccountType(accountType"
            },
            {
              "number": 546,
              "content": "Status       string    `gorm:\"size:20;not null\" json:\"status\"`",
              "type": "code",
              "context": "in function: IsValidAccountType(accountType"
            },
            {
              "number": 547,
              "content": "CreatedAt    time.Time `gorm:\"autoCreateTime\" json:\"created_at\"`",
              "type": "code",
              "context": "in function: IsValidAccountType(accountType"
            },
            {
              "number": 548,
              "content": "UpdatedAt    time.Time `gorm:\"autoUpdateTime\" json:\"updated_at\"`",
              "type": "code",
              "context": "in function: IsValidAccountType(accountType"
            },
            {
              "number": 549,
              "content": "}",
              "type": "code",
              "context": "in function: IsValidAccountType(accountType"
            },
            {
              "number": 552,
              "content": "func (b *ImportBatch) BeforeCreate() error {",
              "type": "code",
              "context": "in function: (b"
            },
            {
              "number": 553,
              "content": "now := time.Now()",
              "type": "code",
              "context": "in function: (b"
            },
            {
              "number": 554,
              "content": "if b.CreatedAt.IsZero() {",
              "type": "branch",
              "context": "in function: (b"
            },
            {
              "number": 555,
              "content": "b.CreatedAt = now",
              "type": "code",
              "context": "in function: (b"
            },
            {
              "number": 556,
              "content": "}",
              "type": "code",
              "context": "in function: (b"
            },
            {
              "number": 557,
              "content": "if b.UpdatedAt.IsZero() {",
              "type": "branch",
              "context": "in function: (b"
            },
            {
              "number": 558,
              "content": "b.UpdatedAt = now",
              "type": "code",
              "context": "in function: (b"
            },
            {
              "number": 559,
              "content": "}",
              "type": "code",
              "context": "in function: (b"
            },
            {
              "number": 560,
              "content": "return b.Validate()",
              "type": "code",
              "context": "in function: (b"
            },
            {
              "number": 561,
              "content": "}",
              "type": "code",
              "context": "in function: (b"
            },
            {
              "number": 564,
              "content": "func (b *ImportBatch) Validate() error {",
              "type": "code",
              "context": "in function: (b"
            },
            {
              "number": 565,
              "content": "if b.SessionID \u003c= 0 {",
              "type": "branch",
              "context": "in function: (b"
            },
            {
              "number": 566,
              "content": "return fmt.Errorf(\"SessionID is required\")",
              "type": "code",
              "context": "in function: (b"
            },
            {
              "number": 567,
              "content": "}",
              "type": "code",
              "context": "in function: (b"
            },
            {
              "number": 568,
              "content": "if b.BatchNumber \u003c= 0 {",
              "type": "branch",
              "context": "in function: (b"
            },
            {
              "number": 569,
              "content": "return fmt.Errorf(\"BatchNumber must be positive\")",
              "type": "code",
              "context": "in function: (b"
            },
            {
              "number": 570,
              "content": "}",
              "type": "code",
              "context": "in function: (b"
            },
            {
              "number": 571,
              "content": "if b.RecordCount \u003c 0 {",
              "type": "branch",
              "context": "in function: (b"
            },
            {
              "number": 572,
              "content": "return fmt.Errorf(\"RecordCount must be non-negative\")",
              "type": "code",
              "context": "in function: (b"
            },
            {
              "number": 573,
              "content": "}",
              "type": "code",
              "context": "in function: (b"
            },
            {
              "number": 574,
              "content": "return nil",
              "type": "code",
              "context": "in function: (b"
            },
            {
              "number": 575,
              "content": "}",
              "type": "code",
              "context": "in function: (b"
            }
          ],
          "functions": [
            {
              "name": "TableName",
              "start_line": 68,
              "end_line": 70,
              "coverage": 0,
              "uncovered_lines": [
                68,
                69,
                70
              ]
            },
            {
              "name": "BeforeCreate",
              "start_line": 73,
              "end_line": 90,
              "coverage": 0,
              "uncovered_lines": [
                73,
                75,
                76,
                77,
                80,
                81,
                82,
                85,
                86,
                87,
                89,
                90
              ]
            },
            {
              "name": "BeforeSave",
              "start_line": 93,
              "end_line": 95,
              "coverage": 0,
              "uncovered_lines": [
                93,
                94,
                95
              ]
            },
            {
              "name": "validate",
              "start_line": 98,
              "end_line": 140,
              "coverage": 0,
              "uncovered_lines": [
                98,
                100,
                101,
                102,
                105,
                106,
                107,
                110,
                111,
                112,
                115,
                116,
                117,
                120,
                121,
                122,
                125,
                126,
                127,
                130,
                131,
                132,
                135,
                136,
                137,
                139,
                140
              ]
            },
            {
              "name": "validateID",
              "start_line": 143,
              "end_line": 154,
              "coverage": 0,
              "uncovered_lines": [
                143,
                144,
                145,
                146,
                149,
                150,
                151,
                153,
                154
              ]
            },
            {
              "name": "validateAccountType",
              "start_line": 157,
              "end_line": 177,
              "coverage": 0,
              "uncovered_lines": [
                157,
                158,
                159,
                160,
                161,
                163,
                164,
                165,
                166,
                168,
                169,
                170,
                171,
                172,
                173,
                175,
                176,
                177
              ]
            },
            {
              "name": "validateAccountID",
              "start_line": 180,
              "end_line": 198,
              "coverage": 0,
              "uncovered_lines": [
                180,
                181,
                182,
                183,
                184,
                186,
                187,
                188,
                191,
                192,
                193,
                194,
                196,
                197,
                198
              ]
            },
            {
              "name": "validateFileName",
              "start_line": 201,
              "end_line": 219,
              "coverage": 0,
              "uncovered_lines": [
                201,
                202,
                203,
                204,
                205,
                207,
                208,
                209,
                212,
                213,
                214,
                215,
                217,
                218,
                219
              ]
            },
            {
              "name": "validateFileSize",
              "start_line": 222,
              "end_line": 234,
              "coverage": 0,
              "uncovered_lines": [
                222,
                223,
                224,
                225,
                228,
                229,
                230,
                231,
                233,
                234
              ]
            },
            {
              "name": "validateStatus",
              "start_line": 237,
              "end_line": 260,
              "coverage": 0,
              "uncovered_lines": [
                237,
                238,
                239,
                240,
                241,
                242,
                243,
                244,
                246,
                247,
                248,
                249,
                251,
                252,
                253,
                254,
                255,
                256,
                258,
                259,
                260
              ]
            },
            {
              "name": "validateRowCounts",
              "start_line": 263,
              "end_line": 295,
              "coverage": 0,
              "uncovered_lines": [
                263,
                265,
                266,
                267,
                268,
                269,
                270,
                271,
                272,
                273,
                274,
                275,
                276,
                277,
                278,
                279,
                282,
                283,
                284,
                285,
                286,
                289,
                290,
                291,
                292,
                294,
                295
              ]
            },
            {
              "name": "IsCompleted",
              "start_line": 298,
              "end_line": 300,
              "coverage": 0,
              "uncovered_lines": [
                298,
                299,
                300
              ]
            },
            {
              "name": "IsFailed",
              "start_line": 303,
              "end_line": 305,
              "coverage": 0,
              "uncovered_lines": [
                303,
                304,
                305
              ]
            },
            {
              "name": "IsInProgress",
              "start_line": 308,
              "end_line": 310,
              "coverage": 0,
              "uncovered_lines": [
                308,
                309,
                310
              ]
            },
            {
              "name": "IsPending",
              "start_line": 313,
              "end_line": 315,
              "coverage": 0,
              "uncovered_lines": [
                313,
                314,
                315
              ]
            },
            {
              "name": "CanTransitionTo",
              "start_line": 318,
              "end_line": 332,
              "coverage": 0,
              "uncovered_lines": [
                318,
                319,
                320,
                322,
                323,
                324,
                325,
                326,
                327,
                328,
                329,
                330,
                331,
                332
              ]
            },
            {
              "name": "StartProcessing",
              "start_line": 335,
              "end_line": 344,
              "coverage": 0,
              "uncovered_lines": [
                335,
                336,
                337,
                338,
                339,
                340,
                341,
                342,
                343,
                344
              ]
            },
            {
              "name": "Complete",
              "start_line": 347,
              "end_line": 355,
              "coverage": 0,
              "uncovered_lines": [
                347,
                348,
                349,
                350,
                351,
                352,
                353,
                354,
                355
              ]
            },
            {
              "name": "Fail",
              "start_line": 358,
              "end_line": 366,
              "coverage": 0,
              "uncovered_lines": [
                358,
                359,
                360,
                361,
                362,
                363,
                364,
                365,
                366
              ]
            },
            {
              "name": "Cancel",
              "start_line": 369,
              "end_line": 377,
              "coverage": 0,
              "uncovered_lines": [
                369,
                370,
                371,
                372,
                373,
                374,
                375,
                376,
                377
              ]
            },
            {
              "name": "AddError",
              "start_line": 380,
              "end_line": 406,
              "coverage": 0,
              "uncovered_lines": [
                380,
                381,
                384,
                385,
                386,
                387,
                388,
                391,
                392,
                393,
                394,
                395,
                396,
                397,
                400,
                401,
                402,
                403,
                404,
                405,
                406
              ]
            },
            {
              "name": "GetErrors",
              "start_line": 409,
              "end_line": 420,
              "coverage": 0,
              "uncovered_lines": [
                409,
                410,
                411,
                412,
                414,
                415,
                416,
                417,
                419,
                420
              ]
            },
            {
              "name": "GetProgressPercentage",
              "start_line": 423,
              "end_line": 428,
              "coverage": 0,
              "uncovered_lines": [
                423,
                424,
                425,
                426,
                427,
                428
              ]
            },
            {
              "name": "GetSuccessRate",
              "start_line": 431,
              "end_line": 436,
              "coverage": 0,
              "uncovered_lines": [
                431,
                432,
                433,
                434,
                435,
                436
              ]
            },
            {
              "name": "GetDuration",
              "start_line": 439,
              "end_line": 447,
              "coverage": 0,
              "uncovered_lines": [
                439,
                440,
                441,
                442,
                443,
                444,
                445,
                446,
                447
              ]
            },
            {
              "name": "UpdateProgress",
              "start_line": 450,
              "end_line": 455,
              "coverage": 0,
              "uncovered_lines": [
                450,
                451,
                452,
                453,
                454,
                455
              ]
            },
            {
              "name": "Validate",
              "start_line": 460,
              "end_line": 462,
              "coverage": 0,
              "uncovered_lines": [
                460,
                461,
                462
              ]
            },
            {
              "name": "BeforeUpdate",
              "start_line": 465,
              "end_line": 469,
              "coverage": 0,
              "uncovered_lines": [
                465,
                467,
                468,
                469
              ]
            },
            {
              "name": "GetTableName",
              "start_line": 472,
              "end_line": 474,
              "coverage": 0,
              "uncovered_lines": [
                472,
                473,
                474
              ]
            },
            {
              "name": "String",
              "start_line": 477,
              "end_line": 480,
              "coverage": 0,
              "uncovered_lines": [
                477,
                478,
                479,
                480
              ]
            },
            {
              "name": "SetError",
              "start_line": 483,
              "end_line": 486,
              "coverage": 0,
              "uncovered_lines": [
                483,
                484,
                485,
                486
              ]
            },
            {
              "name": "ClearError",
              "start_line": 489,
              "end_line": 491,
              "coverage": 0,
              "uncovered_lines": [
                489,
                490,
                491
              ]
            },
            {
              "name": "UpdateProgressWithCounts",
              "start_line": 494,
              "end_line": 503,
              "coverage": 0,
              "uncovered_lines": [
                494,
                495,
                496,
                498,
                499,
                500,
                501,
                502,
                503
              ]
            },
            {
              "name": "IsValidImportStatus",
              "start_line": 508,
              "end_line": 523,
              "coverage": 0,
              "uncovered_lines": [
                508,
                509,
                510,
                511,
                512,
                513,
                514,
                515,
                517,
                518,
                519,
                520,
                521,
                522,
                523
              ]
            },
            {
              "name": "IsValidAccountType",
              "start_line": 526,
              "end_line": 538,
              "coverage": 0,
              "uncovered_lines": [
                526,
                527,
                528,
                529,
                530,
                532,
                533,
                534,
                535,
                536,
                537,
                538
              ]
            },
            {
              "name": "BeforeCreate",
              "start_line": 552,
              "end_line": 561,
              "coverage": 0,
              "uncovered_lines": [
                552,
                553,
                554,
                555,
                556,
                557,
                558,
                559,
                560,
                561
              ]
            },
            {
              "name": "Validate",
              "start_line": 564,
              "end_line": 575,
              "coverage": 0,
              "uncovered_lines": [
                564,
                565,
                566,
                567,
                568,
                569,
                570,
                571,
                572,
                573,
                574,
                575
              ]
            }
          ]
        },
        "github.com/yhonda-ohishi/etc_meisai/src/models/statistics.go": {
          "name": "github.com/yhonda-ohishi/etc_meisai/src/models/statistics.go",
          "coverage": 0,
          "total_lines": 30,
          "covered_lines": 0,
          "uncovered_lines": [
            {
              "number": 6,
              "content": "type Statistics struct {",
              "type": "code"
            },
            {
              "number": 7,
              "content": "TotalRecords      int64     `json:\"total_records\"`",
              "type": "code"
            },
            {
              "number": 8,
              "content": "TotalAmount       int64     `json:\"total_amount\"`",
              "type": "code"
            },
            {
              "number": 9,
              "content": "UniqueVehicles    int       `json:\"unique_vehicles\"`",
              "type": "code"
            },
            {
              "number": 10,
              "content": "UniqueTollGates   int       `json:\"unique_toll_gates\"`",
              "type": "code"
            },
            {
              "number": 11,
              "content": "AverageAmount     float64   `json:\"average_amount\"`",
              "type": "code"
            },
            {
              "number": 12,
              "content": "MaxAmount         int       `json:\"max_amount\"`",
              "type": "code"
            },
            {
              "number": 13,
              "content": "MinAmount         int       `json:\"min_amount\"`",
              "type": "code"
            },
            {
              "number": 14,
              "content": "DateRangeStart    time.Time `json:\"date_range_start\"`",
              "type": "code"
            },
            {
              "number": 15,
              "content": "DateRangeEnd      time.Time `json:\"date_range_end\"`",
              "type": "code"
            },
            {
              "number": 16,
              "content": "LastUpdated       time.Time `json:\"last_updated\"`",
              "type": "code"
            },
            {
              "number": 17,
              "content": "ProcessingStatus  string    `json:\"processing_status\"`",
              "type": "code"
            },
            {
              "number": 18,
              "content": "ErrorCount        int       `json:\"error_count\"`",
              "type": "code"
            },
            {
              "number": 19,
              "content": "DuplicateCount    int       `json:\"duplicate_count\"`",
              "type": "code"
            },
            {
              "number": 20,
              "content": "MappedRecords     int       `json:\"mapped_records\"`",
              "type": "code"
            },
            {
              "number": 21,
              "content": "UnmappedRecords   int       `json:\"unmapped_records\"`",
              "type": "code"
            },
            {
              "number": 22,
              "content": "}",
              "type": "code"
            },
            {
              "number": 25,
              "content": "func NewStatistics() *Statistics {",
              "type": "code",
              "context": "in function: NewStatistics()"
            },
            {
              "number": 26,
              "content": "return \u0026Statistics{",
              "type": "code",
              "context": "in function: NewStatistics()"
            },
            {
              "number": 27,
              "content": "ProcessingStatus: \"idle\",",
              "type": "code",
              "context": "in function: NewStatistics()"
            },
            {
              "number": 28,
              "content": "LastUpdated:      time.Now(),",
              "type": "code",
              "context": "in function: NewStatistics()"
            },
            {
              "number": 29,
              "content": "}",
              "type": "code",
              "context": "in function: NewStatistics()"
            },
            {
              "number": 30,
              "content": "}",
              "type": "code",
              "context": "in function: NewStatistics()"
            }
          ],
          "functions": [
            {
              "name": "NewStatistics",
              "start_line": 25,
              "end_line": 30,
              "coverage": 0,
              "uncovered_lines": [
                25,
                26,
                27,
                28,
                29,
                30
              ]
            }
          ]
        },
        "github.com/yhonda-ohishi/etc_meisai/src/models/validation.go": {
          "name": "github.com/yhonda-ohishi/etc_meisai/src/models/validation.go",
          "coverage": 0,
          "total_lines": 390,
          "covered_lines": 0,
          "uncovered_lines": [
            {
              "number": 4,
              "content": "\"fmt\"",
              "type": "code"
            },
            {
              "number": 5,
              "content": "\"regexp\"",
              "type": "code"
            },
            {
              "number": 6,
              "content": "\"strings\"",
              "type": "code"
            },
            {
              "number": 7,
              "content": "\"time\"",
              "type": "code"
            },
            {
              "number": 8,
              "content": ")",
              "type": "code"
            },
            {
              "number": 11,
              "content": "type ValidationError struct {",
              "type": "code"
            },
            {
              "number": 12,
              "content": "Field   string `json:\"field\"`",
              "type": "code"
            },
            {
              "number": 13,
              "content": "Value   interface{} `json:\"value,omitempty\"`",
              "type": "code"
            },
            {
              "number": 14,
              "content": "Message string `json:\"message\"`",
              "type": "code"
            },
            {
              "number": 15,
              "content": "Code    string `json:\"code\"`",
              "type": "code"
            },
            {
              "number": 16,
              "content": "}",
              "type": "code"
            },
            {
              "number": 18,
              "content": "func (e ValidationError) Error() string {",
              "type": "code",
              "context": "in function: (e"
            },
            {
              "number": 19,
              "content": "return fmt.Sprintf(\"validation error on field '%s': %s\", e.Field, e.Message)",
              "type": "code",
              "context": "in function: (e"
            },
            {
              "number": 20,
              "content": "}",
              "type": "code",
              "context": "in function: (e"
            },
            {
              "number": 23,
              "content": "type ValidationResult struct {",
              "type": "code",
              "context": "in function: (e"
            },
            {
              "number": 24,
              "content": "Valid  bool               `json:\"valid\"`",
              "type": "code",
              "context": "in function: (e"
            },
            {
              "number": 25,
              "content": "Errors []ValidationError  `json:\"errors,omitempty\"`",
              "type": "code",
              "context": "in function: (e"
            },
            {
              "number": 26,
              "content": "}",
              "type": "code",
              "context": "in function: (e"
            },
            {
              "number": 29,
              "content": "func (vr *ValidationResult) AddError(field, message, code string, value interface{}) {",
              "type": "code",
              "context": "in function: (vr"
            },
            {
              "number": 30,
              "content": "vr.Valid = false",
              "type": "code",
              "context": "in function: (vr"
            },
            {
              "number": 31,
              "content": "vr.Errors = append(vr.Errors, ValidationError{",
              "type": "code",
              "context": "in function: (vr"
            },
            {
              "number": 32,
              "content": "Field:   field,",
              "type": "code",
              "context": "in function: (vr"
            },
            {
              "number": 33,
              "content": "Value:   value,",
              "type": "code",
              "context": "in function: (vr"
            },
            {
              "number": 34,
              "content": "Message: message,",
              "type": "code",
              "context": "in function: (vr"
            },
            {
              "number": 35,
              "content": "Code:    code,",
              "type": "code",
              "context": "in function: (vr"
            },
            {
              "number": 36,
              "content": "})",
              "type": "code",
              "context": "in function: (vr"
            },
            {
              "number": 37,
              "content": "}",
              "type": "code",
              "context": "in function: (vr"
            },
            {
              "number": 40,
              "content": "func ValidateETCMeisai(etc *ETCMeisai) *ValidationResult {",
              "type": "code",
              "context": "in function: ValidateETCMeisai(etc"
            },
            {
              "number": 41,
              "content": "result := \u0026ValidationResult{Valid: true}",
              "type": "code",
              "context": "in function: ValidateETCMeisai(etc"
            },
            {
              "number": 44,
              "content": "if etc == nil {",
              "type": "branch",
              "context": "in function: ValidateETCMeisai(etc"
            },
            {
              "number": 45,
              "content": "result.AddError(\"etc\", \"ETC record cannot be nil\", \"NIL_RECORD\", nil)",
              "type": "code",
              "context": "in function: ValidateETCMeisai(etc"
            },
            {
              "number": 46,
              "content": "return result",
              "type": "code",
              "context": "in function: ValidateETCMeisai(etc"
            },
            {
              "number": 47,
              "content": "}",
              "type": "code",
              "context": "in function: ValidateETCMeisai(etc"
            },
            {
              "number": 50,
              "content": "if etc.UseDate.IsZero() {",
              "type": "branch",
              "context": "in function: ValidateETCMeisai(etc"
            },
            {
              "number": 51,
              "content": "result.AddError(\"use_date\", \"UseDate is required\", \"REQUIRED\", nil)",
              "type": "code",
              "context": "in function: ValidateETCMeisai(etc"
            },
            {
              "number": 52,
              "content": "}",
              "type": "code",
              "context": "in function: ValidateETCMeisai(etc"
            },
            {
              "number": 54,
              "content": "if etc.Amount \u003c= 0 {",
              "type": "branch",
              "context": "in function: ValidateETCMeisai(etc"
            },
            {
              "number": 55,
              "content": "result.AddError(\"amount\", \"Amount must be positive\", \"POSITIVE_REQUIRED\", etc.Amount)",
              "type": "code",
              "context": "in function: ValidateETCMeisai(etc"
            },
            {
              "number": 56,
              "content": "}",
              "type": "code",
              "context": "in function: ValidateETCMeisai(etc"
            },
            {
              "number": 58,
              "content": "if strings.TrimSpace(etc.EntryIC) == \"\" {",
              "type": "branch",
              "context": "in function: ValidateETCMeisai(etc"
            },
            {
              "number": 59,
              "content": "result.AddError(\"entry_ic\", \"EntryIC is required\", \"REQUIRED\", etc.EntryIC)",
              "type": "code",
              "context": "in function: ValidateETCMeisai(etc"
            },
            {
              "number": 60,
              "content": "}",
              "type": "code",
              "context": "in function: ValidateETCMeisai(etc"
            },
            {
              "number": 62,
              "content": "if strings.TrimSpace(etc.ExitIC) == \"\" {",
              "type": "branch",
              "context": "in function: ValidateETCMeisai(etc"
            },
            {
              "number": 63,
              "content": "result.AddError(\"exit_ic\", \"ExitIC is required\", \"REQUIRED\", etc.ExitIC)",
              "type": "code",
              "context": "in function: ValidateETCMeisai(etc"
            },
            {
              "number": 64,
              "content": "}",
              "type": "code",
              "context": "in function: ValidateETCMeisai(etc"
            },
            {
              "number": 67,
              "content": "if !etc.UseDate.IsZero() {",
              "type": "branch",
              "context": "in function: ValidateETCMeisai(etc"
            },
            {
              "number": 69,
              "content": "if etc.UseDate.After(time.Now()) {",
              "type": "branch",
              "context": "in function: ValidateETCMeisai(etc"
            },
            {
              "number": 70,
              "content": "result.AddError(\"use_date\", \"UseDate cannot be in the future\", \"FUTURE_DATE\", etc.UseDate)",
              "type": "code",
              "context": "in function: ValidateETCMeisai(etc"
            },
            {
              "number": 71,
              "content": "}",
              "type": "code",
              "context": "in function: ValidateETCMeisai(etc"
            },
            {
              "number": 74,
              "content": "twoYearsAgo := time.Now().AddDate(-2, 0, 0)",
              "type": "code",
              "context": "in function: ValidateETCMeisai(etc"
            },
            {
              "number": 75,
              "content": "if etc.UseDate.Before(twoYearsAgo) {",
              "type": "branch",
              "context": "in function: ValidateETCMeisai(etc"
            },
            {
              "number": 76,
              "content": "result.AddError(\"use_date\", \"UseDate cannot be older than 2 years\", \"TOO_OLD\", etc.UseDate)",
              "type": "code",
              "context": "in function: ValidateETCMeisai(etc"
            },
            {
              "number": 77,
              "content": "}",
              "type": "code",
              "context": "in function: ValidateETCMeisai(etc"
            },
            {
              "number": 78,
              "content": "}",
              "type": "code",
              "context": "in function: ValidateETCMeisai(etc"
            },
            {
              "number": 81,
              "content": "if etc.UseTime != \"\" {",
              "type": "branch",
              "context": "in function: ValidateETCMeisai(etc"
            },
            {
              "number": 82,
              "content": "if !isValidTimeFormat(etc.UseTime) {",
              "type": "branch",
              "context": "in function: ValidateETCMeisai(etc"
            },
            {
              "number": 83,
              "content": "result.AddError(\"use_time\", \"UseTime must be in HH:MM format\", \"INVALID_FORMAT\", etc.UseTime)",
              "type": "code",
              "context": "in function: ValidateETCMeisai(etc"
            },
            {
              "number": 84,
              "content": "}",
              "type": "code",
              "context": "in function: ValidateETCMeisai(etc"
            },
            {
              "number": 85,
              "content": "}",
              "type": "code",
              "context": "in function: ValidateETCMeisai(etc"
            },
            {
              "number": 88,
              "content": "if len(etc.ETCNumber) \u003e 20 {",
              "type": "branch",
              "context": "in function: ValidateETCMeisai(etc"
            },
            {
              "number": 89,
              "content": "result.AddError(\"etc_number\", \"ETCNumber cannot exceed 20 characters\", \"MAX_LENGTH\", etc.ETCNumber)",
              "type": "code",
              "context": "in function: ValidateETCMeisai(etc"
            },
            {
              "number": 90,
              "content": "}",
              "type": "code",
              "context": "in function: ValidateETCMeisai(etc"
            },
            {
              "number": 92,
              "content": "if etc.ETCNumber != \"\" \u0026\u0026 !isValidETCNumber(etc.ETCNumber) {",
              "type": "branch",
              "context": "in function: ValidateETCMeisai(etc"
            },
            {
              "number": 93,
              "content": "result.AddError(\"etc_number\", \"ETCNumber contains invalid characters\", \"INVALID_FORMAT\", etc.ETCNumber)",
              "type": "code",
              "context": "in function: ValidateETCMeisai(etc"
            },
            {
              "number": 94,
              "content": "}",
              "type": "code",
              "context": "in function: ValidateETCMeisai(etc"
            },
            {
              "number": 97,
              "content": "if len(etc.CarNumber) \u003e 20 {",
              "type": "branch",
              "context": "in function: ValidateETCMeisai(etc"
            },
            {
              "number": 98,
              "content": "result.AddError(\"car_number\", \"CarNumber cannot exceed 20 characters\", \"MAX_LENGTH\", etc.CarNumber)",
              "type": "code",
              "context": "in function: ValidateETCMeisai(etc"
            },
            {
              "number": 99,
              "content": "}",
              "type": "code",
              "context": "in function: ValidateETCMeisai(etc"
            },
            {
              "number": 102,
              "content": "if len(etc.EntryIC) \u003e 100 {",
              "type": "branch",
              "context": "in function: ValidateETCMeisai(etc"
            },
            {
              "number": 103,
              "content": "result.AddError(\"entry_ic\", \"EntryIC cannot exceed 100 characters\", \"MAX_LENGTH\", etc.EntryIC)",
              "type": "code",
              "context": "in function: ValidateETCMeisai(etc"
            },
            {
              "number": 104,
              "content": "}",
              "type": "code",
              "context": "in function: ValidateETCMeisai(etc"
            },
            {
              "number": 106,
              "content": "if len(etc.ExitIC) \u003e 100 {",
              "type": "branch",
              "context": "in function: ValidateETCMeisai(etc"
            },
            {
              "number": 107,
              "content": "result.AddError(\"exit_ic\", \"ExitIC cannot exceed 100 characters\", \"MAX_LENGTH\", etc.ExitIC)",
              "type": "code",
              "context": "in function: ValidateETCMeisai(etc"
            },
            {
              "number": 108,
              "content": "}",
              "type": "code",
              "context": "in function: ValidateETCMeisai(etc"
            },
            {
              "number": 111,
              "content": "if etc.Amount \u003e 100000 { // 10万円以上は異常値として扱う",
              "type": "branch",
              "context": "in function: ValidateETCMeisai(etc"
            },
            {
              "number": 112,
              "content": "result.AddError(\"amount\", \"Amount seems unusually high\", \"SUSPICIOUS_VALUE\", etc.Amount)",
              "type": "code",
              "context": "in function: ValidateETCMeisai(etc"
            },
            {
              "number": 113,
              "content": "}",
              "type": "code",
              "context": "in function: ValidateETCMeisai(etc"
            },
            {
              "number": 115,
              "content": "return result",
              "type": "code",
              "context": "in function: ValidateETCMeisai(etc"
            },
            {
              "number": 116,
              "content": "}",
              "type": "code",
              "context": "in function: ValidateETCMeisai(etc"
            },
            {
              "number": 119,
              "content": "func ValidateETCMeisaiMapping(mapping *ETCMeisaiMapping) *ValidationResult {",
              "type": "code",
              "context": "in function: ValidateETCMeisaiMapping(mapping"
            },
            {
              "number": 120,
              "content": "result := \u0026ValidationResult{Valid: true}",
              "type": "code",
              "context": "in function: ValidateETCMeisaiMapping(mapping"
            },
            {
              "number": 123,
              "content": "if mapping.ETCMeisaiID \u003c= 0 {",
              "type": "branch",
              "context": "in function: ValidateETCMeisaiMapping(mapping"
            },
            {
              "number": 124,
              "content": "result.AddError(\"etc_meisai_id\", \"ETCMeisaiID must be positive\", \"POSITIVE_REQUIRED\", mapping.ETCMeisaiID)",
              "type": "code",
              "context": "in function: ValidateETCMeisaiMapping(mapping"
            },
            {
              "number": 125,
              "content": "}",
              "type": "code",
              "context": "in function: ValidateETCMeisaiMapping(mapping"
            },
            {
              "number": 127,
              "content": "if strings.TrimSpace(mapping.DTakoRowID) == \"\" {",
              "type": "branch",
              "context": "in function: ValidateETCMeisaiMapping(mapping"
            },
            {
              "number": 128,
              "content": "result.AddError(\"dtako_row_id\", \"DTakoRowID is required\", \"REQUIRED\", mapping.DTakoRowID)",
              "type": "code",
              "context": "in function: ValidateETCMeisaiMapping(mapping"
            },
            {
              "number": 129,
              "content": "}",
              "type": "code",
              "context": "in function: ValidateETCMeisaiMapping(mapping"
            },
            {
              "number": 132,
              "content": "validMappingTypes := map[string]bool{\"auto\": true, \"manual\": true}",
              "type": "code",
              "context": "in function: ValidateETCMeisaiMapping(mapping"
            },
            {
              "number": 133,
              "content": "if !validMappingTypes[mapping.MappingType] {",
              "type": "branch",
              "context": "in function: ValidateETCMeisaiMapping(mapping"
            },
            {
              "number": 134,
              "content": "result.AddError(\"mapping_type\", \"MappingType must be 'auto' or 'manual'\", \"INVALID_ENUM\", mapping.MappingType)",
              "type": "code",
              "context": "in function: ValidateETCMeisaiMapping(mapping"
            },
            {
              "number": 135,
              "content": "}",
              "type": "code",
              "context": "in function: ValidateETCMeisaiMapping(mapping"
            },
            {
              "number": 138,
              "content": "if mapping.Confidence \u003c 0 || mapping.Confidence \u003e 1 {",
              "type": "branch",
              "context": "in function: ValidateETCMeisaiMapping(mapping"
            },
            {
              "number": 139,
              "content": "result.AddError(\"confidence\", \"Confidence must be between 0 and 1\", \"RANGE_ERROR\", mapping.Confidence)",
              "type": "code",
              "context": "in function: ValidateETCMeisaiMapping(mapping"
            },
            {
              "number": 140,
              "content": "}",
              "type": "code",
              "context": "in function: ValidateETCMeisaiMapping(mapping"
            },
            {
              "number": 143,
              "content": "if len(mapping.Notes) \u003e 500 {",
              "type": "branch",
              "context": "in function: ValidateETCMeisaiMapping(mapping"
            },
            {
              "number": 144,
              "content": "result.AddError(\"notes\", \"Notes cannot exceed 500 characters\", \"MAX_LENGTH\", mapping.Notes)",
              "type": "code",
              "context": "in function: ValidateETCMeisaiMapping(mapping"
            },
            {
              "number": 145,
              "content": "}",
              "type": "code",
              "context": "in function: ValidateETCMeisaiMapping(mapping"
            },
            {
              "number": 148,
              "content": "if mapping.DTakoRowID != \"\" \u0026\u0026 !isValidDTakoRowID(mapping.DTakoRowID) {",
              "type": "branch",
              "context": "in function: ValidateETCMeisaiMapping(mapping"
            },
            {
              "number": 149,
              "content": "result.AddError(\"dtako_row_id\", \"DTakoRowID has invalid format\", \"INVALID_FORMAT\", mapping.DTakoRowID)",
              "type": "code",
              "context": "in function: ValidateETCMeisaiMapping(mapping"
            },
            {
              "number": 150,
              "content": "}",
              "type": "code",
              "context": "in function: ValidateETCMeisaiMapping(mapping"
            },
            {
              "number": 152,
              "content": "return result",
              "type": "code",
              "context": "in function: ValidateETCMeisaiMapping(mapping"
            },
            {
              "number": 153,
              "content": "}",
              "type": "code",
              "context": "in function: ValidateETCMeisaiMapping(mapping"
            },
            {
              "number": 156,
              "content": "func ValidateETCImportBatch(batch *ETCImportBatch) *ValidationResult {",
              "type": "code",
              "context": "in function: ValidateETCImportBatch(batch"
            },
            {
              "number": 157,
              "content": "result := \u0026ValidationResult{Valid: true}",
              "type": "code",
              "context": "in function: ValidateETCImportBatch(batch"
            },
            {
              "number": 160,
              "content": "if strings.TrimSpace(batch.FileName) == \"\" {",
              "type": "branch",
              "context": "in function: ValidateETCImportBatch(batch"
            },
            {
              "number": 161,
              "content": "result.AddError(\"file_name\", \"FileName is required\", \"REQUIRED\", batch.FileName)",
              "type": "code",
              "context": "in function: ValidateETCImportBatch(batch"
            },
            {
              "number": 162,
              "content": "}",
              "type": "code",
              "context": "in function: ValidateETCImportBatch(batch"
            },
            {
              "number": 164,
              "content": "if batch.TotalRecords \u003c 0 {",
              "type": "branch",
              "context": "in function: ValidateETCImportBatch(batch"
            },
            {
              "number": 165,
              "content": "result.AddError(\"total_records\", \"TotalRecords cannot be negative\", \"NON_NEGATIVE\", batch.TotalRecords)",
              "type": "code",
              "context": "in function: ValidateETCImportBatch(batch"
            },
            {
              "number": 166,
              "content": "}",
              "type": "code",
              "context": "in function: ValidateETCImportBatch(batch"
            },
            {
              "number": 169,
              "content": "validStatuses := map[string]bool{",
              "type": "code",
              "context": "in function: ValidateETCImportBatch(batch"
            },
            {
              "number": 170,
              "content": "\"pending\":    true,",
              "type": "code",
              "context": "in function: ValidateETCImportBatch(batch"
            },
            {
              "number": 171,
              "content": "\"processing\": true,",
              "type": "code",
              "context": "in function: ValidateETCImportBatch(batch"
            },
            {
              "number": 172,
              "content": "\"completed\":  true,",
              "type": "code",
              "context": "in function: ValidateETCImportBatch(batch"
            },
            {
              "number": 173,
              "content": "\"failed\":     true,",
              "type": "code",
              "context": "in function: ValidateETCImportBatch(batch"
            },
            {
              "number": 174,
              "content": "\"cancelled\":  true,",
              "type": "code",
              "context": "in function: ValidateETCImportBatch(batch"
            },
            {
              "number": 175,
              "content": "}",
              "type": "code",
              "context": "in function: ValidateETCImportBatch(batch"
            },
            {
              "number": 176,
              "content": "if !validStatuses[batch.Status] {",
              "type": "branch",
              "context": "in function: ValidateETCImportBatch(batch"
            },
            {
              "number": 177,
              "content": "result.AddError(\"status\", \"Invalid status value\", \"INVALID_ENUM\", batch.Status)",
              "type": "code",
              "context": "in function: ValidateETCImportBatch(batch"
            },
            {
              "number": 178,
              "content": "}",
              "type": "code",
              "context": "in function: ValidateETCImportBatch(batch"
            },
            {
              "number": 181,
              "content": "if len(batch.FileName) \u003e 255 {",
              "type": "branch",
              "context": "in function: ValidateETCImportBatch(batch"
            },
            {
              "number": 182,
              "content": "result.AddError(\"file_name\", \"FileName cannot exceed 255 characters\", \"MAX_LENGTH\", batch.FileName)",
              "type": "code",
              "context": "in function: ValidateETCImportBatch(batch"
            },
            {
              "number": 183,
              "content": "}",
              "type": "code",
              "context": "in function: ValidateETCImportBatch(batch"
            },
            {
              "number": 186,
              "content": "if batch.ProcessedCount \u003e batch.TotalRecords {",
              "type": "branch",
              "context": "in function: ValidateETCImportBatch(batch"
            },
            {
              "number": 187,
              "content": "result.AddError(\"processed_count\", \"ProcessedCount cannot exceed TotalRecords\", \"LOGICAL_ERROR\", batch.ProcessedCount)",
              "type": "code",
              "context": "in function: ValidateETCImportBatch(batch"
            },
            {
              "number": 188,
              "content": "}",
              "type": "code",
              "context": "in function: ValidateETCImportBatch(batch"
            },
            {
              "number": 190,
              "content": "if batch.CreatedCount \u003e batch.ProcessedCount {",
              "type": "branch",
              "context": "in function: ValidateETCImportBatch(batch"
            },
            {
              "number": 191,
              "content": "result.AddError(\"created_count\", \"CreatedCount cannot exceed ProcessedCount\", \"LOGICAL_ERROR\", batch.CreatedCount)",
              "type": "code",
              "context": "in function: ValidateETCImportBatch(batch"
            },
            {
              "number": 192,
              "content": "}",
              "type": "code",
              "context": "in function: ValidateETCImportBatch(batch"
            },
            {
              "number": 195,
              "content": "if batch.StartTime != nil \u0026\u0026 batch.CompleteTime != nil {",
              "type": "branch",
              "context": "in function: ValidateETCImportBatch(batch"
            },
            {
              "number": 196,
              "content": "if batch.CompleteTime.Before(*batch.StartTime) {",
              "type": "branch",
              "context": "in function: ValidateETCImportBatch(batch"
            },
            {
              "number": 197,
              "content": "result.AddError(\"complete_time\", \"CompleteTime cannot be before StartTime\", \"LOGICAL_ERROR\", batch.CompleteTime)",
              "type": "code",
              "context": "in function: ValidateETCImportBatch(batch"
            },
            {
              "number": 198,
              "content": "}",
              "type": "code",
              "context": "in function: ValidateETCImportBatch(batch"
            },
            {
              "number": 199,
              "content": "}",
              "type": "code",
              "context": "in function: ValidateETCImportBatch(batch"
            },
            {
              "number": 201,
              "content": "return result",
              "type": "code",
              "context": "in function: ValidateETCImportBatch(batch"
            },
            {
              "number": 202,
              "content": "}",
              "type": "code",
              "context": "in function: ValidateETCImportBatch(batch"
            },
            {
              "number": 207,
              "content": "func isValidTimeFormat(timeStr string) bool {",
              "type": "code",
              "context": "in function: isValidTimeFormat(timeStr"
            },
            {
              "number": 208,
              "content": "matched, _ := regexp.MatchString(`^([01]?[0-9]|2[0-3]):[0-5][0-9]$`, timeStr)",
              "type": "code",
              "context": "in function: isValidTimeFormat(timeStr"
            },
            {
              "number": 209,
              "content": "return matched",
              "type": "code",
              "context": "in function: isValidTimeFormat(timeStr"
            },
            {
              "number": 210,
              "content": "}",
              "type": "code",
              "context": "in function: isValidTimeFormat(timeStr"
            },
            {
              "number": 213,
              "content": "func isValidETCNumber(etcNumber string) bool {",
              "type": "code",
              "context": "in function: isValidETCNumber(etcNumber"
            },
            {
              "number": 214,
              "content": "matched, _ := regexp.MatchString(`^[0-9]+$`, etcNumber)",
              "type": "code",
              "context": "in function: isValidETCNumber(etcNumber"
            },
            {
              "number": 215,
              "content": "return matched",
              "type": "code",
              "context": "in function: isValidETCNumber(etcNumber"
            },
            {
              "number": 216,
              "content": "}",
              "type": "code",
              "context": "in function: isValidETCNumber(etcNumber"
            },
            {
              "number": 219,
              "content": "func isValidDTakoRowID(rowID string) bool {",
              "type": "code",
              "context": "in function: isValidDTakoRowID(rowID"
            },
            {
              "number": 221,
              "content": "matched, _ := regexp.MatchString(`^[A-Za-z0-9\\-_]+$`, rowID)",
              "type": "code",
              "context": "in function: isValidDTakoRowID(rowID"
            },
            {
              "number": 222,
              "content": "return matched \u0026\u0026 len(rowID) \u003c= 50",
              "type": "code",
              "context": "in function: isValidDTakoRowID(rowID"
            },
            {
              "number": 223,
              "content": "}",
              "type": "code",
              "context": "in function: isValidDTakoRowID(rowID"
            },
            {
              "number": 226,
              "content": "type BatchValidationOptions struct {",
              "type": "code",
              "context": "in function: isValidDTakoRowID(rowID"
            },
            {
              "number": 227,
              "content": "StrictMode    bool `json:\"strict_mode\"`     // Fail on any warning",
              "type": "code",
              "context": "in function: isValidDTakoRowID(rowID"
            },
            {
              "number": 228,
              "content": "SkipDuplicates bool `json:\"skip_duplicates\"` // Skip duplicate hash validation",
              "type": "code",
              "context": "in function: isValidDTakoRowID(rowID"
            },
            {
              "number": 229,
              "content": "MaxErrors     int  `json:\"max_errors\"`      // Stop after N errors",
              "type": "code",
              "context": "in function: isValidDTakoRowID(rowID"
            },
            {
              "number": 230,
              "content": "}",
              "type": "code",
              "context": "in function: isValidDTakoRowID(rowID"
            },
            {
              "number": 233,
              "content": "func ValidateETCMeisaiBatch(records []*ETCMeisai, options *BatchValidationOptions) map[int]*ValidationResult {",
              "type": "code",
              "context": "in function: ValidateETCMeisaiBatch(records"
            },
            {
              "number": 234,
              "content": "if options == nil {",
              "type": "branch",
              "context": "in function: ValidateETCMeisaiBatch(records"
            },
            {
              "number": 235,
              "content": "options = \u0026BatchValidationOptions{",
              "type": "code",
              "context": "in function: ValidateETCMeisaiBatch(records"
            },
            {
              "number": 236,
              "content": "StrictMode:    false,",
              "type": "code",
              "context": "in function: ValidateETCMeisaiBatch(records"
            },
            {
              "number": 237,
              "content": "SkipDuplicates: false,",
              "type": "code",
              "context": "in function: ValidateETCMeisaiBatch(records"
            },
            {
              "number": 238,
              "content": "MaxErrors:     100,",
              "type": "code",
              "context": "in function: ValidateETCMeisaiBatch(records"
            },
            {
              "number": 239,
              "content": "}",
              "type": "code",
              "context": "in function: ValidateETCMeisaiBatch(records"
            },
            {
              "number": 240,
              "content": "}",
              "type": "code",
              "context": "in function: ValidateETCMeisaiBatch(records"
            },
            {
              "number": 242,
              "content": "results := make(map[int]*ValidationResult)",
              "type": "code",
              "context": "in function: ValidateETCMeisaiBatch(records"
            },
            {
              "number": 243,
              "content": "hashMap := make(map[string]int) // Track hashes for duplicate detection",
              "type": "code",
              "context": "in function: ValidateETCMeisaiBatch(records"
            },
            {
              "number": 244,
              "content": "errorCount := 0",
              "type": "code",
              "context": "in function: ValidateETCMeisaiBatch(records"
            },
            {
              "number": 246,
              "content": "for i, record := range records {",
              "type": "branch",
              "context": "in function: ValidateETCMeisaiBatch(records"
            },
            {
              "number": 247,
              "content": "if options.MaxErrors \u003e 0 \u0026\u0026 errorCount \u003e= options.MaxErrors {",
              "type": "branch",
              "context": "in function: ValidateETCMeisaiBatch(records"
            },
            {
              "number": 248,
              "content": "break",
              "type": "code",
              "context": "in function: ValidateETCMeisaiBatch(records"
            },
            {
              "number": 249,
              "content": "}",
              "type": "code",
              "context": "in function: ValidateETCMeisaiBatch(records"
            },
            {
              "number": 251,
              "content": "result := ValidateETCMeisai(record)",
              "type": "code",
              "context": "in function: ValidateETCMeisaiBatch(records"
            },
            {
              "number": 254,
              "content": "if !options.SkipDuplicates \u0026\u0026 record.Hash != \"\" {",
              "type": "branch",
              "context": "in function: ValidateETCMeisaiBatch(records"
            },
            {
              "number": 255,
              "content": "if existingIndex, exists := hashMap[record.Hash]; exists {",
              "type": "branch",
              "context": "in function: ValidateETCMeisaiBatch(records"
            },
            {
              "number": 256,
              "content": "result.AddError(\"hash\", fmt.Sprintf(\"Duplicate hash found with record at index %d\", existingIndex), \"DUPLICATE_HASH\", record.Hash)",
              "type": "code",
              "context": "in function: ValidateETCMeisaiBatch(records"
            },
            {
              "number": 257,
              "content": "} else {",
              "type": "code",
              "context": "in function: ValidateETCMeisaiBatch(records"
            },
            {
              "number": 258,
              "content": "hashMap[record.Hash] = i",
              "type": "code",
              "context": "in function: ValidateETCMeisaiBatch(records"
            },
            {
              "number": 259,
              "content": "}",
              "type": "code",
              "context": "in function: ValidateETCMeisaiBatch(records"
            },
            {
              "number": 260,
              "content": "}",
              "type": "code",
              "context": "in function: ValidateETCMeisaiBatch(records"
            },
            {
              "number": 262,
              "content": "if !result.Valid {",
              "type": "branch",
              "context": "in function: ValidateETCMeisaiBatch(records"
            },
            {
              "number": 263,
              "content": "errorCount++",
              "type": "code",
              "context": "in function: ValidateETCMeisaiBatch(records"
            },
            {
              "number": 264,
              "content": "}",
              "type": "code",
              "context": "in function: ValidateETCMeisaiBatch(records"
            },
            {
              "number": 266,
              "content": "results[i] = result",
              "type": "code",
              "context": "in function: ValidateETCMeisaiBatch(records"
            },
            {
              "number": 267,
              "content": "}",
              "type": "code",
              "context": "in function: ValidateETCMeisaiBatch(records"
            },
            {
              "number": 269,
              "content": "return results",
              "type": "code",
              "context": "in function: ValidateETCMeisaiBatch(records"
            },
            {
              "number": 270,
              "content": "}",
              "type": "code",
              "context": "in function: ValidateETCMeisaiBatch(records"
            },
            {
              "number": 273,
              "content": "type ValidationSummary struct {",
              "type": "code",
              "context": "in function: ValidateETCMeisaiBatch(records"
            },
            {
              "number": 274,
              "content": "TotalRecords   int                     `json:\"total_records\"`",
              "type": "code",
              "context": "in function: ValidateETCMeisaiBatch(records"
            },
            {
              "number": 275,
              "content": "ValidRecords   int                     `json:\"valid_records\"`",
              "type": "code",
              "context": "in function: ValidateETCMeisaiBatch(records"
            },
            {
              "number": 276,
              "content": "InvalidRecords int                     `json:\"invalid_records\"`",
              "type": "code",
              "context": "in function: ValidateETCMeisaiBatch(records"
            },
            {
              "number": 277,
              "content": "ErrorsByField  map[string]int          `json:\"errors_by_field\"`",
              "type": "code",
              "context": "in function: ValidateETCMeisaiBatch(records"
            },
            {
              "number": 278,
              "content": "ErrorsByCode   map[string]int          `json:\"errors_by_code\"`",
              "type": "code",
              "context": "in function: ValidateETCMeisaiBatch(records"
            },
            {
              "number": 279,
              "content": "FirstErrors    []ValidationError       `json:\"first_errors,omitempty\"` // First few errors for quick review",
              "type": "code",
              "context": "in function: ValidateETCMeisaiBatch(records"
            },
            {
              "number": 280,
              "content": "}",
              "type": "code",
              "context": "in function: ValidateETCMeisaiBatch(records"
            },
            {
              "number": 283,
              "content": "func SummarizeValidation(results map[int]*ValidationResult, maxFirstErrors int) *ValidationSummary {",
              "type": "code",
              "context": "in function: SummarizeValidation(results"
            },
            {
              "number": 284,
              "content": "summary := \u0026ValidationSummary{",
              "type": "code",
              "context": "in function: SummarizeValidation(results"
            },
            {
              "number": 285,
              "content": "TotalRecords:   len(results),",
              "type": "code",
              "context": "in function: SummarizeValidation(results"
            },
            {
              "number": 286,
              "content": "ValidRecords:   0,",
              "type": "code",
              "context": "in function: SummarizeValidation(results"
            },
            {
              "number": 287,
              "content": "InvalidRecords: 0,",
              "type": "code",
              "context": "in function: SummarizeValidation(results"
            },
            {
              "number": 288,
              "content": "ErrorsByField:  make(map[string]int),",
              "type": "code",
              "context": "in function: SummarizeValidation(results"
            },
            {
              "number": 289,
              "content": "ErrorsByCode:   make(map[string]int),",
              "type": "code",
              "context": "in function: SummarizeValidation(results"
            },
            {
              "number": 290,
              "content": "FirstErrors:    make([]ValidationError, 0, maxFirstErrors),",
              "type": "code",
              "context": "in function: SummarizeValidation(results"
            },
            {
              "number": 291,
              "content": "}",
              "type": "code",
              "context": "in function: SummarizeValidation(results"
            },
            {
              "number": 293,
              "content": "for _, result := range results {",
              "type": "branch",
              "context": "in function: SummarizeValidation(results"
            },
            {
              "number": 294,
              "content": "if result.Valid {",
              "type": "branch",
              "context": "in function: SummarizeValidation(results"
            },
            {
              "number": 295,
              "content": "summary.ValidRecords++",
              "type": "code",
              "context": "in function: SummarizeValidation(results"
            },
            {
              "number": 296,
              "content": "} else {",
              "type": "code",
              "context": "in function: SummarizeValidation(results"
            },
            {
              "number": 297,
              "content": "summary.InvalidRecords++",
              "type": "code",
              "context": "in function: SummarizeValidation(results"
            },
            {
              "number": 299,
              "content": "for _, err := range result.Errors {",
              "type": "branch",
              "context": "in function: SummarizeValidation(results"
            },
            {
              "number": 300,
              "content": "summary.ErrorsByField[err.Field]++",
              "type": "code",
              "context": "in function: SummarizeValidation(results"
            },
            {
              "number": 301,
              "content": "summary.ErrorsByCode[err.Code]++",
              "type": "code",
              "context": "in function: SummarizeValidation(results"
            },
            {
              "number": 303,
              "content": "if len(summary.FirstErrors) \u003c maxFirstErrors {",
              "type": "branch",
              "context": "in function: SummarizeValidation(results"
            },
            {
              "number": 304,
              "content": "summary.FirstErrors = append(summary.FirstErrors, err)",
              "type": "code",
              "context": "in function: SummarizeValidation(results"
            },
            {
              "number": 305,
              "content": "}",
              "type": "code",
              "context": "in function: SummarizeValidation(results"
            },
            {
              "number": 306,
              "content": "}",
              "type": "code",
              "context": "in function: SummarizeValidation(results"
            },
            {
              "number": 307,
              "content": "}",
              "type": "code",
              "context": "in function: SummarizeValidation(results"
            },
            {
              "number": 308,
              "content": "}",
              "type": "code",
              "context": "in function: SummarizeValidation(results"
            },
            {
              "number": 310,
              "content": "return summary",
              "type": "code",
              "context": "in function: SummarizeValidation(results"
            },
            {
              "number": 311,
              "content": "}",
              "type": "code",
              "context": "in function: SummarizeValidation(results"
            },
            {
              "number": 316,
              "content": "func ValidateETCNumber(etcNumber string) bool {",
              "type": "code",
              "context": "in function: ValidateETCNumber(etcNumber"
            },
            {
              "number": 317,
              "content": "if etcNumber == \"\" {",
              "type": "branch",
              "context": "in function: ValidateETCNumber(etcNumber"
            },
            {
              "number": 318,
              "content": "return false",
              "type": "code",
              "context": "in function: ValidateETCNumber(etcNumber"
            },
            {
              "number": 319,
              "content": "}",
              "type": "code",
              "context": "in function: ValidateETCNumber(etcNumber"
            },
            {
              "number": 322,
              "content": "if len(etcNumber) \u003c 10 || len(etcNumber) \u003e 16 {",
              "type": "branch",
              "context": "in function: ValidateETCNumber(etcNumber"
            },
            {
              "number": 323,
              "content": "return false",
              "type": "code",
              "context": "in function: ValidateETCNumber(etcNumber"
            },
            {
              "number": 324,
              "content": "}",
              "type": "code",
              "context": "in function: ValidateETCNumber(etcNumber"
            },
            {
              "number": 327,
              "content": "for _, char := range etcNumber {",
              "type": "branch",
              "context": "in function: ValidateETCNumber(etcNumber"
            },
            {
              "number": 328,
              "content": "if char \u003c '0' || char \u003e '9' {",
              "type": "branch",
              "context": "in function: ValidateETCNumber(etcNumber"
            },
            {
              "number": 329,
              "content": "return false",
              "type": "code",
              "context": "in function: ValidateETCNumber(etcNumber"
            },
            {
              "number": 330,
              "content": "}",
              "type": "code",
              "context": "in function: ValidateETCNumber(etcNumber"
            },
            {
              "number": 331,
              "content": "}",
              "type": "code",
              "context": "in function: ValidateETCNumber(etcNumber"
            },
            {
              "number": 333,
              "content": "return true",
              "type": "code",
              "context": "in function: ValidateETCNumber(etcNumber"
            },
            {
              "number": 334,
              "content": "}",
              "type": "code",
              "context": "in function: ValidateETCNumber(etcNumber"
            },
            {
              "number": 337,
              "content": "func ValidateTimeFormat(timeStr string) bool {",
              "type": "code",
              "context": "in function: ValidateTimeFormat(timeStr"
            },
            {
              "number": 338,
              "content": "if timeStr == \"\" {",
              "type": "branch",
              "context": "in function: ValidateTimeFormat(timeStr"
            },
            {
              "number": 339,
              "content": "return false",
              "type": "code",
              "context": "in function: ValidateTimeFormat(timeStr"
            },
            {
              "number": 340,
              "content": "}",
              "type": "code",
              "context": "in function: ValidateTimeFormat(timeStr"
            },
            {
              "number": 342,
              "content": "matched, _ := regexp.MatchString(`^([01][0-9]|2[0-3]):[0-5][0-9]$`, timeStr)",
              "type": "code",
              "context": "in function: ValidateTimeFormat(timeStr"
            },
            {
              "number": 343,
              "content": "return matched",
              "type": "code",
              "context": "in function: ValidateTimeFormat(timeStr"
            },
            {
              "number": 344,
              "content": "}",
              "type": "code",
              "context": "in function: ValidateTimeFormat(timeStr"
            },
            {
              "number": 347,
              "content": "func ValidateCarNumber(carNumber string) bool {",
              "type": "code",
              "context": "in function: ValidateCarNumber(carNumber"
            },
            {
              "number": 348,
              "content": "if carNumber == \"\" {",
              "type": "branch",
              "context": "in function: ValidateCarNumber(carNumber"
            },
            {
              "number": 349,
              "content": "return false",
              "type": "code",
              "context": "in function: ValidateCarNumber(carNumber"
            },
            {
              "number": 350,
              "content": "}",
              "type": "code",
              "context": "in function: ValidateCarNumber(carNumber"
            },
            {
              "number": 353,
              "content": "trimmed := strings.TrimSpace(carNumber)",
              "type": "code",
              "context": "in function: ValidateCarNumber(carNumber"
            },
            {
              "number": 354,
              "content": "if len([]rune(trimmed)) \u003c 7 || len([]rune(trimmed)) \u003e 20 {",
              "type": "branch",
              "context": "in function: ValidateCarNumber(carNumber"
            },
            {
              "number": 355,
              "content": "return false",
              "type": "code",
              "context": "in function: ValidateCarNumber(carNumber"
            },
            {
              "number": 356,
              "content": "}",
              "type": "code",
              "context": "in function: ValidateCarNumber(carNumber"
            },
            {
              "number": 359,
              "content": "patterns := []string{",
              "type": "code",
              "context": "in function: ValidateCarNumber(carNumber"
            },
            {
              "number": 360,
              "content": "`^[ぁ-んァ-ンー一-龯]+\\d+[ぁ-んァ-ンー一-龯]+\\d+$`,     // Japanese characters + numbers",
              "type": "code",
              "context": "in function: ValidateCarNumber(carNumber"
            },
            {
              "number": 361,
              "content": "}",
              "type": "code",
              "context": "in function: ValidateCarNumber(carNumber"
            },
            {
              "number": 363,
              "content": "for _, pattern := range patterns {",
              "type": "branch",
              "context": "in function: ValidateCarNumber(carNumber"
            },
            {
              "number": 364,
              "content": "if matched, _ := regexp.MatchString(pattern, trimmed); matched {",
              "type": "branch",
              "context": "in function: ValidateCarNumber(carNumber"
            },
            {
              "number": 365,
              "content": "return true",
              "type": "code",
              "context": "in function: ValidateCarNumber(carNumber"
            },
            {
              "number": 366,
              "content": "}",
              "type": "code",
              "context": "in function: ValidateCarNumber(carNumber"
            },
            {
              "number": 367,
              "content": "}",
              "type": "code",
              "context": "in function: ValidateCarNumber(carNumber"
            },
            {
              "number": 370,
              "content": "if strings.Contains(trimmed, \"品川\") || strings.Contains(trimmed, \"横浜\") {",
              "type": "branch",
              "context": "in function: ValidateCarNumber(carNumber"
            },
            {
              "number": 371,
              "content": "return true",
              "type": "code",
              "context": "in function: ValidateCarNumber(carNumber"
            },
            {
              "number": 372,
              "content": "}",
              "type": "code",
              "context": "in function: ValidateCarNumber(carNumber"
            },
            {
              "number": 374,
              "content": "return false",
              "type": "code",
              "context": "in function: ValidateCarNumber(carNumber"
            },
            {
              "number": 375,
              "content": "}",
              "type": "code",
              "context": "in function: ValidateCarNumber(carNumber"
            },
            {
              "number": 378,
              "content": "func SanitizeInput(input string) string {",
              "type": "code",
              "context": "in function: SanitizeInput(input"
            },
            {
              "number": 380,
              "content": "cleaned := strings.TrimSpace(input)",
              "type": "code",
              "context": "in function: SanitizeInput(input"
            },
            {
              "number": 384,
              "content": "dangerous := []string{\"'\", \"\\\"\", \";\", \"--\", \"/*\", \"*/\"}",
              "type": "code",
              "context": "in function: SanitizeInput(input"
            },
            {
              "number": 385,
              "content": "for _, pattern := range dangerous {",
              "type": "branch",
              "context": "in function: SanitizeInput(input"
            },
            {
              "number": 386,
              "content": "cleaned = strings.ReplaceAll(cleaned, pattern, \"\")",
              "type": "code",
              "context": "in function: SanitizeInput(input"
            },
            {
              "number": 387,
              "content": "}",
              "type": "code",
              "context": "in function: SanitizeInput(input"
            },
            {
              "number": 389,
              "content": "return cleaned",
              "type": "code",
              "context": "in function: SanitizeInput(input"
            },
            {
              "number": 390,
              "content": "}",
              "type": "code",
              "context": "in function: SanitizeInput(input"
            }
          ],
          "functions": [
            {
              "name": "Error",
              "start_line": 18,
              "end_line": 20,
              "coverage": 0,
              "uncovered_lines": [
                18,
                19,
                20
              ]
            },
            {
              "name": "AddError",
              "start_line": 29,
              "end_line": 29,
              "coverage": 0,
              "uncovered_lines": [
                29
              ]
            },
            {
              "name": "ValidateETCMeisai",
              "start_line": 40,
              "end_line": 116,
              "coverage": 0,
              "uncovered_lines": [
                40,
                41,
                44,
                45,
                46,
                47,
                50,
                51,
                52,
                54,
                55,
                56,
                58,
                59,
                60,
                62,
                63,
                64,
                67,
                69,
                70,
                71,
                74,
                75,
                76,
                77,
                78,
                81,
                82,
                83,
                84,
                85,
                88,
                89,
                90,
                92,
                93,
                94,
                97,
                98,
                99,
                102,
                103,
                104,
                106,
                107,
                108,
                111,
                112,
                113,
                115,
                116
              ]
            },
            {
              "name": "ValidateETCMeisaiMapping",
              "start_line": 119,
              "end_line": 153,
              "coverage": 0,
              "uncovered_lines": [
                119,
                120,
                123,
                124,
                125,
                127,
                128,
                129,
                132,
                133,
                134,
                135,
                138,
                139,
                140,
                143,
                144,
                145,
                148,
                149,
                150,
                152,
                153
              ]
            },
            {
              "name": "ValidateETCImportBatch",
              "start_line": 156,
              "end_line": 202,
              "coverage": 0,
              "uncovered_lines": [
                156,
                157,
                160,
                161,
                162,
                164,
                165,
                166,
                169,
                170,
                171,
                172,
                173,
                174,
                175,
                176,
                177,
                178,
                181,
                182,
                183,
                186,
                187,
                188,
                190,
                191,
                192,
                195,
                196,
                197,
                198,
                199,
                201,
                202
              ]
            },
            {
              "name": "isValidTimeFormat",
              "start_line": 207,
              "end_line": 210,
              "coverage": 0,
              "uncovered_lines": [
                207,
                208,
                209,
                210
              ]
            },
            {
              "name": "isValidETCNumber",
              "start_line": 213,
              "end_line": 216,
              "coverage": 0,
              "uncovered_lines": [
                213,
                214,
                215,
                216
              ]
            },
            {
              "name": "isValidDTakoRowID",
              "start_line": 219,
              "end_line": 223,
              "coverage": 0,
              "uncovered_lines": [
                219,
                221,
                222,
                223
              ]
            },
            {
              "name": "ValidateETCMeisaiBatch",
              "start_line": 233,
              "end_line": 270,
              "coverage": 0,
              "uncovered_lines": [
                233,
                234,
                235,
                236,
                237,
                238,
                239,
                240,
                242,
                243,
                244,
                246,
                247,
                248,
                249,
                251,
                254,
                255,
                256,
                257,
                258,
                259,
                260,
                262,
                263,
                264,
                266,
                267,
                269,
                270
              ]
            },
            {
              "name": "SummarizeValidation",
              "start_line": 283,
              "end_line": 311,
              "coverage": 0,
              "uncovered_lines": [
                283,
                284,
                285,
                286,
                287,
                288,
                289,
                290,
                291,
                293,
                294,
                295,
                296,
                297,
                299,
                300,
                301,
                303,
                304,
                305,
                306,
                307,
                308,
                310,
                311
              ]
            },
            {
              "name": "ValidateETCNumber",
              "start_line": 316,
              "end_line": 334,
              "coverage": 0,
              "uncovered_lines": [
                316,
                317,
                318,
                319,
                322,
                323,
                324,
                327,
                328,
                329,
                330,
                331,
                333,
                334
              ]
            },
            {
              "name": "ValidateTimeFormat",
              "start_line": 337,
              "end_line": 344,
              "coverage": 0,
              "uncovered_lines": [
                337,
                338,
                339,
                340,
                342,
                343,
                344
              ]
            },
            {
              "name": "ValidateCarNumber",
              "start_line": 347,
              "end_line": 375,
              "coverage": 0,
              "uncovered_lines": [
                347,
                348,
                349,
                350,
                353,
                354,
                355,
                356,
                359,
                360,
                361,
                363,
                364,
                365,
                366,
                367,
                370,
                371,
                372,
                374,
                375
              ]
            },
            {
              "name": "SanitizeInput",
              "start_line": 378,
              "end_line": 390,
              "coverage": 0,
              "uncovered_lines": [
                378,
                380,
                384,
                385,
                386,
                387,
                389,
                390
              ]
            }
          ]
        }
      },
      "uncovered_lines": 1516
    }
  },
  "top_uncovered": [
    {
      "path": "github.com/yhonda-ohishi/etc_meisai/src/models/import_session.go",
      "uncovered_count": 420,
      "coverage": 0
    },
    {
      "path": "github.com/yhonda-ohishi/etc_meisai/src/models/etc_mapping.go",
      "uncovered_count": 281,
      "coverage": 0
    },
    {
      "path": "github.com/yhonda-ohishi/etc_meisai/src/models/validation.go",
      "uncovered_count": 266,
      "coverage": 0
    },
    {
      "path": "github.com/yhonda-ohishi/etc_meisai/src/models/etc_meisai_record.go",
      "uncovered_count": 182,
      "coverage": 0
    },
    {
      "path": "github.com/yhonda-ohishi/etc_meisai/src/models/etc_meisai.go",
      "uncovered_count": 149,
      "coverage": 0
    },
    {
      "path": "github.com/yhonda-ohishi/etc_meisai/src/models/etc_import_batch.go",
      "uncovered_count": 120,
      "coverage": 0
    },
    {
      "path": "github.com/yhonda-ohishi/etc_meisai/src/models/etc_meisai_mapping.go",
      "uncovered_count": 75,
      "coverage": 0
    },
    {
      "path": "github.com/yhonda-ohishi/etc_meisai/src/models/statistics.go",
      "uncovered_count": 23,
      "coverage": 0
    }
  ],
  "critical_paths": [
    {
      "description": "Uncovered error handling paths",
      "files": [
        "github.com/yhonda-ohishi/etc_meisai/src/models/etc_mapping.go",
        "github.com/yhonda-ohishi/etc_meisai/src/models/etc_meisai_mapping.go",
        "github.com/yhonda-ohishi/etc_meisai/src/models/etc_meisai_record.go",
        "github.com/yhonda-ohishi/etc_meisai/src/models/import_session.go",
        "github.com/yhonda-ohishi/etc_meisai/src/models/etc_import_batch.go"
      ],
      "priority": "high"
    },
    {
      "description": "Completely uncovered files",
      "files": [
        "github.com/yhonda-ohishi/etc_meisai/src/models/validation.go",
        "github.com/yhonda-ohishi/etc_meisai/src/models/etc_import_batch.go",
        "github.com/yhonda-ohishi/etc_meisai/src/models/etc_mapping.go",
        "github.com/yhonda-ohishi/etc_meisai/src/models/etc_meisai.go",
        "github.com/yhonda-ohishi/etc_meisai/src/models/etc_meisai_mapping.go",
        "github.com/yhonda-ohishi/etc_meisai/src/models/etc_meisai_record.go",
        "github.com/yhonda-ohishi/etc_meisai/src/models/import_session.go",
        "github.com/yhonda-ohishi/etc_meisai/src/models/statistics.go"
      ],
      "priority": "high"
    }
  ]
}
