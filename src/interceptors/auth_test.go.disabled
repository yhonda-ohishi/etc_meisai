package interceptors_test

import (
	"context"
	"errors"
	"testing"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/mock"
	"google.golang.org/grpc"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/metadata"
	"google.golang.org/grpc/status"
	"github.com/yhonda-ohishi/etc_meisai/src/interceptors"
)

type MockAuthService struct {
	mock.Mock
}

func (m *MockAuthService) ValidateToken(token string) (string, error) {
	args := m.Called(token)
	return args.String(0), args.Error(1)
}

func (m *MockAuthService) ValidateAPIKey(apiKey string) (string, error) {
	args := m.Called(apiKey)
	return args.String(0), args.Error(1)
}

func TestNewAuthInterceptor(t *testing.T) {
	t.Parallel()

	mockAuthService := &MockAuthService{}
	config := interceptors.AuthConfig{
		RequireAuth: true,
		AllowedRoles: []string{"admin", "user"},
	}

	interceptor := interceptors.NewAuthInterceptor(mockAuthService, config)

	assert.NotNil(t, interceptor)
}

func TestAuthInterceptor_UnaryInterceptor(t *testing.T) {
	t.Parallel()

	mockAuthService := &MockAuthService{}
	config := interceptors.AuthConfig{
		RequireAuth: true,
		AllowedRoles: []string{"admin", "user"},
	}
	interceptor := interceptors.NewAuthInterceptor(mockAuthService, config)

	tests := []struct {
		name           string
		metadata       metadata.MD
		setupMock      func(*MockAuthService)
		expectedError  codes.Code
		expectNoError  bool
	}{
		{
			name: "valid bearer token",
			metadata: metadata.Pairs(
				"authorization", "Bearer valid-token",
			),
			setupMock: func(m *MockAuthService) {
				m.On("ValidateToken", "valid-token").Return("user123", nil)
			},
			expectNoError: true,
		},
		{
			name: "valid API key",
			metadata: metadata.Pairs(
				"x-api-key", "valid-api-key",
			),
			setupMock: func(m *MockAuthService) {
				m.On("ValidateAPIKey", "valid-api-key").Return("service123", nil)
			},
			expectNoError: true,
		},
		{
			name:          "missing authorization",
			metadata:      metadata.MD{},
			setupMock:     func(m *MockAuthService) {},
			expectedError: codes.Unauthenticated,
		},
		{
			name: "invalid bearer token",
			metadata: metadata.Pairs(
				"authorization", "Bearer invalid-token",
			),
			setupMock: func(m *MockAuthService) {
				m.On("ValidateToken", "invalid-token").Return("", errors.New("invalid token"))
			},
			expectedError: codes.Unauthenticated,
		},
		{
			name: "malformed authorization header",
			metadata: metadata.Pairs(
				"authorization", "invalid-format",
			),
			setupMock:     func(m *MockAuthService) {},
			expectedError: codes.Unauthenticated,
		},
		{
			name: "invalid API key",
			metadata: metadata.Pairs(
				"x-api-key", "invalid-api-key",
			),
			setupMock: func(m *MockAuthService) {
				m.On("ValidateAPIKey", "invalid-api-key").Return("", errors.New("invalid api key"))
			},
			expectedError: codes.Unauthenticated,
		},
		{
			name: "empty bearer token",
			metadata: metadata.Pairs(
				"authorization", "Bearer ",
			),
			setupMock:     func(m *MockAuthService) {},
			expectedError: codes.Unauthenticated,
		},
		{
			name: "case insensitive bearer",
			metadata: metadata.Pairs(
				"authorization", "bearer valid-token",
			),
			setupMock: func(m *MockAuthService) {
				m.On("ValidateToken", "valid-token").Return("user123", nil)
			},
			expectNoError: true,
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			mockAuthService.ExpectedCalls = nil
			tt.setupMock(mockAuthService)

			ctx := metadata.NewIncomingContext(context.Background(), tt.metadata)
			info := &grpc.UnaryServerInfo{
				FullMethod: "/TestService/TestMethod",
			}

			handler := func(ctx context.Context, req interface{}) (interface{}, error) {
				return "success", nil
			}

			resp, err := interceptor.UnaryInterceptor(ctx, nil, info, handler)

			if tt.expectNoError {
				assert.NoError(t, err)
				assert.Equal(t, "success", resp)

				// Verify user context is set
				userID := ctx.Value(interceptors.UserContextKey)
				assert.NotNil(t, userID)
			} else {
				assert.Error(t, err)
				st, ok := status.FromError(err)
				assert.True(t, ok)
				assert.Equal(t, tt.expectedError, st.Code())
			}

			mockAuthService.AssertExpectations(t)
		})
	}
}

func TestAuthInterceptor_StreamInterceptor(t *testing.T) {
	t.Parallel()

	mockAuthService := &MockAuthService{}
	config := interceptors.AuthConfig{
		RequireAuth: true,
		AllowedRoles: []string{"admin", "user"},
	}
	interceptor := interceptors.NewAuthInterceptor(mockAuthService, config)

	tests := []struct {
		name           string
		metadata       metadata.MD
		setupMock      func(*MockAuthService)
		expectedError  codes.Code
		expectNoError  bool
	}{
		{
			name: "valid authentication for stream",
			metadata: metadata.Pairs(
				"authorization", "Bearer valid-token",
			),
			setupMock: func(m *MockAuthService) {
				m.On("ValidateToken", "valid-token").Return("user123", nil)
			},
			expectNoError: true,
		},
		{
			name:          "missing authentication for stream",
			metadata:      metadata.MD{},
			setupMock:     func(m *MockAuthService) {},
			expectedError: codes.Unauthenticated,
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			mockAuthService.ExpectedCalls = nil
			tt.setupMock(mockAuthService)

			ctx := metadata.NewIncomingContext(context.Background(), tt.metadata)
			info := &grpc.StreamServerInfo{
				FullMethod: "/TestService/TestStreamMethod",
			}

			mockStream := &MockServerStream{ctx: ctx}
			handler := func(srv interface{}, stream grpc.ServerStream) error {
				return nil
			}

			err := interceptor.StreamInterceptor(nil, mockStream, info, handler)

			if tt.expectNoError {
				assert.NoError(t, err)
			} else {
				assert.Error(t, err)
				st, ok := status.FromError(err)
				assert.True(t, ok)
				assert.Equal(t, tt.expectedError, st.Code())
			}

			mockAuthService.AssertExpectations(t)
		})
	}
}

func TestAuthInterceptor_PublicEndpoints(t *testing.T) {
	t.Parallel()

	mockAuthService := &MockAuthService{}
	config := interceptors.AuthConfig{
		RequireAuth: true,
		PublicEndpoints: []string{
			"/HealthService/Check",
			"/PublicService/GetVersion",
		},
	}
	interceptor := interceptors.NewAuthInterceptor(mockAuthService, config)

	tests := []struct {
		name       string
		fullMethod string
		metadata   metadata.MD
	}{
		{
			name:       "health check endpoint",
			fullMethod: "/HealthService/Check",
			metadata:   metadata.MD{}, // No auth required
		},
		{
			name:       "public version endpoint",
			fullMethod: "/PublicService/GetVersion",
			metadata:   metadata.MD{}, // No auth required
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			ctx := metadata.NewIncomingContext(context.Background(), tt.metadata)
			info := &grpc.UnaryServerInfo{
				FullMethod: tt.fullMethod,
			}

			handler := func(ctx context.Context, req interface{}) (interface{}, error) {
				return "success", nil
			}

			resp, err := interceptor.UnaryInterceptor(ctx, nil, info, handler)

			assert.NoError(t, err)
			assert.Equal(t, "success", resp)
		})
	}
}

func TestAuthInterceptor_RoleBasedAccess(t *testing.T) {
	t.Parallel()

	mockAuthService := &MockAuthService{}
	config := interceptors.AuthConfig{
		RequireAuth: true,
		AllowedRoles: []string{"admin"},
		RoleBasedEndpoints: map[string][]string{
			"/AdminService/DeleteUser": {"admin"},
			"/UserService/GetProfile":  {"admin", "user"},
		},
	}
	interceptor := interceptors.NewAuthInterceptor(mockAuthService, config)

	tests := []struct {
		name          string
		fullMethod    string
		userRole      string
		expectSuccess bool
	}{
		{
			name:          "admin accessing admin endpoint",
			fullMethod:    "/AdminService/DeleteUser",
			userRole:      "admin",
			expectSuccess: true,
		},
		{
			name:          "user accessing admin endpoint",
			fullMethod:    "/AdminService/DeleteUser",
			userRole:      "user",
			expectSuccess: false,
		},
		{
			name:          "admin accessing user endpoint",
			fullMethod:    "/UserService/GetProfile",
			userRole:      "admin",
			expectSuccess: true,
		},
		{
			name:          "user accessing user endpoint",
			fullMethod:    "/UserService/GetProfile",
			userRole:      "user",
			expectSuccess: true,
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			mockAuthService.ExpectedCalls = nil
			mockAuthService.On("ValidateToken", "valid-token").Return("user123", nil)

			// Mock role retrieval - this would typically be part of the auth service
			ctx := context.Background()
			ctx = context.WithValue(ctx, interceptors.UserRoleKey, tt.userRole)
			ctx = metadata.NewIncomingContext(ctx, metadata.Pairs(
				"authorization", "Bearer valid-token",
			))

			info := &grpc.UnaryServerInfo{
				FullMethod: tt.fullMethod,
			}

			handler := func(ctx context.Context, req interface{}) (interface{}, error) {
				return "success", nil
			}

			resp, err := interceptor.UnaryInterceptor(ctx, nil, info, handler)

			if tt.expectSuccess {
				assert.NoError(t, err)
				assert.Equal(t, "success", resp)
			} else {
				assert.Error(t, err)
				st, ok := status.FromError(err)
				assert.True(t, ok)
				assert.Equal(t, codes.PermissionDenied, st.Code())
			}
		})
	}
}

func TestAuthInterceptor_DisabledAuth(t *testing.T) {
	t.Parallel()

	mockAuthService := &MockAuthService{}
	config := interceptors.AuthConfig{
		RequireAuth: false, // Auth disabled
	}
	interceptor := interceptors.NewAuthInterceptor(mockAuthService, config)

	ctx := metadata.NewIncomingContext(context.Background(), metadata.MD{})
	info := &grpc.UnaryServerInfo{
		FullMethod: "/TestService/TestMethod",
	}

	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return "success", nil
	}

	resp, err := interceptor.UnaryInterceptor(ctx, nil, info, handler)

	assert.NoError(t, err)
	assert.Equal(t, "success", resp)
}

func TestAuthInterceptor_ContextPropagation(t *testing.T) {
	t.Parallel()

	mockAuthService := &MockAuthService{}
	config := interceptors.AuthConfig{
		RequireAuth: true,
	}
	interceptor := interceptors.NewAuthInterceptor(mockAuthService, config)

	mockAuthService.On("ValidateToken", "valid-token").Return("user123", nil)

	ctx := metadata.NewIncomingContext(context.Background(), metadata.Pairs(
		"authorization", "Bearer valid-token",
	))
	info := &grpc.UnaryServerInfo{
		FullMethod: "/TestService/TestMethod",
	}

	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		// Verify user context is propagated
		userID := ctx.Value(interceptors.UserContextKey)
		assert.Equal(t, "user123", userID)
		return "success", nil
	}

	resp, err := interceptor.UnaryInterceptor(ctx, nil, info, handler)

	assert.NoError(t, err)
	assert.Equal(t, "success", resp)
}

// Mock ServerStream for testing stream interceptor
type MockServerStream struct {
	grpc.ServerStream
	ctx context.Context
}

func (m *MockServerStream) Context() context.Context {
	return m.ctx
}

func (m *MockServerStream) SendMsg(msg interface{}) error {
	return nil
}

func (m *MockServerStream) RecvMsg(msg interface{}) error {
	return nil
}

// Benchmark tests
func BenchmarkAuthInterceptor_ValidToken(b *testing.B) {
	mockAuthService := &MockAuthService{}
	config := interceptors.AuthConfig{
		RequireAuth: true,
	}
	interceptor := interceptors.NewAuthInterceptor(mockAuthService, config)

	mockAuthService.On("ValidateToken", "valid-token").Return("user123", nil)

	ctx := metadata.NewIncomingContext(context.Background(), metadata.Pairs(
		"authorization", "Bearer valid-token",
	))
	info := &grpc.UnaryServerInfo{
		FullMethod: "/TestService/TestMethod",
	}

	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return "success", nil
	}

	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		interceptor.UnaryInterceptor(ctx, nil, info, handler)
	}
}

func BenchmarkAuthInterceptor_PublicEndpoint(b *testing.B) {
	mockAuthService := &MockAuthService{}
	config := interceptors.AuthConfig{
		RequireAuth: true,
		PublicEndpoints: []string{"/HealthService/Check"},
	}
	interceptor := interceptors.NewAuthInterceptor(mockAuthService, config)

	ctx := metadata.NewIncomingContext(context.Background(), metadata.MD{})
	info := &grpc.UnaryServerInfo{
		FullMethod: "/HealthService/Check",
	}

	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return "success", nil
	}

	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		interceptor.UnaryInterceptor(ctx, nil, info, handler)
	}
}