// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: etc_meisai.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ETCMeisaiService_CreateRecord_FullMethodName       = "/etc_meisai.v1.ETCMeisaiService/CreateRecord"
	ETCMeisaiService_GetRecord_FullMethodName          = "/etc_meisai.v1.ETCMeisaiService/GetRecord"
	ETCMeisaiService_ListRecords_FullMethodName        = "/etc_meisai.v1.ETCMeisaiService/ListRecords"
	ETCMeisaiService_UpdateRecord_FullMethodName       = "/etc_meisai.v1.ETCMeisaiService/UpdateRecord"
	ETCMeisaiService_DeleteRecord_FullMethodName       = "/etc_meisai.v1.ETCMeisaiService/DeleteRecord"
	ETCMeisaiService_ImportCSVStream_FullMethodName    = "/etc_meisai.v1.ETCMeisaiService/ImportCSVStream"
	ETCMeisaiService_ImportCSV_FullMethodName          = "/etc_meisai.v1.ETCMeisaiService/ImportCSV"
	ETCMeisaiService_GetImportSession_FullMethodName   = "/etc_meisai.v1.ETCMeisaiService/GetImportSession"
	ETCMeisaiService_ListImportSessions_FullMethodName = "/etc_meisai.v1.ETCMeisaiService/ListImportSessions"
	ETCMeisaiService_CreateMapping_FullMethodName      = "/etc_meisai.v1.ETCMeisaiService/CreateMapping"
	ETCMeisaiService_GetMapping_FullMethodName         = "/etc_meisai.v1.ETCMeisaiService/GetMapping"
	ETCMeisaiService_ListMappings_FullMethodName       = "/etc_meisai.v1.ETCMeisaiService/ListMappings"
	ETCMeisaiService_UpdateMapping_FullMethodName      = "/etc_meisai.v1.ETCMeisaiService/UpdateMapping"
	ETCMeisaiService_DeleteMapping_FullMethodName      = "/etc_meisai.v1.ETCMeisaiService/DeleteMapping"
	ETCMeisaiService_GetStatistics_FullMethodName      = "/etc_meisai.v1.ETCMeisaiService/GetStatistics"
)

// ETCMeisaiServiceClient is the client API for ETCMeisaiService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// ETCMeisaiService - ETC明細管理サービス
type ETCMeisaiServiceClient interface {
	// ETC明細レコード作成
	CreateRecord(ctx context.Context, in *CreateRecordRequest, opts ...grpc.CallOption) (*CreateRecordResponse, error)
	// ETC明細レコード取得
	GetRecord(ctx context.Context, in *GetRecordRequest, opts ...grpc.CallOption) (*GetRecordResponse, error)
	// ETC明細レコード一覧取得
	ListRecords(ctx context.Context, in *ListRecordsRequest, opts ...grpc.CallOption) (*ListRecordsResponse, error)
	// ETC明細レコード更新
	UpdateRecord(ctx context.Context, in *UpdateRecordRequest, opts ...grpc.CallOption) (*UpdateRecordResponse, error)
	// ETC明細レコード削除
	DeleteRecord(ctx context.Context, in *DeleteRecordRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// CSVインポート（ストリーミング）
	ImportCSVStream(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[ImportCSVChunk, ImportProgress], error)
	// CSVインポート（単一リクエスト）
	ImportCSV(ctx context.Context, in *ImportCSVRequest, opts ...grpc.CallOption) (*ImportCSVResponse, error)
	// インポートセッション取得
	GetImportSession(ctx context.Context, in *GetImportSessionRequest, opts ...grpc.CallOption) (*GetImportSessionResponse, error)
	// インポートセッション一覧取得
	ListImportSessions(ctx context.Context, in *ListImportSessionsRequest, opts ...grpc.CallOption) (*ListImportSessionsResponse, error)
	// マッピング作成
	CreateMapping(ctx context.Context, in *CreateMappingRequest, opts ...grpc.CallOption) (*CreateMappingResponse, error)
	// マッピング取得
	GetMapping(ctx context.Context, in *GetMappingRequest, opts ...grpc.CallOption) (*GetMappingResponse, error)
	// マッピング一覧取得
	ListMappings(ctx context.Context, in *ListMappingsRequest, opts ...grpc.CallOption) (*ListMappingsResponse, error)
	// マッピング更新
	UpdateMapping(ctx context.Context, in *UpdateMappingRequest, opts ...grpc.CallOption) (*UpdateMappingResponse, error)
	// マッピング削除
	DeleteMapping(ctx context.Context, in *DeleteMappingRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 統計情報取得
	GetStatistics(ctx context.Context, in *GetStatisticsRequest, opts ...grpc.CallOption) (*GetStatisticsResponse, error)
}

type eTCMeisaiServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewETCMeisaiServiceClient(cc grpc.ClientConnInterface) ETCMeisaiServiceClient {
	return &eTCMeisaiServiceClient{cc}
}

func (c *eTCMeisaiServiceClient) CreateRecord(ctx context.Context, in *CreateRecordRequest, opts ...grpc.CallOption) (*CreateRecordResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateRecordResponse)
	err := c.cc.Invoke(ctx, ETCMeisaiService_CreateRecord_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eTCMeisaiServiceClient) GetRecord(ctx context.Context, in *GetRecordRequest, opts ...grpc.CallOption) (*GetRecordResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRecordResponse)
	err := c.cc.Invoke(ctx, ETCMeisaiService_GetRecord_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eTCMeisaiServiceClient) ListRecords(ctx context.Context, in *ListRecordsRequest, opts ...grpc.CallOption) (*ListRecordsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListRecordsResponse)
	err := c.cc.Invoke(ctx, ETCMeisaiService_ListRecords_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eTCMeisaiServiceClient) UpdateRecord(ctx context.Context, in *UpdateRecordRequest, opts ...grpc.CallOption) (*UpdateRecordResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateRecordResponse)
	err := c.cc.Invoke(ctx, ETCMeisaiService_UpdateRecord_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eTCMeisaiServiceClient) DeleteRecord(ctx context.Context, in *DeleteRecordRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ETCMeisaiService_DeleteRecord_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eTCMeisaiServiceClient) ImportCSVStream(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[ImportCSVChunk, ImportProgress], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ETCMeisaiService_ServiceDesc.Streams[0], ETCMeisaiService_ImportCSVStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ImportCSVChunk, ImportProgress]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ETCMeisaiService_ImportCSVStreamClient = grpc.BidiStreamingClient[ImportCSVChunk, ImportProgress]

func (c *eTCMeisaiServiceClient) ImportCSV(ctx context.Context, in *ImportCSVRequest, opts ...grpc.CallOption) (*ImportCSVResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ImportCSVResponse)
	err := c.cc.Invoke(ctx, ETCMeisaiService_ImportCSV_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eTCMeisaiServiceClient) GetImportSession(ctx context.Context, in *GetImportSessionRequest, opts ...grpc.CallOption) (*GetImportSessionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetImportSessionResponse)
	err := c.cc.Invoke(ctx, ETCMeisaiService_GetImportSession_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eTCMeisaiServiceClient) ListImportSessions(ctx context.Context, in *ListImportSessionsRequest, opts ...grpc.CallOption) (*ListImportSessionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListImportSessionsResponse)
	err := c.cc.Invoke(ctx, ETCMeisaiService_ListImportSessions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eTCMeisaiServiceClient) CreateMapping(ctx context.Context, in *CreateMappingRequest, opts ...grpc.CallOption) (*CreateMappingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateMappingResponse)
	err := c.cc.Invoke(ctx, ETCMeisaiService_CreateMapping_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eTCMeisaiServiceClient) GetMapping(ctx context.Context, in *GetMappingRequest, opts ...grpc.CallOption) (*GetMappingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMappingResponse)
	err := c.cc.Invoke(ctx, ETCMeisaiService_GetMapping_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eTCMeisaiServiceClient) ListMappings(ctx context.Context, in *ListMappingsRequest, opts ...grpc.CallOption) (*ListMappingsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListMappingsResponse)
	err := c.cc.Invoke(ctx, ETCMeisaiService_ListMappings_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eTCMeisaiServiceClient) UpdateMapping(ctx context.Context, in *UpdateMappingRequest, opts ...grpc.CallOption) (*UpdateMappingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateMappingResponse)
	err := c.cc.Invoke(ctx, ETCMeisaiService_UpdateMapping_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eTCMeisaiServiceClient) DeleteMapping(ctx context.Context, in *DeleteMappingRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ETCMeisaiService_DeleteMapping_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eTCMeisaiServiceClient) GetStatistics(ctx context.Context, in *GetStatisticsRequest, opts ...grpc.CallOption) (*GetStatisticsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetStatisticsResponse)
	err := c.cc.Invoke(ctx, ETCMeisaiService_GetStatistics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ETCMeisaiServiceServer is the server API for ETCMeisaiService service.
// All implementations should embed UnimplementedETCMeisaiServiceServer
// for forward compatibility.
//
// ETCMeisaiService - ETC明細管理サービス
type ETCMeisaiServiceServer interface {
	// ETC明細レコード作成
	CreateRecord(context.Context, *CreateRecordRequest) (*CreateRecordResponse, error)
	// ETC明細レコード取得
	GetRecord(context.Context, *GetRecordRequest) (*GetRecordResponse, error)
	// ETC明細レコード一覧取得
	ListRecords(context.Context, *ListRecordsRequest) (*ListRecordsResponse, error)
	// ETC明細レコード更新
	UpdateRecord(context.Context, *UpdateRecordRequest) (*UpdateRecordResponse, error)
	// ETC明細レコード削除
	DeleteRecord(context.Context, *DeleteRecordRequest) (*emptypb.Empty, error)
	// CSVインポート（ストリーミング）
	ImportCSVStream(grpc.BidiStreamingServer[ImportCSVChunk, ImportProgress]) error
	// CSVインポート（単一リクエスト）
	ImportCSV(context.Context, *ImportCSVRequest) (*ImportCSVResponse, error)
	// インポートセッション取得
	GetImportSession(context.Context, *GetImportSessionRequest) (*GetImportSessionResponse, error)
	// インポートセッション一覧取得
	ListImportSessions(context.Context, *ListImportSessionsRequest) (*ListImportSessionsResponse, error)
	// マッピング作成
	CreateMapping(context.Context, *CreateMappingRequest) (*CreateMappingResponse, error)
	// マッピング取得
	GetMapping(context.Context, *GetMappingRequest) (*GetMappingResponse, error)
	// マッピング一覧取得
	ListMappings(context.Context, *ListMappingsRequest) (*ListMappingsResponse, error)
	// マッピング更新
	UpdateMapping(context.Context, *UpdateMappingRequest) (*UpdateMappingResponse, error)
	// マッピング削除
	DeleteMapping(context.Context, *DeleteMappingRequest) (*emptypb.Empty, error)
	// 統計情報取得
	GetStatistics(context.Context, *GetStatisticsRequest) (*GetStatisticsResponse, error)
}

// UnimplementedETCMeisaiServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedETCMeisaiServiceServer struct{}

func (UnimplementedETCMeisaiServiceServer) CreateRecord(context.Context, *CreateRecordRequest) (*CreateRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRecord not implemented")
}
func (UnimplementedETCMeisaiServiceServer) GetRecord(context.Context, *GetRecordRequest) (*GetRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRecord not implemented")
}
func (UnimplementedETCMeisaiServiceServer) ListRecords(context.Context, *ListRecordsRequest) (*ListRecordsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRecords not implemented")
}
func (UnimplementedETCMeisaiServiceServer) UpdateRecord(context.Context, *UpdateRecordRequest) (*UpdateRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRecord not implemented")
}
func (UnimplementedETCMeisaiServiceServer) DeleteRecord(context.Context, *DeleteRecordRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRecord not implemented")
}
func (UnimplementedETCMeisaiServiceServer) ImportCSVStream(grpc.BidiStreamingServer[ImportCSVChunk, ImportProgress]) error {
	return status.Errorf(codes.Unimplemented, "method ImportCSVStream not implemented")
}
func (UnimplementedETCMeisaiServiceServer) ImportCSV(context.Context, *ImportCSVRequest) (*ImportCSVResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImportCSV not implemented")
}
func (UnimplementedETCMeisaiServiceServer) GetImportSession(context.Context, *GetImportSessionRequest) (*GetImportSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetImportSession not implemented")
}
func (UnimplementedETCMeisaiServiceServer) ListImportSessions(context.Context, *ListImportSessionsRequest) (*ListImportSessionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListImportSessions not implemented")
}
func (UnimplementedETCMeisaiServiceServer) CreateMapping(context.Context, *CreateMappingRequest) (*CreateMappingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMapping not implemented")
}
func (UnimplementedETCMeisaiServiceServer) GetMapping(context.Context, *GetMappingRequest) (*GetMappingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMapping not implemented")
}
func (UnimplementedETCMeisaiServiceServer) ListMappings(context.Context, *ListMappingsRequest) (*ListMappingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMappings not implemented")
}
func (UnimplementedETCMeisaiServiceServer) UpdateMapping(context.Context, *UpdateMappingRequest) (*UpdateMappingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMapping not implemented")
}
func (UnimplementedETCMeisaiServiceServer) DeleteMapping(context.Context, *DeleteMappingRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMapping not implemented")
}
func (UnimplementedETCMeisaiServiceServer) GetStatistics(context.Context, *GetStatisticsRequest) (*GetStatisticsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStatistics not implemented")
}
func (UnimplementedETCMeisaiServiceServer) testEmbeddedByValue() {}

// UnsafeETCMeisaiServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ETCMeisaiServiceServer will
// result in compilation errors.
type UnsafeETCMeisaiServiceServer interface {
	mustEmbedUnimplementedETCMeisaiServiceServer()
}

func RegisterETCMeisaiServiceServer(s grpc.ServiceRegistrar, srv ETCMeisaiServiceServer) {
	// If the following call pancis, it indicates UnimplementedETCMeisaiServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ETCMeisaiService_ServiceDesc, srv)
}

func _ETCMeisaiService_CreateRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ETCMeisaiServiceServer).CreateRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ETCMeisaiService_CreateRecord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ETCMeisaiServiceServer).CreateRecord(ctx, req.(*CreateRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ETCMeisaiService_GetRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ETCMeisaiServiceServer).GetRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ETCMeisaiService_GetRecord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ETCMeisaiServiceServer).GetRecord(ctx, req.(*GetRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ETCMeisaiService_ListRecords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRecordsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ETCMeisaiServiceServer).ListRecords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ETCMeisaiService_ListRecords_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ETCMeisaiServiceServer).ListRecords(ctx, req.(*ListRecordsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ETCMeisaiService_UpdateRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ETCMeisaiServiceServer).UpdateRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ETCMeisaiService_UpdateRecord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ETCMeisaiServiceServer).UpdateRecord(ctx, req.(*UpdateRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ETCMeisaiService_DeleteRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ETCMeisaiServiceServer).DeleteRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ETCMeisaiService_DeleteRecord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ETCMeisaiServiceServer).DeleteRecord(ctx, req.(*DeleteRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ETCMeisaiService_ImportCSVStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ETCMeisaiServiceServer).ImportCSVStream(&grpc.GenericServerStream[ImportCSVChunk, ImportProgress]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ETCMeisaiService_ImportCSVStreamServer = grpc.BidiStreamingServer[ImportCSVChunk, ImportProgress]

func _ETCMeisaiService_ImportCSV_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImportCSVRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ETCMeisaiServiceServer).ImportCSV(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ETCMeisaiService_ImportCSV_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ETCMeisaiServiceServer).ImportCSV(ctx, req.(*ImportCSVRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ETCMeisaiService_GetImportSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetImportSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ETCMeisaiServiceServer).GetImportSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ETCMeisaiService_GetImportSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ETCMeisaiServiceServer).GetImportSession(ctx, req.(*GetImportSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ETCMeisaiService_ListImportSessions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListImportSessionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ETCMeisaiServiceServer).ListImportSessions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ETCMeisaiService_ListImportSessions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ETCMeisaiServiceServer).ListImportSessions(ctx, req.(*ListImportSessionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ETCMeisaiService_CreateMapping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMappingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ETCMeisaiServiceServer).CreateMapping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ETCMeisaiService_CreateMapping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ETCMeisaiServiceServer).CreateMapping(ctx, req.(*CreateMappingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ETCMeisaiService_GetMapping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMappingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ETCMeisaiServiceServer).GetMapping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ETCMeisaiService_GetMapping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ETCMeisaiServiceServer).GetMapping(ctx, req.(*GetMappingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ETCMeisaiService_ListMappings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMappingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ETCMeisaiServiceServer).ListMappings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ETCMeisaiService_ListMappings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ETCMeisaiServiceServer).ListMappings(ctx, req.(*ListMappingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ETCMeisaiService_UpdateMapping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMappingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ETCMeisaiServiceServer).UpdateMapping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ETCMeisaiService_UpdateMapping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ETCMeisaiServiceServer).UpdateMapping(ctx, req.(*UpdateMappingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ETCMeisaiService_DeleteMapping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMappingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ETCMeisaiServiceServer).DeleteMapping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ETCMeisaiService_DeleteMapping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ETCMeisaiServiceServer).DeleteMapping(ctx, req.(*DeleteMappingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ETCMeisaiService_GetStatistics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStatisticsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ETCMeisaiServiceServer).GetStatistics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ETCMeisaiService_GetStatistics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ETCMeisaiServiceServer).GetStatistics(ctx, req.(*GetStatisticsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ETCMeisaiService_ServiceDesc is the grpc.ServiceDesc for ETCMeisaiService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ETCMeisaiService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "etc_meisai.v1.ETCMeisaiService",
	HandlerType: (*ETCMeisaiServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateRecord",
			Handler:    _ETCMeisaiService_CreateRecord_Handler,
		},
		{
			MethodName: "GetRecord",
			Handler:    _ETCMeisaiService_GetRecord_Handler,
		},
		{
			MethodName: "ListRecords",
			Handler:    _ETCMeisaiService_ListRecords_Handler,
		},
		{
			MethodName: "UpdateRecord",
			Handler:    _ETCMeisaiService_UpdateRecord_Handler,
		},
		{
			MethodName: "DeleteRecord",
			Handler:    _ETCMeisaiService_DeleteRecord_Handler,
		},
		{
			MethodName: "ImportCSV",
			Handler:    _ETCMeisaiService_ImportCSV_Handler,
		},
		{
			MethodName: "GetImportSession",
			Handler:    _ETCMeisaiService_GetImportSession_Handler,
		},
		{
			MethodName: "ListImportSessions",
			Handler:    _ETCMeisaiService_ListImportSessions_Handler,
		},
		{
			MethodName: "CreateMapping",
			Handler:    _ETCMeisaiService_CreateMapping_Handler,
		},
		{
			MethodName: "GetMapping",
			Handler:    _ETCMeisaiService_GetMapping_Handler,
		},
		{
			MethodName: "ListMappings",
			Handler:    _ETCMeisaiService_ListMappings_Handler,
		},
		{
			MethodName: "UpdateMapping",
			Handler:    _ETCMeisaiService_UpdateMapping_Handler,
		},
		{
			MethodName: "DeleteMapping",
			Handler:    _ETCMeisaiService_DeleteMapping_Handler,
		},
		{
			MethodName: "GetStatistics",
			Handler:    _ETCMeisaiService_GetStatistics_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ImportCSVStream",
			Handler:       _ETCMeisaiService_ImportCSVStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "etc_meisai.proto",
}
