syntax = "proto3";

package etc_meisai.v1;

import "google/protobuf/timestamp.proto";
import "google/protobuf/struct.proto";
import "google/protobuf/duration.proto";

option go_package = "github.com/yhonda-ohishi/etc_meisai/src/pb;pb";

// ========== Entity Messages (for Repository layer) ==========

// ETCMappingEntity - Repository層用のマッピングエンティティ
message ETCMappingEntity {
  int64 id = 1;
  int64 etc_record_id = 2;
  string mapping_type = 4;
  int64 mapped_entity_id = 5;
  string mapped_entity_type = 6;
  float confidence = 7;
  string status = 8;  // String representation of status
  google.protobuf.Struct metadata = 9;
  string created_by = 10;
  google.protobuf.Timestamp created_at = 11;
  google.protobuf.Timestamp updated_at = 12;
}

// ETCMeisaiRecordEntity - Repository層用のETC記録エンティティ
message ETCMeisaiRecordEntity {
  int64 id = 1;
  string hash = 2;
  google.protobuf.Timestamp date = 3;  // Stored as timestamp in DB
  string time = 4;  // HH:MM:SS format
  string entrance_ic = 5;
  string exit_ic = 6;
  int32 toll_amount = 7;
  string car_number = 8;
  string etc_card_number = 9;
  optional string etc_num = 10;
  optional int64 dtako_row_id = 11;
  google.protobuf.Timestamp created_at = 12;
  google.protobuf.Timestamp updated_at = 13;
  optional google.protobuf.Timestamp deleted_at = 14;  // Soft delete support
}

// ImportSessionEntity - Repository層用のインポートセッションエンティティ
message ImportSessionEntity {
  string id = 1;  // UUID
  string account_type = 2;
  string account_id = 3;
  string file_name = 4;
  int64 file_size = 5;
  string status = 6;  // String representation of status
  int32 total_rows = 7;
  int32 processed_rows = 8;
  int32 success_rows = 9;
  int32 error_rows = 10;
  int32 duplicate_rows = 11;
  google.protobuf.Timestamp started_at = 12;
  optional google.protobuf.Timestamp completed_at = 13;
  string created_by = 14;
  google.protobuf.Timestamp created_at = 15;
  // Error log stored separately in DB
}

// ImportErrorEntity - Repository層用のインポートエラーエンティティ
message ImportErrorEntity {
  int64 id = 1;
  string session_id = 2;
  int32 row_number = 3;
  string error_type = 4;
  string error_message = 5;
  string raw_data = 6;
  google.protobuf.Timestamp created_at = 7;
}

// ========== Value Objects ==========

// DateRange - 日付範囲
message DateRange {
  google.protobuf.Timestamp start = 1;
  google.protobuf.Timestamp end = 2;
}

// Pagination - ページネーション情報
message Pagination {
  int32 page = 1;
  int32 page_size = 2;
  int32 total_count = 3;
  int32 total_pages = 4;
}

// SortCriteria - ソート条件
message SortCriteria {
  string field = 1;
  SortDirection direction = 2;
}

enum SortDirection {
  SORT_DIRECTION_UNSPECIFIED = 0;
  SORT_DIRECTION_ASC = 1;
  SORT_DIRECTION_DESC = 2;
}

// FilterCriteria - フィルタ条件
message FilterCriteria {
  map<string, string> string_filters = 1;
  map<string, int64> numeric_filters = 2;
  map<string, DateRange> date_filters = 3;
  repeated string in_filters = 4;
}

// ========== Domain Events ==========

// MappingCreatedEvent - マッピング作成イベント
message MappingCreatedEvent {
  int64 mapping_id = 1;
  int64 etc_record_id = 2;
  string mapping_type = 3;
  int64 mapped_entity_id = 4;
  google.protobuf.Timestamp created_at = 5;
  string created_by = 6;
}

// MappingStatusChangedEvent - マッピングステータス変更イベント
message MappingStatusChangedEvent {
  int64 mapping_id = 1;
  string old_status = 2;
  string new_status = 3;
  google.protobuf.Timestamp changed_at = 4;
  string changed_by = 5;
}

// RecordImportedEvent - レコードインポートイベント
message RecordImportedEvent {
  int64 record_id = 1;
  string session_id = 2;
  string hash = 3;
  google.protobuf.Timestamp imported_at = 4;
}

// ImportSessionCompletedEvent - インポートセッション完了イベント
message ImportSessionCompletedEvent {
  string session_id = 1;
  int32 total_records = 2;
  int32 success_count = 3;
  int32 error_count = 4;
  int32 duplicate_count = 5;
  google.protobuf.Timestamp completed_at = 6;
}

// ========== Aggregates ==========

// ETCRecordAggregate - ETC記録集約
message ETCRecordAggregate {
  ETCMeisaiRecordEntity record = 1;
  repeated ETCMappingEntity mappings = 2;
  RecordMetadata metadata = 3;
}

// RecordMetadata - レコードメタデータ
message RecordMetadata {
  bool is_mapped = 1;
  bool is_verified = 2;
  int32 mapping_count = 3;
  float average_confidence = 4;
  google.protobuf.Timestamp last_mapped_at = 5;
}

// ImportSessionAggregate - インポートセッション集約
message ImportSessionAggregate {
  ImportSessionEntity session = 1;
  repeated ImportErrorEntity errors = 2;
  ImportMetadata metadata = 3;
}

// ImportMetadata - インポートメタデータ
message ImportMetadata {
  float completion_percentage = 1;
  float error_rate = 2;
  float duplicate_rate = 3;
  int32 records_per_minute = 4;
  google.protobuf.Duration estimated_time_remaining = 5;
}

// ========== Batch Operations ==========

// BatchOperationResult - バッチ操作結果
message BatchOperationResult {
  int32 total_count = 1;
  int32 success_count = 2;
  int32 failure_count = 3;
  repeated BatchOperationError errors = 4;
}

// BatchOperationError - バッチ操作エラー
message BatchOperationError {
  int32 index = 1;
  string error_code = 2;
  string error_message = 3;
  google.protobuf.Struct context = 4;
}

// ========== Validation ==========

// ValidationResult - バリデーション結果
message ValidationResult {
  bool is_valid = 1;
  repeated ValidationError errors = 2;
  repeated ValidationWarning warnings = 3;
}

// ValidationError - バリデーションエラー
message ValidationError {
  string field = 1;
  string code = 2;
  string message = 3;
}

// ValidationWarning - バリデーション警告
message ValidationWarning {
  string field = 1;
  string code = 2;
  string message = 3;
}

// ========== Configuration ==========

// ImportConfiguration - インポート設定
message ImportConfiguration {
  bool skip_duplicates = 1;
  bool validate_strictly = 2;
  int32 batch_size = 3;
  int32 max_errors = 4;
  map<string, string> field_mappings = 5;
  repeated string required_fields = 6;
}

// MappingConfiguration - マッピング設定
message MappingConfiguration {
  float minimum_confidence = 1;
  bool auto_approve = 2;
  int32 max_mappings_per_record = 3;
  repeated string allowed_mapping_types = 4;
}

// ========== Analytics ==========

// TrendData - トレンドデータ
message TrendData {
  string period = 1;  // e.g., "2024-01", "2024-W01", "2024-01-15"
  map<string, double> metrics = 2;
}

// AggregationResult - 集計結果
message AggregationResult {
  string dimension = 1;
  map<string, double> measures = 2;
  int32 count = 3;
}