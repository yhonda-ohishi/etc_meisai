package models

import (
	"time"
)

// ETCMapping represents the mapping between ETC records and DTako records
type ETCMapping struct {
	ID           int64     `json:"id" gorm:"primaryKey;autoIncrement"`
	ETCMeisaiID  int64     `json:"etc_meisai_id" gorm:"not null;index"`
	DTakoRowID   int64     `json:"dtako_row_id" gorm:"not null;index"`
	MappingType  string    `json:"mapping_type" gorm:"size:20"` // auto, manual
	Confidence   float64   `json:"confidence" gorm:"type:decimal(5,4)"`
	CreatedAt    time.Time `json:"created_at" gorm:"autoCreateTime"`
	UpdatedAt    time.Time `json:"updated_at" gorm:"autoUpdateTime"`

	// Relationships
	ETCMeisai    *ETCMeisai `json:"etc_meisai,omitempty" gorm:"foreignKey:ETCMeisaiID"`
}

// PotentialMatch represents a potential match for auto-mapping
type PotentialMatch struct {
	DTakoRowID   int64     `json:"dtako_row_id"`
	Confidence   float64   `json:"confidence"`
	MatchReason  string    `json:"match_reason"`
	ETCNumber    string    `json:"etc_number"`
	Amount       int32     `json:"amount"`
	Date         time.Time `json:"date"`
}

// Job represents an async job
type Job struct {
	ID        string                 `json:"id" gorm:"primaryKey"`
	Type      string                 `json:"type" gorm:"size:50;not null"`
	Status    string                 `json:"status" gorm:"size:20;not null"`
	Progress  int                    `json:"progress" gorm:"default:0"`
	Params    map[string]interface{} `json:"params" gorm:"type:json"`
	Result    map[string]interface{} `json:"result" gorm:"type:json"`
	Error     string                 `json:"error" gorm:"type:text"`
	CreatedAt time.Time              `json:"created_at" gorm:"autoCreateTime"`
	UpdatedAt time.Time              `json:"updated_at" gorm:"autoUpdateTime"`
}

// DownloadJob represents a download job
type DownloadJob struct {
	JobID     string    `json:"job_id"`
	Accounts  []string  `json:"accounts"`
	Status    string    `json:"status"`
	Progress  int       `json:"progress"`
	Results   []string  `json:"results"` // File paths
	Error     string    `json:"error,omitempty"`
	CreatedAt time.Time `json:"created_at"`
}

// DownloadStatus represents the status of a download job
type DownloadStatus struct {
	JobID      string     `json:"job_id"`
	Status     string     `json:"status"`
	Progress   int        `json:"progress"`
	Total      int        `json:"total"`
	Completed  int        `json:"completed"`
	Failed     int        `json:"failed"`
	Files      []string   `json:"files"`
	Error      string     `json:"error,omitempty"`
	StartedAt  time.Time  `json:"started_at"`
	FinishedAt *time.Time `json:"finished_at,omitempty"`
}

// ServiceStatus represents the service status
type ServiceStatus struct {
	Service   string    `json:"service"`
	Status    string    `json:"status"`
	Timestamp time.Time `json:"timestamp"`
	Version   string    `json:"version"`
	Database  DBStatus  `json:"database"`
	Jobs      JobStatus `json:"jobs"`
}

// DBStatus represents database connection status
type DBStatus struct {
	Connected   bool   `json:"connected"`
	ActiveConns int    `json:"active_connections"`
	IdleConns   int    `json:"idle_connections"`
	Status      string `json:"status"`
}

// JobStatus represents job statistics
type JobStatus struct {
	Active    int `json:"active"`
	Pending   int `json:"pending"`
	Completed int `json:"completed"`
	Failed    int `json:"failed"`
}

// JobMetrics represents job metrics
type JobMetrics struct {
	TotalJobs      int64         `json:"total_jobs"`
	ActiveJobs     int           `json:"active_jobs"`
	CompletedJobs  int64         `json:"completed_jobs"`
	FailedJobs     int64         `json:"failed_jobs"`
	AverageRuntime time.Duration `json:"average_runtime"`
	Uptime         time.Duration `json:"uptime"`
}