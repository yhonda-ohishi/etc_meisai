syntax = "proto3";

package etc_meisai.v1;

import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/struct.proto";
import "google/protobuf/empty.proto";

option go_package = "github.com/yhonda-ohishi/etc_meisai/src/pb;pb";

// ETCMeisaiService - ETC明細管理サービス
service ETCMeisaiService {
  // ETC明細レコード作成
  rpc CreateRecord(CreateRecordRequest) returns (CreateRecordResponse) {
    option (google.api.http) = {
      post: "/api/v1/etc-meisai/records"
      body: "record"
    };
  }

  // ETC明細レコード取得
  rpc GetRecord(GetRecordRequest) returns (GetRecordResponse) {
    option (google.api.http) = {
      get: "/api/v1/etc-meisai/records/{id}"
    };
  }

  // ETC明細レコード一覧取得
  rpc ListRecords(ListRecordsRequest) returns (ListRecordsResponse) {
    option (google.api.http) = {
      get: "/api/v1/etc-meisai/records"
    };
  }

  // ETC明細レコード更新
  rpc UpdateRecord(UpdateRecordRequest) returns (UpdateRecordResponse) {
    option (google.api.http) = {
      put: "/api/v1/etc-meisai/records/{id}"
      body: "record"
    };
  }

  // ETC明細レコード削除
  rpc DeleteRecord(DeleteRecordRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/api/v1/etc-meisai/records/{id}"
    };
  }

  // CSVインポート（ストリーミング）
  rpc ImportCSVStream(stream ImportCSVChunk) returns (stream ImportProgress) {}

  // CSVインポート（単一リクエスト）
  rpc ImportCSV(ImportCSVRequest) returns (ImportCSVResponse) {
    option (google.api.http) = {
      post: "/api/v1/etc-meisai/import"
      body: "*"
    };
  }

  // インポートセッション取得
  rpc GetImportSession(GetImportSessionRequest) returns (GetImportSessionResponse) {
    option (google.api.http) = {
      get: "/api/v1/etc-meisai/import-sessions/{session_id}"
    };
  }

  // インポートセッション一覧取得
  rpc ListImportSessions(ListImportSessionsRequest) returns (ListImportSessionsResponse) {
    option (google.api.http) = {
      get: "/api/v1/etc-meisai/import-sessions"
    };
  }

  // マッピング作成
  rpc CreateMapping(CreateMappingRequest) returns (CreateMappingResponse) {
    option (google.api.http) = {
      post: "/api/v1/etc-meisai/mappings"
      body: "mapping"
    };
  }

  // マッピング取得
  rpc GetMapping(GetMappingRequest) returns (GetMappingResponse) {
    option (google.api.http) = {
      get: "/api/v1/etc-meisai/mappings/{id}"
    };
  }

  // マッピング一覧取得
  rpc ListMappings(ListMappingsRequest) returns (ListMappingsResponse) {
    option (google.api.http) = {
      get: "/api/v1/etc-meisai/mappings"
    };
  }

  // マッピング更新
  rpc UpdateMapping(UpdateMappingRequest) returns (UpdateMappingResponse) {
    option (google.api.http) = {
      put: "/api/v1/etc-meisai/mappings/{id}"
      body: "mapping"
    };
  }

  // マッピング削除
  rpc DeleteMapping(DeleteMappingRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/api/v1/etc-meisai/mappings/{id}"
    };
  }

  // 統計情報取得
  rpc GetStatistics(GetStatisticsRequest) returns (GetStatisticsResponse) {
    option (google.api.http) = {
      get: "/api/v1/etc-meisai/statistics"
    };
  }
}

// ========== Core Messages ==========

// ETC明細レコード
message ETCMeisaiRecord {
  int64 id = 1;
  string hash = 2;
  string date = 3;  // YYYY-MM-DD format
  string time = 4;  // HH:MM:SS format
  string entrance_ic = 5;
  string exit_ic = 6;
  int32 toll_amount = 7;
  string car_number = 8;
  string etc_card_number = 9;
  optional string etc_num = 10;
  optional int64 dtako_row_id = 11;
  google.protobuf.Timestamp created_at = 12;
  google.protobuf.Timestamp updated_at = 13;
}

// マッピング情報
message ETCMapping {
  int64 id = 1;
  int64 etc_record_id = 2;
  ETCMeisaiRecord etc_record = 3;
  string mapping_type = 4;
  int64 mapped_entity_id = 5;
  string mapped_entity_type = 6;
  float confidence = 7;
  MappingStatus status = 8;
  google.protobuf.Struct metadata = 9;
  string created_by = 10;
  google.protobuf.Timestamp created_at = 11;
  google.protobuf.Timestamp updated_at = 12;
}

// インポートセッション
message ImportSession {
  string id = 1;  // UUID
  string account_type = 2;
  string account_id = 3;
  string file_name = 4;
  int64 file_size = 5;
  ImportStatus status = 6;
  int32 total_rows = 7;
  int32 processed_rows = 8;
  int32 success_rows = 9;
  int32 error_rows = 10;
  int32 duplicate_rows = 11;
  google.protobuf.Timestamp started_at = 12;
  optional google.protobuf.Timestamp completed_at = 13;
  repeated ImportError error_log = 14;
  string created_by = 15;
  google.protobuf.Timestamp created_at = 16;
}

// インポートエラー
message ImportError {
  int32 row_number = 1;
  string error_type = 2;
  string error_message = 3;
  string raw_data = 4;
}

// ========== Enums ==========

// マッピングステータス
enum MappingStatus {
  MAPPING_STATUS_UNSPECIFIED = 0;
  MAPPING_STATUS_ACTIVE = 1;
  MAPPING_STATUS_INACTIVE = 2;
  MAPPING_STATUS_PENDING = 3;
  MAPPING_STATUS_REJECTED = 4;
}

// インポートステータス
enum ImportStatus {
  IMPORT_STATUS_UNSPECIFIED = 0;
  IMPORT_STATUS_PENDING = 1;
  IMPORT_STATUS_PROCESSING = 2;
  IMPORT_STATUS_COMPLETED = 3;
  IMPORT_STATUS_FAILED = 4;
  IMPORT_STATUS_CANCELLED = 5;
}

// ========== Request/Response Messages ==========

// レコード作成
message CreateRecordRequest {
  ETCMeisaiRecord record = 1;
}

message CreateRecordResponse {
  ETCMeisaiRecord record = 1;
}

// レコード取得
message GetRecordRequest {
  int64 id = 1;
}

message GetRecordResponse {
  ETCMeisaiRecord record = 1;
}

// レコード一覧取得
message ListRecordsRequest {
  int32 page = 1;
  int32 page_size = 2;
  string sort_by = 3;
  SortOrder sort_order = 4;

  // フィルタ条件
  optional string date_from = 5;  // YYYY-MM-DD
  optional string date_to = 6;    // YYYY-MM-DD
  optional string car_number = 7;
  optional string etc_card_number = 8;
  optional string entrance_ic = 9;
  optional string exit_ic = 10;
}

message ListRecordsResponse {
  repeated ETCMeisaiRecord records = 1;
  int32 total_count = 2;
  int32 page = 3;
  int32 page_size = 4;
}

// レコード更新
message UpdateRecordRequest {
  int64 id = 1;
  ETCMeisaiRecord record = 2;
}

message UpdateRecordResponse {
  ETCMeisaiRecord record = 1;
}

// レコード削除
message DeleteRecordRequest {
  int64 id = 1;
}

// CSVインポート（ストリーミング）
message ImportCSVChunk {
  string session_id = 1;
  bytes data = 2;
  bool is_last = 3;
  int32 chunk_number = 4;
}

message ImportProgress {
  string session_id = 1;
  int32 processed_rows = 2;
  int32 success_rows = 3;
  int32 error_rows = 4;
  int32 duplicate_rows = 5;
  float progress_percentage = 6;
  optional string error_message = 7;
  ImportStatus status = 8;
}

// CSVインポート（単一リクエスト）
message ImportCSVRequest {
  string account_type = 1;
  string account_id = 2;
  string file_name = 3;
  bytes file_content = 4;
}

message ImportCSVResponse {
  ImportSession session = 1;
}

// インポートセッション取得
message GetImportSessionRequest {
  string session_id = 1;
}

message GetImportSessionResponse {
  ImportSession session = 1;
}

// インポートセッション一覧取得
message ListImportSessionsRequest {
  int32 page = 1;
  int32 page_size = 2;
  optional string account_type = 3;
  optional string account_id = 4;
  optional ImportStatus status = 5;
}

message ListImportSessionsResponse {
  repeated ImportSession sessions = 1;
  int32 total_count = 2;
  int32 page = 3;
  int32 page_size = 4;
}

// マッピング作成
message CreateMappingRequest {
  ETCMapping mapping = 1;
}

message CreateMappingResponse {
  ETCMapping mapping = 1;
}

// マッピング取得
message GetMappingRequest {
  int64 id = 1;
}

message GetMappingResponse {
  ETCMapping mapping = 1;
}

// マッピング一覧取得
message ListMappingsRequest {
  int32 page = 1;
  int32 page_size = 2;
  optional int64 etc_record_id = 3;
  optional string mapping_type = 4;
  optional string mapped_entity_type = 5;
  optional int64 mapped_entity_id = 6;
  optional MappingStatus status = 7;
}

message ListMappingsResponse {
  repeated ETCMapping mappings = 1;
  int32 total_count = 2;
  int32 page = 3;
  int32 page_size = 4;
}

// マッピング更新
message UpdateMappingRequest {
  int64 id = 1;
  ETCMapping mapping = 2;
}

message UpdateMappingResponse {
  ETCMapping mapping = 1;
}

// マッピング削除
message DeleteMappingRequest {
  int64 id = 1;
}

// 統計情報取得
message GetStatisticsRequest {
  optional string date_from = 1;  // YYYY-MM-DD
  optional string date_to = 2;    // YYYY-MM-DD
  optional string car_number = 3;
  optional string etc_card_number = 4;
}

message GetStatisticsResponse {
  int64 total_records = 1;
  int64 total_amount = 2;
  int32 unique_cars = 3;
  int32 unique_cards = 4;
  repeated DailyStatistics daily_stats = 5;
  repeated ICStatistics ic_stats = 6;
}

message DailyStatistics {
  string date = 1;
  int32 record_count = 2;
  int64 total_amount = 3;
}

message ICStatistics {
  string ic_name = 1;
  int32 usage_count = 2;
  string ic_type = 3;  // entrance or exit
}

// ========== Common ==========

enum SortOrder {
  SORT_ORDER_UNSPECIFIED = 0;
  SORT_ORDER_ASC = 1;
  SORT_ORDER_DESC = 2;
}